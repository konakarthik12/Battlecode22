package pathfinder;

import battlecode.common.Direction;
import battlecode.common.GameActionException;
import battlecode.common.MapLocation;
import battlecode.common.RobotController;

public class UnrolledPathfinder {
    static RobotController rc;
    static MapLocation dest;

    static int smartRubble(MapLocation cur) throws GameActionException {
        if (rc.getLocation().equals(cur)) return 0;
        else if (cur.equals(dest)) return -1000;
        else if (rc.canSenseLocation(cur) && !rc.isLocationOccupied(cur)) return rc.senseRubble(cur) + 10;
        //out of bounds or is occupied
        return 10000;

    }
    public static Direction pathfind(RobotController robotController, MapLocation destination) throws GameActionException {
        rc = robotController;
        dest = destination;
        switch (rc.getLocation().directionTo(dest)) {case EAST :
            return pathfind_EAST(rc,dest);
            case WEST :
                return pathfind_WEST(rc,dest);
            case NORTH :
                return pathfind_NORTH(rc,dest);
            case SOUTH :
                return pathfind_SOUTH(rc,dest);
            case NORTHEAST :
                return pathfind_NORTHEAST(rc,dest);
            case NORTHWEST :
                return pathfind_NORTHWEST(rc,dest);
            case SOUTHEAST :
                return pathfind_SOUTHEAST(rc,dest);
            default:
                return pathfind_SOUTHWEST(rc,dest);
        }
    }
    private static Direction pathfind_EAST(RobotController rc, MapLocation dest) throws GameActionException {
        MapLocation m_location = rc.getLocation();
        Direction best_dir = null;MapLocation loc_0 = m_location.translate(-4, 4);
        MapLocation loc_1 = m_location.translate(-3, 4);
        MapLocation loc_2 = m_location.translate(-2, 4);
        MapLocation loc_3 = m_location.translate(-1, 4);
        MapLocation loc_4 = m_location.translate(0, 4);
        MapLocation loc_5 = m_location.translate(1, 4);
        MapLocation loc_6 = m_location.translate(2, 4);
        MapLocation loc_7 = m_location.translate(3, 4);
        MapLocation loc_8 = m_location.translate(4, 4);
        MapLocation loc_9 = m_location.translate(-4, 3);
        MapLocation loc_10 = m_location.translate(-3, 3);
        MapLocation loc_11 = m_location.translate(-2, 3);
        MapLocation loc_12 = m_location.translate(-1, 3);
        MapLocation loc_13 = m_location.translate(0, 3);
        MapLocation loc_14 = m_location.translate(1, 3);
        MapLocation loc_15 = m_location.translate(2, 3);
        MapLocation loc_16 = m_location.translate(3, 3);
        MapLocation loc_17 = m_location.translate(4, 3);
        MapLocation loc_18 = m_location.translate(-4, 2);
        MapLocation loc_19 = m_location.translate(-3, 2);
        MapLocation loc_20 = m_location.translate(-2, 2);
        MapLocation loc_21 = m_location.translate(-1, 2);
        MapLocation loc_22 = m_location.translate(0, 2);
        MapLocation loc_23 = m_location.translate(1, 2);
        MapLocation loc_24 = m_location.translate(2, 2);
        MapLocation loc_25 = m_location.translate(3, 2);
        MapLocation loc_26 = m_location.translate(4, 2);
        MapLocation loc_27 = m_location.translate(-4, 1);
        MapLocation loc_28 = m_location.translate(-3, 1);
        MapLocation loc_29 = m_location.translate(-2, 1);
        MapLocation loc_30 = m_location.translate(-1, 1);
        MapLocation loc_31 = m_location.translate(0, 1);
        MapLocation loc_32 = m_location.translate(1, 1);
        MapLocation loc_33 = m_location.translate(2, 1);
        MapLocation loc_34 = m_location.translate(3, 1);
        MapLocation loc_35 = m_location.translate(4, 1);
        MapLocation loc_36 = m_location.translate(-4, 0);
        MapLocation loc_37 = m_location.translate(-3, 0);
        MapLocation loc_38 = m_location.translate(-2, 0);
        MapLocation loc_39 = m_location.translate(-1, 0);
        MapLocation loc_40 = m_location.translate(0, 0);
        MapLocation loc_41 = m_location.translate(1, 0);
        MapLocation loc_42 = m_location.translate(2, 0);
        MapLocation loc_43 = m_location.translate(3, 0);
        MapLocation loc_44 = m_location.translate(4, 0);
        MapLocation loc_45 = m_location.translate(-4, -1);
        MapLocation loc_46 = m_location.translate(-3, -1);
        MapLocation loc_47 = m_location.translate(-2, -1);
        MapLocation loc_48 = m_location.translate(-1, -1);
        MapLocation loc_49 = m_location.translate(0, -1);
        MapLocation loc_50 = m_location.translate(1, -1);
        MapLocation loc_51 = m_location.translate(2, -1);
        MapLocation loc_52 = m_location.translate(3, -1);
        MapLocation loc_53 = m_location.translate(4, -1);
        MapLocation loc_54 = m_location.translate(-4, -2);
        MapLocation loc_55 = m_location.translate(-3, -2);
        MapLocation loc_56 = m_location.translate(-2, -2);
        MapLocation loc_57 = m_location.translate(-1, -2);
        MapLocation loc_58 = m_location.translate(0, -2);
        MapLocation loc_59 = m_location.translate(1, -2);
        MapLocation loc_60 = m_location.translate(2, -2);
        MapLocation loc_61 = m_location.translate(3, -2);
        MapLocation loc_62 = m_location.translate(4, -2);
        MapLocation loc_63 = m_location.translate(-4, -3);
        MapLocation loc_64 = m_location.translate(-3, -3);
        MapLocation loc_65 = m_location.translate(-2, -3);
        MapLocation loc_66 = m_location.translate(-1, -3);
        MapLocation loc_67 = m_location.translate(0, -3);
        MapLocation loc_68 = m_location.translate(1, -3);
        MapLocation loc_69 = m_location.translate(2, -3);
        MapLocation loc_70 = m_location.translate(3, -3);
        MapLocation loc_71 = m_location.translate(4, -3);
        MapLocation loc_72 = m_location.translate(-4, -4);
        MapLocation loc_73 = m_location.translate(-3, -4);
        MapLocation loc_74 = m_location.translate(-2, -4);
        MapLocation loc_75 = m_location.translate(-1, -4);
        MapLocation loc_76 = m_location.translate(0, -4);
        MapLocation loc_77 = m_location.translate(1, -4);
        MapLocation loc_78 = m_location.translate(2, -4);
        MapLocation loc_79 = m_location.translate(3, -4);
        MapLocation loc_80 = m_location.translate(4, -4);
// layer 5
        int cost_44 = smartRubble(loc_44) + loc_44.distanceSquaredTo(dest);
        int cost_35 = smartRubble(loc_35) + loc_35.distanceSquaredTo(dest);
        int cost_53 = smartRubble(loc_53) + loc_53.distanceSquaredTo(dest);
        int cost_26 = smartRubble(loc_26) + loc_26.distanceSquaredTo(dest);
        int cost_62 = smartRubble(loc_62) + loc_62.distanceSquaredTo(dest);
        int cost_17 = smartRubble(loc_17) + loc_17.distanceSquaredTo(dest);
        int cost_71 = smartRubble(loc_71) + loc_71.distanceSquaredTo(dest);
        int cost_8 = smartRubble(loc_8) + loc_8.distanceSquaredTo(dest);
        int cost_80 = smartRubble(loc_80) + loc_80.distanceSquaredTo(dest);
// layer 4
        int cost_43 = Integer.MAX_VALUE;
        if (cost_44 < cost_43) cost_43 = cost_44;
        if (cost_35 < cost_43) cost_43 = cost_35;
        if (cost_53 < cost_43) cost_43 = cost_53;
        cost_43 += smartRubble(loc_43);
        int cost_34 = Integer.MAX_VALUE;
        if (cost_35 < cost_34) cost_34 = cost_35;
        if (cost_26 < cost_34) cost_34 = cost_26;
        if (cost_44 < cost_34) cost_34 = cost_44;
        cost_34 += smartRubble(loc_34);
        int cost_52 = Integer.MAX_VALUE;
        if (cost_53 < cost_52) cost_52 = cost_53;
        if (cost_44 < cost_52) cost_52 = cost_44;
        if (cost_62 < cost_52) cost_52 = cost_62;
        cost_52 += smartRubble(loc_52);
        int cost_25 = Integer.MAX_VALUE;
        if (cost_26 < cost_25) cost_25 = cost_26;
        if (cost_17 < cost_25) cost_25 = cost_17;
        if (cost_35 < cost_25) cost_25 = cost_35;
        cost_25 += smartRubble(loc_25);
        int cost_61 = Integer.MAX_VALUE;
        if (cost_62 < cost_61) cost_61 = cost_62;
        if (cost_53 < cost_61) cost_61 = cost_53;
        if (cost_71 < cost_61) cost_61 = cost_71;
        cost_61 += smartRubble(loc_61);
        int cost_16 = Integer.MAX_VALUE;
        if (cost_17 < cost_16) cost_16 = cost_17;
        if (cost_8 < cost_16) cost_16 = cost_8;
        if (cost_26 < cost_16) cost_16 = cost_26;
        cost_16 += smartRubble(loc_16);
        int cost_70 = Integer.MAX_VALUE;
        if (cost_71 < cost_70) cost_70 = cost_71;
        if (cost_62 < cost_70) cost_70 = cost_62;
        if (cost_80 < cost_70) cost_70 = cost_80;
        cost_70 += smartRubble(loc_70);
// layer 3
        int cost_42 = Integer.MAX_VALUE;
        if (cost_43 < cost_42) cost_42 = cost_43;
        if (cost_34 < cost_42) cost_42 = cost_34;
        if (cost_52 < cost_42) cost_42 = cost_52;
        cost_42 += smartRubble(loc_42);
        int cost_33 = Integer.MAX_VALUE;
        if (cost_34 < cost_33) cost_33 = cost_34;
        if (cost_25 < cost_33) cost_33 = cost_25;
        if (cost_43 < cost_33) cost_33 = cost_43;
        cost_33 += smartRubble(loc_33);
        int cost_51 = Integer.MAX_VALUE;
        if (cost_52 < cost_51) cost_51 = cost_52;
        if (cost_43 < cost_51) cost_51 = cost_43;
        if (cost_61 < cost_51) cost_51 = cost_61;
        cost_51 += smartRubble(loc_51);
        int cost_24 = Integer.MAX_VALUE;
        if (cost_25 < cost_24) cost_24 = cost_25;
        if (cost_16 < cost_24) cost_24 = cost_16;
        if (cost_34 < cost_24) cost_24 = cost_34;
        cost_24 += smartRubble(loc_24);
        int cost_60 = Integer.MAX_VALUE;
        if (cost_61 < cost_60) cost_60 = cost_61;
        if (cost_52 < cost_60) cost_60 = cost_52;
        if (cost_70 < cost_60) cost_60 = cost_70;
        cost_60 += smartRubble(loc_60);
// layer 2
        int cost_41 = Integer.MAX_VALUE;
        if (cost_42 < cost_41) cost_41 = cost_42;
        if (cost_33 < cost_41) cost_41 = cost_33;
        if (cost_51 < cost_41) cost_41 = cost_51;
        cost_41 += smartRubble(loc_41);
        int cost_32 = Integer.MAX_VALUE;
        if (cost_33 < cost_32) cost_32 = cost_33;
        if (cost_24 < cost_32) cost_32 = cost_24;
        if (cost_42 < cost_32) cost_32 = cost_42;
        cost_32 += smartRubble(loc_32);
        int cost_50 = Integer.MAX_VALUE;
        if (cost_51 < cost_50) cost_50 = cost_51;
        if (cost_42 < cost_50) cost_50 = cost_42;
        if (cost_60 < cost_50) cost_50 = cost_60;
        cost_50 += smartRubble(loc_50);
        int cost_40 = cost_41;
        best_dir = Direction.EAST;
        if (cost_32 < cost_40) {
            cost_40 = cost_32;
            best_dir = Direction.NORTHEAST;
        }
        if (cost_50 < cost_40) {
            cost_40 = cost_50;
            best_dir = Direction.SOUTHEAST;
        }
        return best_dir;}private static Direction pathfind_WEST(RobotController rc, MapLocation dest) throws GameActionException {
        MapLocation m_location = rc.getLocation();
        Direction best_dir = null;MapLocation loc_0 = m_location.translate(-4, 4);
        MapLocation loc_1 = m_location.translate(-3, 4);
        MapLocation loc_2 = m_location.translate(-2, 4);
        MapLocation loc_3 = m_location.translate(-1, 4);
        MapLocation loc_4 = m_location.translate(0, 4);
        MapLocation loc_5 = m_location.translate(1, 4);
        MapLocation loc_6 = m_location.translate(2, 4);
        MapLocation loc_7 = m_location.translate(3, 4);
        MapLocation loc_8 = m_location.translate(4, 4);
        MapLocation loc_9 = m_location.translate(-4, 3);
        MapLocation loc_10 = m_location.translate(-3, 3);
        MapLocation loc_11 = m_location.translate(-2, 3);
        MapLocation loc_12 = m_location.translate(-1, 3);
        MapLocation loc_13 = m_location.translate(0, 3);
        MapLocation loc_14 = m_location.translate(1, 3);
        MapLocation loc_15 = m_location.translate(2, 3);
        MapLocation loc_16 = m_location.translate(3, 3);
        MapLocation loc_17 = m_location.translate(4, 3);
        MapLocation loc_18 = m_location.translate(-4, 2);
        MapLocation loc_19 = m_location.translate(-3, 2);
        MapLocation loc_20 = m_location.translate(-2, 2);
        MapLocation loc_21 = m_location.translate(-1, 2);
        MapLocation loc_22 = m_location.translate(0, 2);
        MapLocation loc_23 = m_location.translate(1, 2);
        MapLocation loc_24 = m_location.translate(2, 2);
        MapLocation loc_25 = m_location.translate(3, 2);
        MapLocation loc_26 = m_location.translate(4, 2);
        MapLocation loc_27 = m_location.translate(-4, 1);
        MapLocation loc_28 = m_location.translate(-3, 1);
        MapLocation loc_29 = m_location.translate(-2, 1);
        MapLocation loc_30 = m_location.translate(-1, 1);
        MapLocation loc_31 = m_location.translate(0, 1);
        MapLocation loc_32 = m_location.translate(1, 1);
        MapLocation loc_33 = m_location.translate(2, 1);
        MapLocation loc_34 = m_location.translate(3, 1);
        MapLocation loc_35 = m_location.translate(4, 1);
        MapLocation loc_36 = m_location.translate(-4, 0);
        MapLocation loc_37 = m_location.translate(-3, 0);
        MapLocation loc_38 = m_location.translate(-2, 0);
        MapLocation loc_39 = m_location.translate(-1, 0);
        MapLocation loc_40 = m_location.translate(0, 0);
        MapLocation loc_41 = m_location.translate(1, 0);
        MapLocation loc_42 = m_location.translate(2, 0);
        MapLocation loc_43 = m_location.translate(3, 0);
        MapLocation loc_44 = m_location.translate(4, 0);
        MapLocation loc_45 = m_location.translate(-4, -1);
        MapLocation loc_46 = m_location.translate(-3, -1);
        MapLocation loc_47 = m_location.translate(-2, -1);
        MapLocation loc_48 = m_location.translate(-1, -1);
        MapLocation loc_49 = m_location.translate(0, -1);
        MapLocation loc_50 = m_location.translate(1, -1);
        MapLocation loc_51 = m_location.translate(2, -1);
        MapLocation loc_52 = m_location.translate(3, -1);
        MapLocation loc_53 = m_location.translate(4, -1);
        MapLocation loc_54 = m_location.translate(-4, -2);
        MapLocation loc_55 = m_location.translate(-3, -2);
        MapLocation loc_56 = m_location.translate(-2, -2);
        MapLocation loc_57 = m_location.translate(-1, -2);
        MapLocation loc_58 = m_location.translate(0, -2);
        MapLocation loc_59 = m_location.translate(1, -2);
        MapLocation loc_60 = m_location.translate(2, -2);
        MapLocation loc_61 = m_location.translate(3, -2);
        MapLocation loc_62 = m_location.translate(4, -2);
        MapLocation loc_63 = m_location.translate(-4, -3);
        MapLocation loc_64 = m_location.translate(-3, -3);
        MapLocation loc_65 = m_location.translate(-2, -3);
        MapLocation loc_66 = m_location.translate(-1, -3);
        MapLocation loc_67 = m_location.translate(0, -3);
        MapLocation loc_68 = m_location.translate(1, -3);
        MapLocation loc_69 = m_location.translate(2, -3);
        MapLocation loc_70 = m_location.translate(3, -3);
        MapLocation loc_71 = m_location.translate(4, -3);
        MapLocation loc_72 = m_location.translate(-4, -4);
        MapLocation loc_73 = m_location.translate(-3, -4);
        MapLocation loc_74 = m_location.translate(-2, -4);
        MapLocation loc_75 = m_location.translate(-1, -4);
        MapLocation loc_76 = m_location.translate(0, -4);
        MapLocation loc_77 = m_location.translate(1, -4);
        MapLocation loc_78 = m_location.translate(2, -4);
        MapLocation loc_79 = m_location.translate(3, -4);
        MapLocation loc_80 = m_location.translate(4, -4);
// layer 5
        int cost_36 = smartRubble(loc_36) + loc_36.distanceSquaredTo(dest);
        int cost_45 = smartRubble(loc_45) + loc_45.distanceSquaredTo(dest);
        int cost_27 = smartRubble(loc_27) + loc_27.distanceSquaredTo(dest);
        int cost_54 = smartRubble(loc_54) + loc_54.distanceSquaredTo(dest);
        int cost_18 = smartRubble(loc_18) + loc_18.distanceSquaredTo(dest);
        int cost_63 = smartRubble(loc_63) + loc_63.distanceSquaredTo(dest);
        int cost_9 = smartRubble(loc_9) + loc_9.distanceSquaredTo(dest);
        int cost_72 = smartRubble(loc_72) + loc_72.distanceSquaredTo(dest);
        int cost_0 = smartRubble(loc_0) + loc_0.distanceSquaredTo(dest);
// layer 4
        int cost_37 = Integer.MAX_VALUE;
        if (cost_36 < cost_37) cost_37 = cost_36;
        if (cost_45 < cost_37) cost_37 = cost_45;
        if (cost_27 < cost_37) cost_37 = cost_27;
        cost_37 += smartRubble(loc_37);
        int cost_46 = Integer.MAX_VALUE;
        if (cost_45 < cost_46) cost_46 = cost_45;
        if (cost_54 < cost_46) cost_46 = cost_54;
        if (cost_36 < cost_46) cost_46 = cost_36;
        cost_46 += smartRubble(loc_46);
        int cost_28 = Integer.MAX_VALUE;
        if (cost_27 < cost_28) cost_28 = cost_27;
        if (cost_36 < cost_28) cost_28 = cost_36;
        if (cost_18 < cost_28) cost_28 = cost_18;
        cost_28 += smartRubble(loc_28);
        int cost_55 = Integer.MAX_VALUE;
        if (cost_54 < cost_55) cost_55 = cost_54;
        if (cost_63 < cost_55) cost_55 = cost_63;
        if (cost_45 < cost_55) cost_55 = cost_45;
        cost_55 += smartRubble(loc_55);
        int cost_19 = Integer.MAX_VALUE;
        if (cost_18 < cost_19) cost_19 = cost_18;
        if (cost_27 < cost_19) cost_19 = cost_27;
        if (cost_9 < cost_19) cost_19 = cost_9;
        cost_19 += smartRubble(loc_19);
        int cost_64 = Integer.MAX_VALUE;
        if (cost_63 < cost_64) cost_64 = cost_63;
        if (cost_72 < cost_64) cost_64 = cost_72;
        if (cost_54 < cost_64) cost_64 = cost_54;
        cost_64 += smartRubble(loc_64);
        int cost_10 = Integer.MAX_VALUE;
        if (cost_9 < cost_10) cost_10 = cost_9;
        if (cost_18 < cost_10) cost_10 = cost_18;
        if (cost_0 < cost_10) cost_10 = cost_0;
        cost_10 += smartRubble(loc_10);
// layer 3
        int cost_38 = Integer.MAX_VALUE;
        if (cost_37 < cost_38) cost_38 = cost_37;
        if (cost_46 < cost_38) cost_38 = cost_46;
        if (cost_28 < cost_38) cost_38 = cost_28;
        cost_38 += smartRubble(loc_38);
        int cost_47 = Integer.MAX_VALUE;
        if (cost_46 < cost_47) cost_47 = cost_46;
        if (cost_55 < cost_47) cost_47 = cost_55;
        if (cost_37 < cost_47) cost_47 = cost_37;
        cost_47 += smartRubble(loc_47);
        int cost_29 = Integer.MAX_VALUE;
        if (cost_28 < cost_29) cost_29 = cost_28;
        if (cost_37 < cost_29) cost_29 = cost_37;
        if (cost_19 < cost_29) cost_29 = cost_19;
        cost_29 += smartRubble(loc_29);
        int cost_56 = Integer.MAX_VALUE;
        if (cost_55 < cost_56) cost_56 = cost_55;
        if (cost_64 < cost_56) cost_56 = cost_64;
        if (cost_46 < cost_56) cost_56 = cost_46;
        cost_56 += smartRubble(loc_56);
        int cost_20 = Integer.MAX_VALUE;
        if (cost_19 < cost_20) cost_20 = cost_19;
        if (cost_28 < cost_20) cost_20 = cost_28;
        if (cost_10 < cost_20) cost_20 = cost_10;
        cost_20 += smartRubble(loc_20);
// layer 2
        int cost_39 = Integer.MAX_VALUE;
        if (cost_38 < cost_39) cost_39 = cost_38;
        if (cost_47 < cost_39) cost_39 = cost_47;
        if (cost_29 < cost_39) cost_39 = cost_29;
        cost_39 += smartRubble(loc_39);
        int cost_48 = Integer.MAX_VALUE;
        if (cost_47 < cost_48) cost_48 = cost_47;
        if (cost_56 < cost_48) cost_48 = cost_56;
        if (cost_38 < cost_48) cost_48 = cost_38;
        cost_48 += smartRubble(loc_48);
        int cost_30 = Integer.MAX_VALUE;
        if (cost_29 < cost_30) cost_30 = cost_29;
        if (cost_38 < cost_30) cost_30 = cost_38;
        if (cost_20 < cost_30) cost_30 = cost_20;
        cost_30 += smartRubble(loc_30);
        int cost_40 = cost_39;
        best_dir = Direction.WEST;
        if (cost_48 < cost_40) {
            cost_40 = cost_48;
            best_dir = Direction.SOUTHWEST;
        }
        if (cost_30 < cost_40) {
            cost_40 = cost_30;
            best_dir = Direction.NORTHWEST;
        }
        return best_dir;}private static Direction pathfind_NORTH(RobotController rc, MapLocation dest) throws GameActionException {
        MapLocation m_location = rc.getLocation();
        Direction best_dir = null;MapLocation loc_0 = m_location.translate(-4, 4);
        MapLocation loc_1 = m_location.translate(-3, 4);
        MapLocation loc_2 = m_location.translate(-2, 4);
        MapLocation loc_3 = m_location.translate(-1, 4);
        MapLocation loc_4 = m_location.translate(0, 4);
        MapLocation loc_5 = m_location.translate(1, 4);
        MapLocation loc_6 = m_location.translate(2, 4);
        MapLocation loc_7 = m_location.translate(3, 4);
        MapLocation loc_8 = m_location.translate(4, 4);
        MapLocation loc_9 = m_location.translate(-4, 3);
        MapLocation loc_10 = m_location.translate(-3, 3);
        MapLocation loc_11 = m_location.translate(-2, 3);
        MapLocation loc_12 = m_location.translate(-1, 3);
        MapLocation loc_13 = m_location.translate(0, 3);
        MapLocation loc_14 = m_location.translate(1, 3);
        MapLocation loc_15 = m_location.translate(2, 3);
        MapLocation loc_16 = m_location.translate(3, 3);
        MapLocation loc_17 = m_location.translate(4, 3);
        MapLocation loc_18 = m_location.translate(-4, 2);
        MapLocation loc_19 = m_location.translate(-3, 2);
        MapLocation loc_20 = m_location.translate(-2, 2);
        MapLocation loc_21 = m_location.translate(-1, 2);
        MapLocation loc_22 = m_location.translate(0, 2);
        MapLocation loc_23 = m_location.translate(1, 2);
        MapLocation loc_24 = m_location.translate(2, 2);
        MapLocation loc_25 = m_location.translate(3, 2);
        MapLocation loc_26 = m_location.translate(4, 2);
        MapLocation loc_27 = m_location.translate(-4, 1);
        MapLocation loc_28 = m_location.translate(-3, 1);
        MapLocation loc_29 = m_location.translate(-2, 1);
        MapLocation loc_30 = m_location.translate(-1, 1);
        MapLocation loc_31 = m_location.translate(0, 1);
        MapLocation loc_32 = m_location.translate(1, 1);
        MapLocation loc_33 = m_location.translate(2, 1);
        MapLocation loc_34 = m_location.translate(3, 1);
        MapLocation loc_35 = m_location.translate(4, 1);
        MapLocation loc_36 = m_location.translate(-4, 0);
        MapLocation loc_37 = m_location.translate(-3, 0);
        MapLocation loc_38 = m_location.translate(-2, 0);
        MapLocation loc_39 = m_location.translate(-1, 0);
        MapLocation loc_40 = m_location.translate(0, 0);
        MapLocation loc_41 = m_location.translate(1, 0);
        MapLocation loc_42 = m_location.translate(2, 0);
        MapLocation loc_43 = m_location.translate(3, 0);
        MapLocation loc_44 = m_location.translate(4, 0);
        MapLocation loc_45 = m_location.translate(-4, -1);
        MapLocation loc_46 = m_location.translate(-3, -1);
        MapLocation loc_47 = m_location.translate(-2, -1);
        MapLocation loc_48 = m_location.translate(-1, -1);
        MapLocation loc_49 = m_location.translate(0, -1);
        MapLocation loc_50 = m_location.translate(1, -1);
        MapLocation loc_51 = m_location.translate(2, -1);
        MapLocation loc_52 = m_location.translate(3, -1);
        MapLocation loc_53 = m_location.translate(4, -1);
        MapLocation loc_54 = m_location.translate(-4, -2);
        MapLocation loc_55 = m_location.translate(-3, -2);
        MapLocation loc_56 = m_location.translate(-2, -2);
        MapLocation loc_57 = m_location.translate(-1, -2);
        MapLocation loc_58 = m_location.translate(0, -2);
        MapLocation loc_59 = m_location.translate(1, -2);
        MapLocation loc_60 = m_location.translate(2, -2);
        MapLocation loc_61 = m_location.translate(3, -2);
        MapLocation loc_62 = m_location.translate(4, -2);
        MapLocation loc_63 = m_location.translate(-4, -3);
        MapLocation loc_64 = m_location.translate(-3, -3);
        MapLocation loc_65 = m_location.translate(-2, -3);
        MapLocation loc_66 = m_location.translate(-1, -3);
        MapLocation loc_67 = m_location.translate(0, -3);
        MapLocation loc_68 = m_location.translate(1, -3);
        MapLocation loc_69 = m_location.translate(2, -3);
        MapLocation loc_70 = m_location.translate(3, -3);
        MapLocation loc_71 = m_location.translate(4, -3);
        MapLocation loc_72 = m_location.translate(-4, -4);
        MapLocation loc_73 = m_location.translate(-3, -4);
        MapLocation loc_74 = m_location.translate(-2, -4);
        MapLocation loc_75 = m_location.translate(-1, -4);
        MapLocation loc_76 = m_location.translate(0, -4);
        MapLocation loc_77 = m_location.translate(1, -4);
        MapLocation loc_78 = m_location.translate(2, -4);
        MapLocation loc_79 = m_location.translate(3, -4);
        MapLocation loc_80 = m_location.translate(4, -4);
// layer 5
        int cost_4 = smartRubble(loc_4) + loc_4.distanceSquaredTo(dest);
        int cost_3 = smartRubble(loc_3) + loc_3.distanceSquaredTo(dest);
        int cost_5 = smartRubble(loc_5) + loc_5.distanceSquaredTo(dest);
        int cost_2 = smartRubble(loc_2) + loc_2.distanceSquaredTo(dest);
        int cost_6 = smartRubble(loc_6) + loc_6.distanceSquaredTo(dest);
        int cost_1 = smartRubble(loc_1) + loc_1.distanceSquaredTo(dest);
        int cost_7 = smartRubble(loc_7) + loc_7.distanceSquaredTo(dest);
        int cost_0 = smartRubble(loc_0) + loc_0.distanceSquaredTo(dest);
        int cost_8 = smartRubble(loc_8) + loc_8.distanceSquaredTo(dest);
// layer 4
        int cost_13 = Integer.MAX_VALUE;
        if (cost_4 < cost_13) cost_13 = cost_4;
        if (cost_3 < cost_13) cost_13 = cost_3;
        if (cost_5 < cost_13) cost_13 = cost_5;
        cost_13 += smartRubble(loc_13);
        int cost_12 = Integer.MAX_VALUE;
        if (cost_3 < cost_12) cost_12 = cost_3;
        if (cost_2 < cost_12) cost_12 = cost_2;
        if (cost_4 < cost_12) cost_12 = cost_4;
        cost_12 += smartRubble(loc_12);
        int cost_14 = Integer.MAX_VALUE;
        if (cost_5 < cost_14) cost_14 = cost_5;
        if (cost_4 < cost_14) cost_14 = cost_4;
        if (cost_6 < cost_14) cost_14 = cost_6;
        cost_14 += smartRubble(loc_14);
        int cost_11 = Integer.MAX_VALUE;
        if (cost_2 < cost_11) cost_11 = cost_2;
        if (cost_1 < cost_11) cost_11 = cost_1;
        if (cost_3 < cost_11) cost_11 = cost_3;
        cost_11 += smartRubble(loc_11);
        int cost_15 = Integer.MAX_VALUE;
        if (cost_6 < cost_15) cost_15 = cost_6;
        if (cost_5 < cost_15) cost_15 = cost_5;
        if (cost_7 < cost_15) cost_15 = cost_7;
        cost_15 += smartRubble(loc_15);
        int cost_10 = Integer.MAX_VALUE;
        if (cost_1 < cost_10) cost_10 = cost_1;
        if (cost_0 < cost_10) cost_10 = cost_0;
        if (cost_2 < cost_10) cost_10 = cost_2;
        cost_10 += smartRubble(loc_10);
        int cost_16 = Integer.MAX_VALUE;
        if (cost_7 < cost_16) cost_16 = cost_7;
        if (cost_6 < cost_16) cost_16 = cost_6;
        if (cost_8 < cost_16) cost_16 = cost_8;
        cost_16 += smartRubble(loc_16);
// layer 3
        int cost_22 = Integer.MAX_VALUE;
        if (cost_13 < cost_22) cost_22 = cost_13;
        if (cost_12 < cost_22) cost_22 = cost_12;
        if (cost_14 < cost_22) cost_22 = cost_14;
        cost_22 += smartRubble(loc_22);
        int cost_21 = Integer.MAX_VALUE;
        if (cost_12 < cost_21) cost_21 = cost_12;
        if (cost_11 < cost_21) cost_21 = cost_11;
        if (cost_13 < cost_21) cost_21 = cost_13;
        cost_21 += smartRubble(loc_21);
        int cost_23 = Integer.MAX_VALUE;
        if (cost_14 < cost_23) cost_23 = cost_14;
        if (cost_13 < cost_23) cost_23 = cost_13;
        if (cost_15 < cost_23) cost_23 = cost_15;
        cost_23 += smartRubble(loc_23);
        int cost_20 = Integer.MAX_VALUE;
        if (cost_11 < cost_20) cost_20 = cost_11;
        if (cost_10 < cost_20) cost_20 = cost_10;
        if (cost_12 < cost_20) cost_20 = cost_12;
        cost_20 += smartRubble(loc_20);
        int cost_24 = Integer.MAX_VALUE;
        if (cost_15 < cost_24) cost_24 = cost_15;
        if (cost_14 < cost_24) cost_24 = cost_14;
        if (cost_16 < cost_24) cost_24 = cost_16;
        cost_24 += smartRubble(loc_24);
// layer 2
        int cost_31 = Integer.MAX_VALUE;
        if (cost_22 < cost_31) cost_31 = cost_22;
        if (cost_21 < cost_31) cost_31 = cost_21;
        if (cost_23 < cost_31) cost_31 = cost_23;
        cost_31 += smartRubble(loc_31);
        int cost_30 = Integer.MAX_VALUE;
        if (cost_21 < cost_30) cost_30 = cost_21;
        if (cost_20 < cost_30) cost_30 = cost_20;
        if (cost_22 < cost_30) cost_30 = cost_22;
        cost_30 += smartRubble(loc_30);
        int cost_32 = Integer.MAX_VALUE;
        if (cost_23 < cost_32) cost_32 = cost_23;
        if (cost_22 < cost_32) cost_32 = cost_22;
        if (cost_24 < cost_32) cost_32 = cost_24;
        cost_32 += smartRubble(loc_32);
        int cost_40 = cost_31;
        best_dir = Direction.NORTH;
        if (cost_30 < cost_40) {
            cost_40 = cost_30;
            best_dir = Direction.NORTHWEST;
        }
        if (cost_32 < cost_40) {
            cost_40 = cost_32;
            best_dir = Direction.NORTHEAST;
        }
        return best_dir;}private static Direction pathfind_SOUTH(RobotController rc, MapLocation dest) throws GameActionException {
        MapLocation m_location = rc.getLocation();
        Direction best_dir = null;MapLocation loc_0 = m_location.translate(-4, 4);
        MapLocation loc_1 = m_location.translate(-3, 4);
        MapLocation loc_2 = m_location.translate(-2, 4);
        MapLocation loc_3 = m_location.translate(-1, 4);
        MapLocation loc_4 = m_location.translate(0, 4);
        MapLocation loc_5 = m_location.translate(1, 4);
        MapLocation loc_6 = m_location.translate(2, 4);
        MapLocation loc_7 = m_location.translate(3, 4);
        MapLocation loc_8 = m_location.translate(4, 4);
        MapLocation loc_9 = m_location.translate(-4, 3);
        MapLocation loc_10 = m_location.translate(-3, 3);
        MapLocation loc_11 = m_location.translate(-2, 3);
        MapLocation loc_12 = m_location.translate(-1, 3);
        MapLocation loc_13 = m_location.translate(0, 3);
        MapLocation loc_14 = m_location.translate(1, 3);
        MapLocation loc_15 = m_location.translate(2, 3);
        MapLocation loc_16 = m_location.translate(3, 3);
        MapLocation loc_17 = m_location.translate(4, 3);
        MapLocation loc_18 = m_location.translate(-4, 2);
        MapLocation loc_19 = m_location.translate(-3, 2);
        MapLocation loc_20 = m_location.translate(-2, 2);
        MapLocation loc_21 = m_location.translate(-1, 2);
        MapLocation loc_22 = m_location.translate(0, 2);
        MapLocation loc_23 = m_location.translate(1, 2);
        MapLocation loc_24 = m_location.translate(2, 2);
        MapLocation loc_25 = m_location.translate(3, 2);
        MapLocation loc_26 = m_location.translate(4, 2);
        MapLocation loc_27 = m_location.translate(-4, 1);
        MapLocation loc_28 = m_location.translate(-3, 1);
        MapLocation loc_29 = m_location.translate(-2, 1);
        MapLocation loc_30 = m_location.translate(-1, 1);
        MapLocation loc_31 = m_location.translate(0, 1);
        MapLocation loc_32 = m_location.translate(1, 1);
        MapLocation loc_33 = m_location.translate(2, 1);
        MapLocation loc_34 = m_location.translate(3, 1);
        MapLocation loc_35 = m_location.translate(4, 1);
        MapLocation loc_36 = m_location.translate(-4, 0);
        MapLocation loc_37 = m_location.translate(-3, 0);
        MapLocation loc_38 = m_location.translate(-2, 0);
        MapLocation loc_39 = m_location.translate(-1, 0);
        MapLocation loc_40 = m_location.translate(0, 0);
        MapLocation loc_41 = m_location.translate(1, 0);
        MapLocation loc_42 = m_location.translate(2, 0);
        MapLocation loc_43 = m_location.translate(3, 0);
        MapLocation loc_44 = m_location.translate(4, 0);
        MapLocation loc_45 = m_location.translate(-4, -1);
        MapLocation loc_46 = m_location.translate(-3, -1);
        MapLocation loc_47 = m_location.translate(-2, -1);
        MapLocation loc_48 = m_location.translate(-1, -1);
        MapLocation loc_49 = m_location.translate(0, -1);
        MapLocation loc_50 = m_location.translate(1, -1);
        MapLocation loc_51 = m_location.translate(2, -1);
        MapLocation loc_52 = m_location.translate(3, -1);
        MapLocation loc_53 = m_location.translate(4, -1);
        MapLocation loc_54 = m_location.translate(-4, -2);
        MapLocation loc_55 = m_location.translate(-3, -2);
        MapLocation loc_56 = m_location.translate(-2, -2);
        MapLocation loc_57 = m_location.translate(-1, -2);
        MapLocation loc_58 = m_location.translate(0, -2);
        MapLocation loc_59 = m_location.translate(1, -2);
        MapLocation loc_60 = m_location.translate(2, -2);
        MapLocation loc_61 = m_location.translate(3, -2);
        MapLocation loc_62 = m_location.translate(4, -2);
        MapLocation loc_63 = m_location.translate(-4, -3);
        MapLocation loc_64 = m_location.translate(-3, -3);
        MapLocation loc_65 = m_location.translate(-2, -3);
        MapLocation loc_66 = m_location.translate(-1, -3);
        MapLocation loc_67 = m_location.translate(0, -3);
        MapLocation loc_68 = m_location.translate(1, -3);
        MapLocation loc_69 = m_location.translate(2, -3);
        MapLocation loc_70 = m_location.translate(3, -3);
        MapLocation loc_71 = m_location.translate(4, -3);
        MapLocation loc_72 = m_location.translate(-4, -4);
        MapLocation loc_73 = m_location.translate(-3, -4);
        MapLocation loc_74 = m_location.translate(-2, -4);
        MapLocation loc_75 = m_location.translate(-1, -4);
        MapLocation loc_76 = m_location.translate(0, -4);
        MapLocation loc_77 = m_location.translate(1, -4);
        MapLocation loc_78 = m_location.translate(2, -4);
        MapLocation loc_79 = m_location.translate(3, -4);
        MapLocation loc_80 = m_location.translate(4, -4);
// layer 5
        int cost_76 = smartRubble(loc_76) + loc_76.distanceSquaredTo(dest);
        int cost_77 = smartRubble(loc_77) + loc_77.distanceSquaredTo(dest);
        int cost_75 = smartRubble(loc_75) + loc_75.distanceSquaredTo(dest);
        int cost_78 = smartRubble(loc_78) + loc_78.distanceSquaredTo(dest);
        int cost_74 = smartRubble(loc_74) + loc_74.distanceSquaredTo(dest);
        int cost_79 = smartRubble(loc_79) + loc_79.distanceSquaredTo(dest);
        int cost_73 = smartRubble(loc_73) + loc_73.distanceSquaredTo(dest);
        int cost_80 = smartRubble(loc_80) + loc_80.distanceSquaredTo(dest);
        int cost_72 = smartRubble(loc_72) + loc_72.distanceSquaredTo(dest);
// layer 4
        int cost_67 = Integer.MAX_VALUE;
        if (cost_76 < cost_67) cost_67 = cost_76;
        if (cost_77 < cost_67) cost_67 = cost_77;
        if (cost_75 < cost_67) cost_67 = cost_75;
        cost_67 += smartRubble(loc_67);
        int cost_68 = Integer.MAX_VALUE;
        if (cost_77 < cost_68) cost_68 = cost_77;
        if (cost_78 < cost_68) cost_68 = cost_78;
        if (cost_76 < cost_68) cost_68 = cost_76;
        cost_68 += smartRubble(loc_68);
        int cost_66 = Integer.MAX_VALUE;
        if (cost_75 < cost_66) cost_66 = cost_75;
        if (cost_76 < cost_66) cost_66 = cost_76;
        if (cost_74 < cost_66) cost_66 = cost_74;
        cost_66 += smartRubble(loc_66);
        int cost_69 = Integer.MAX_VALUE;
        if (cost_78 < cost_69) cost_69 = cost_78;
        if (cost_79 < cost_69) cost_69 = cost_79;
        if (cost_77 < cost_69) cost_69 = cost_77;
        cost_69 += smartRubble(loc_69);
        int cost_65 = Integer.MAX_VALUE;
        if (cost_74 < cost_65) cost_65 = cost_74;
        if (cost_75 < cost_65) cost_65 = cost_75;
        if (cost_73 < cost_65) cost_65 = cost_73;
        cost_65 += smartRubble(loc_65);
        int cost_70 = Integer.MAX_VALUE;
        if (cost_79 < cost_70) cost_70 = cost_79;
        if (cost_80 < cost_70) cost_70 = cost_80;
        if (cost_78 < cost_70) cost_70 = cost_78;
        cost_70 += smartRubble(loc_70);
        int cost_64 = Integer.MAX_VALUE;
        if (cost_73 < cost_64) cost_64 = cost_73;
        if (cost_74 < cost_64) cost_64 = cost_74;
        if (cost_72 < cost_64) cost_64 = cost_72;
        cost_64 += smartRubble(loc_64);
// layer 3
        int cost_58 = Integer.MAX_VALUE;
        if (cost_67 < cost_58) cost_58 = cost_67;
        if (cost_68 < cost_58) cost_58 = cost_68;
        if (cost_66 < cost_58) cost_58 = cost_66;
        cost_58 += smartRubble(loc_58);
        int cost_59 = Integer.MAX_VALUE;
        if (cost_68 < cost_59) cost_59 = cost_68;
        if (cost_69 < cost_59) cost_59 = cost_69;
        if (cost_67 < cost_59) cost_59 = cost_67;
        cost_59 += smartRubble(loc_59);
        int cost_57 = Integer.MAX_VALUE;
        if (cost_66 < cost_57) cost_57 = cost_66;
        if (cost_67 < cost_57) cost_57 = cost_67;
        if (cost_65 < cost_57) cost_57 = cost_65;
        cost_57 += smartRubble(loc_57);
        int cost_60 = Integer.MAX_VALUE;
        if (cost_69 < cost_60) cost_60 = cost_69;
        if (cost_70 < cost_60) cost_60 = cost_70;
        if (cost_68 < cost_60) cost_60 = cost_68;
        cost_60 += smartRubble(loc_60);
        int cost_56 = Integer.MAX_VALUE;
        if (cost_65 < cost_56) cost_56 = cost_65;
        if (cost_66 < cost_56) cost_56 = cost_66;
        if (cost_64 < cost_56) cost_56 = cost_64;
        cost_56 += smartRubble(loc_56);
// layer 2
        int cost_49 = Integer.MAX_VALUE;
        if (cost_58 < cost_49) cost_49 = cost_58;
        if (cost_59 < cost_49) cost_49 = cost_59;
        if (cost_57 < cost_49) cost_49 = cost_57;
        cost_49 += smartRubble(loc_49);
        int cost_50 = Integer.MAX_VALUE;
        if (cost_59 < cost_50) cost_50 = cost_59;
        if (cost_60 < cost_50) cost_50 = cost_60;
        if (cost_58 < cost_50) cost_50 = cost_58;
        cost_50 += smartRubble(loc_50);
        int cost_48 = Integer.MAX_VALUE;
        if (cost_57 < cost_48) cost_48 = cost_57;
        if (cost_58 < cost_48) cost_48 = cost_58;
        if (cost_56 < cost_48) cost_48 = cost_56;
        cost_48 += smartRubble(loc_48);
        int cost_40 = cost_49;
        best_dir = Direction.SOUTH;
        if (cost_50 < cost_40) {
            cost_40 = cost_50;
            best_dir = Direction.SOUTHEAST;
        }
        if (cost_48 < cost_40) {
            cost_40 = cost_48;
            best_dir = Direction.SOUTHWEST;
        }
        return best_dir;}private static Direction pathfind_NORTHEAST(RobotController rc, MapLocation dest) throws GameActionException {
        MapLocation m_location = rc.getLocation();
        Direction best_dir = null;MapLocation loc_0 = m_location.translate(-4, 4);
        MapLocation loc_1 = m_location.translate(-3, 4);
        MapLocation loc_2 = m_location.translate(-2, 4);
        MapLocation loc_3 = m_location.translate(-1, 4);
        MapLocation loc_4 = m_location.translate(0, 4);
        MapLocation loc_5 = m_location.translate(1, 4);
        MapLocation loc_6 = m_location.translate(2, 4);
        MapLocation loc_7 = m_location.translate(3, 4);
        MapLocation loc_8 = m_location.translate(4, 4);
        MapLocation loc_9 = m_location.translate(-4, 3);
        MapLocation loc_10 = m_location.translate(-3, 3);
        MapLocation loc_11 = m_location.translate(-2, 3);
        MapLocation loc_12 = m_location.translate(-1, 3);
        MapLocation loc_13 = m_location.translate(0, 3);
        MapLocation loc_14 = m_location.translate(1, 3);
        MapLocation loc_15 = m_location.translate(2, 3);
        MapLocation loc_16 = m_location.translate(3, 3);
        MapLocation loc_17 = m_location.translate(4, 3);
        MapLocation loc_18 = m_location.translate(-4, 2);
        MapLocation loc_19 = m_location.translate(-3, 2);
        MapLocation loc_20 = m_location.translate(-2, 2);
        MapLocation loc_21 = m_location.translate(-1, 2);
        MapLocation loc_22 = m_location.translate(0, 2);
        MapLocation loc_23 = m_location.translate(1, 2);
        MapLocation loc_24 = m_location.translate(2, 2);
        MapLocation loc_25 = m_location.translate(3, 2);
        MapLocation loc_26 = m_location.translate(4, 2);
        MapLocation loc_27 = m_location.translate(-4, 1);
        MapLocation loc_28 = m_location.translate(-3, 1);
        MapLocation loc_29 = m_location.translate(-2, 1);
        MapLocation loc_30 = m_location.translate(-1, 1);
        MapLocation loc_31 = m_location.translate(0, 1);
        MapLocation loc_32 = m_location.translate(1, 1);
        MapLocation loc_33 = m_location.translate(2, 1);
        MapLocation loc_34 = m_location.translate(3, 1);
        MapLocation loc_35 = m_location.translate(4, 1);
        MapLocation loc_36 = m_location.translate(-4, 0);
        MapLocation loc_37 = m_location.translate(-3, 0);
        MapLocation loc_38 = m_location.translate(-2, 0);
        MapLocation loc_39 = m_location.translate(-1, 0);
        MapLocation loc_40 = m_location.translate(0, 0);
        MapLocation loc_41 = m_location.translate(1, 0);
        MapLocation loc_42 = m_location.translate(2, 0);
        MapLocation loc_43 = m_location.translate(3, 0);
        MapLocation loc_44 = m_location.translate(4, 0);
        MapLocation loc_45 = m_location.translate(-4, -1);
        MapLocation loc_46 = m_location.translate(-3, -1);
        MapLocation loc_47 = m_location.translate(-2, -1);
        MapLocation loc_48 = m_location.translate(-1, -1);
        MapLocation loc_49 = m_location.translate(0, -1);
        MapLocation loc_50 = m_location.translate(1, -1);
        MapLocation loc_51 = m_location.translate(2, -1);
        MapLocation loc_52 = m_location.translate(3, -1);
        MapLocation loc_53 = m_location.translate(4, -1);
        MapLocation loc_54 = m_location.translate(-4, -2);
        MapLocation loc_55 = m_location.translate(-3, -2);
        MapLocation loc_56 = m_location.translate(-2, -2);
        MapLocation loc_57 = m_location.translate(-1, -2);
        MapLocation loc_58 = m_location.translate(0, -2);
        MapLocation loc_59 = m_location.translate(1, -2);
        MapLocation loc_60 = m_location.translate(2, -2);
        MapLocation loc_61 = m_location.translate(3, -2);
        MapLocation loc_62 = m_location.translate(4, -2);
        MapLocation loc_63 = m_location.translate(-4, -3);
        MapLocation loc_64 = m_location.translate(-3, -3);
        MapLocation loc_65 = m_location.translate(-2, -3);
        MapLocation loc_66 = m_location.translate(-1, -3);
        MapLocation loc_67 = m_location.translate(0, -3);
        MapLocation loc_68 = m_location.translate(1, -3);
        MapLocation loc_69 = m_location.translate(2, -3);
        MapLocation loc_70 = m_location.translate(3, -3);
        MapLocation loc_71 = m_location.translate(4, -3);
        MapLocation loc_72 = m_location.translate(-4, -4);
        MapLocation loc_73 = m_location.translate(-3, -4);
        MapLocation loc_74 = m_location.translate(-2, -4);
        MapLocation loc_75 = m_location.translate(-1, -4);
        MapLocation loc_76 = m_location.translate(0, -4);
        MapLocation loc_77 = m_location.translate(1, -4);
        MapLocation loc_78 = m_location.translate(2, -4);
        MapLocation loc_79 = m_location.translate(3, -4);
        MapLocation loc_80 = m_location.translate(4, -4);
// layer 8
        int cost_8 = smartRubble(loc_8) + loc_8.distanceSquaredTo(dest);
        int cost_7 = smartRubble(loc_7) + loc_7.distanceSquaredTo(dest);
        int cost_17 = smartRubble(loc_17) + loc_17.distanceSquaredTo(dest);
// layer 7
        int cost_6 = smartRubble(loc_6) + loc_6.distanceSquaredTo(dest);
        int cost_16 = Integer.MAX_VALUE;
        if (cost_8 < cost_16) cost_16 = cost_8;
        if (cost_7 < cost_16) cost_16 = cost_7;
        if (cost_17 < cost_16) cost_16 = cost_17;
        cost_16 += smartRubble(loc_16);
        int cost_26 = smartRubble(loc_26) + loc_26.distanceSquaredTo(dest);
// layer 6
        int cost_5 = smartRubble(loc_5) + loc_5.distanceSquaredTo(dest);
        int cost_15 = Integer.MAX_VALUE;
        if (cost_7 < cost_15) cost_15 = cost_7;
        if (cost_6 < cost_15) cost_15 = cost_6;
        if (cost_16 < cost_15) cost_15 = cost_16;
        cost_15 += smartRubble(loc_15);
        int cost_25 = Integer.MAX_VALUE;
        if (cost_17 < cost_25) cost_25 = cost_17;
        if (cost_16 < cost_25) cost_25 = cost_16;
        if (cost_26 < cost_25) cost_25 = cost_26;
        cost_25 += smartRubble(loc_25);
        int cost_35 = smartRubble(loc_35) + loc_35.distanceSquaredTo(dest);
// layer 5
        int cost_4 = smartRubble(loc_4) + loc_4.distanceSquaredTo(dest);
        int cost_14 = Integer.MAX_VALUE;
        if (cost_6 < cost_14) cost_14 = cost_6;
        if (cost_5 < cost_14) cost_14 = cost_5;
        if (cost_15 < cost_14) cost_14 = cost_15;
        cost_14 += smartRubble(loc_14);
        int cost_24 = Integer.MAX_VALUE;
        if (cost_16 < cost_24) cost_24 = cost_16;
        if (cost_15 < cost_24) cost_24 = cost_15;
        if (cost_25 < cost_24) cost_24 = cost_25;
        cost_24 += smartRubble(loc_24);
        int cost_34 = Integer.MAX_VALUE;
        if (cost_26 < cost_34) cost_34 = cost_26;
        if (cost_25 < cost_34) cost_34 = cost_25;
        if (cost_35 < cost_34) cost_34 = cost_35;
        cost_34 += smartRubble(loc_34);
        int cost_44 = smartRubble(loc_44) + loc_44.distanceSquaredTo(dest);
// layer 4
        int cost_13 = Integer.MAX_VALUE;
        if (cost_5 < cost_13) cost_13 = cost_5;
        if (cost_4 < cost_13) cost_13 = cost_4;
        if (cost_14 < cost_13) cost_13 = cost_14;
        cost_13 += smartRubble(loc_13);
        int cost_23 = Integer.MAX_VALUE;
        if (cost_15 < cost_23) cost_23 = cost_15;
        if (cost_14 < cost_23) cost_23 = cost_14;
        if (cost_24 < cost_23) cost_23 = cost_24;
        cost_23 += smartRubble(loc_23);
        int cost_33 = Integer.MAX_VALUE;
        if (cost_25 < cost_33) cost_33 = cost_25;
        if (cost_24 < cost_33) cost_33 = cost_24;
        if (cost_34 < cost_33) cost_33 = cost_34;
        cost_33 += smartRubble(loc_33);
        int cost_43 = Integer.MAX_VALUE;
        if (cost_35 < cost_43) cost_43 = cost_35;
        if (cost_34 < cost_43) cost_43 = cost_34;
        if (cost_44 < cost_43) cost_43 = cost_44;
        cost_43 += smartRubble(loc_43);
// layer 3
        int cost_22 = Integer.MAX_VALUE;
        if (cost_14 < cost_22) cost_22 = cost_14;
        if (cost_13 < cost_22) cost_22 = cost_13;
        if (cost_23 < cost_22) cost_22 = cost_23;
        cost_22 += smartRubble(loc_22);
        int cost_32 = Integer.MAX_VALUE;
        if (cost_24 < cost_32) cost_32 = cost_24;
        if (cost_23 < cost_32) cost_32 = cost_23;
        if (cost_33 < cost_32) cost_32 = cost_33;
        cost_32 += smartRubble(loc_32);
        int cost_42 = Integer.MAX_VALUE;
        if (cost_34 < cost_42) cost_42 = cost_34;
        if (cost_33 < cost_42) cost_42 = cost_33;
        if (cost_43 < cost_42) cost_42 = cost_43;
        cost_42 += smartRubble(loc_42);
// layer 2
        int cost_31 = Integer.MAX_VALUE;
        if (cost_23 < cost_31) cost_31 = cost_23;
        if (cost_22 < cost_31) cost_31 = cost_22;
        if (cost_32 < cost_31) cost_31 = cost_32;
        cost_31 += smartRubble(loc_31);
        int cost_41 = Integer.MAX_VALUE;
        if (cost_33 < cost_41) cost_41 = cost_33;
        if (cost_32 < cost_41) cost_41 = cost_32;
        if (cost_42 < cost_41) cost_41 = cost_42;
        cost_41 += smartRubble(loc_41);
        int cost_40 = cost_32;
        best_dir = Direction.NORTHEAST;
        if (cost_31 < cost_40) {
            cost_40 = cost_31;
            best_dir = Direction.NORTH;
        }
        if (cost_41 < cost_40) {
            cost_40 = cost_41;
            best_dir = Direction.EAST;
        }
        return best_dir;}private static Direction pathfind_NORTHWEST(RobotController rc, MapLocation dest) throws GameActionException {
        MapLocation m_location = rc.getLocation();
        Direction best_dir = null;MapLocation loc_0 = m_location.translate(-4, 4);
        MapLocation loc_1 = m_location.translate(-3, 4);
        MapLocation loc_2 = m_location.translate(-2, 4);
        MapLocation loc_3 = m_location.translate(-1, 4);
        MapLocation loc_4 = m_location.translate(0, 4);
        MapLocation loc_5 = m_location.translate(1, 4);
        MapLocation loc_6 = m_location.translate(2, 4);
        MapLocation loc_7 = m_location.translate(3, 4);
        MapLocation loc_8 = m_location.translate(4, 4);
        MapLocation loc_9 = m_location.translate(-4, 3);
        MapLocation loc_10 = m_location.translate(-3, 3);
        MapLocation loc_11 = m_location.translate(-2, 3);
        MapLocation loc_12 = m_location.translate(-1, 3);
        MapLocation loc_13 = m_location.translate(0, 3);
        MapLocation loc_14 = m_location.translate(1, 3);
        MapLocation loc_15 = m_location.translate(2, 3);
        MapLocation loc_16 = m_location.translate(3, 3);
        MapLocation loc_17 = m_location.translate(4, 3);
        MapLocation loc_18 = m_location.translate(-4, 2);
        MapLocation loc_19 = m_location.translate(-3, 2);
        MapLocation loc_20 = m_location.translate(-2, 2);
        MapLocation loc_21 = m_location.translate(-1, 2);
        MapLocation loc_22 = m_location.translate(0, 2);
        MapLocation loc_23 = m_location.translate(1, 2);
        MapLocation loc_24 = m_location.translate(2, 2);
        MapLocation loc_25 = m_location.translate(3, 2);
        MapLocation loc_26 = m_location.translate(4, 2);
        MapLocation loc_27 = m_location.translate(-4, 1);
        MapLocation loc_28 = m_location.translate(-3, 1);
        MapLocation loc_29 = m_location.translate(-2, 1);
        MapLocation loc_30 = m_location.translate(-1, 1);
        MapLocation loc_31 = m_location.translate(0, 1);
        MapLocation loc_32 = m_location.translate(1, 1);
        MapLocation loc_33 = m_location.translate(2, 1);
        MapLocation loc_34 = m_location.translate(3, 1);
        MapLocation loc_35 = m_location.translate(4, 1);
        MapLocation loc_36 = m_location.translate(-4, 0);
        MapLocation loc_37 = m_location.translate(-3, 0);
        MapLocation loc_38 = m_location.translate(-2, 0);
        MapLocation loc_39 = m_location.translate(-1, 0);
        MapLocation loc_40 = m_location.translate(0, 0);
        MapLocation loc_41 = m_location.translate(1, 0);
        MapLocation loc_42 = m_location.translate(2, 0);
        MapLocation loc_43 = m_location.translate(3, 0);
        MapLocation loc_44 = m_location.translate(4, 0);
        MapLocation loc_45 = m_location.translate(-4, -1);
        MapLocation loc_46 = m_location.translate(-3, -1);
        MapLocation loc_47 = m_location.translate(-2, -1);
        MapLocation loc_48 = m_location.translate(-1, -1);
        MapLocation loc_49 = m_location.translate(0, -1);
        MapLocation loc_50 = m_location.translate(1, -1);
        MapLocation loc_51 = m_location.translate(2, -1);
        MapLocation loc_52 = m_location.translate(3, -1);
        MapLocation loc_53 = m_location.translate(4, -1);
        MapLocation loc_54 = m_location.translate(-4, -2);
        MapLocation loc_55 = m_location.translate(-3, -2);
        MapLocation loc_56 = m_location.translate(-2, -2);
        MapLocation loc_57 = m_location.translate(-1, -2);
        MapLocation loc_58 = m_location.translate(0, -2);
        MapLocation loc_59 = m_location.translate(1, -2);
        MapLocation loc_60 = m_location.translate(2, -2);
        MapLocation loc_61 = m_location.translate(3, -2);
        MapLocation loc_62 = m_location.translate(4, -2);
        MapLocation loc_63 = m_location.translate(-4, -3);
        MapLocation loc_64 = m_location.translate(-3, -3);
        MapLocation loc_65 = m_location.translate(-2, -3);
        MapLocation loc_66 = m_location.translate(-1, -3);
        MapLocation loc_67 = m_location.translate(0, -3);
        MapLocation loc_68 = m_location.translate(1, -3);
        MapLocation loc_69 = m_location.translate(2, -3);
        MapLocation loc_70 = m_location.translate(3, -3);
        MapLocation loc_71 = m_location.translate(4, -3);
        MapLocation loc_72 = m_location.translate(-4, -4);
        MapLocation loc_73 = m_location.translate(-3, -4);
        MapLocation loc_74 = m_location.translate(-2, -4);
        MapLocation loc_75 = m_location.translate(-1, -4);
        MapLocation loc_76 = m_location.translate(0, -4);
        MapLocation loc_77 = m_location.translate(1, -4);
        MapLocation loc_78 = m_location.translate(2, -4);
        MapLocation loc_79 = m_location.translate(3, -4);
        MapLocation loc_80 = m_location.translate(4, -4);
// layer 8
        int cost_0 = smartRubble(loc_0) + loc_0.distanceSquaredTo(dest);
        int cost_9 = smartRubble(loc_9) + loc_9.distanceSquaredTo(dest);
        int cost_1 = smartRubble(loc_1) + loc_1.distanceSquaredTo(dest);
// layer 7
        int cost_18 = smartRubble(loc_18) + loc_18.distanceSquaredTo(dest);
        int cost_10 = Integer.MAX_VALUE;
        if (cost_0 < cost_10) cost_10 = cost_0;
        if (cost_9 < cost_10) cost_10 = cost_9;
        if (cost_1 < cost_10) cost_10 = cost_1;
        cost_10 += smartRubble(loc_10);
        int cost_2 = smartRubble(loc_2) + loc_2.distanceSquaredTo(dest);
// layer 6
        int cost_27 = smartRubble(loc_27) + loc_27.distanceSquaredTo(dest);
        int cost_19 = Integer.MAX_VALUE;
        if (cost_9 < cost_19) cost_19 = cost_9;
        if (cost_18 < cost_19) cost_19 = cost_18;
        if (cost_10 < cost_19) cost_19 = cost_10;
        cost_19 += smartRubble(loc_19);
        int cost_11 = Integer.MAX_VALUE;
        if (cost_1 < cost_11) cost_11 = cost_1;
        if (cost_10 < cost_11) cost_11 = cost_10;
        if (cost_2 < cost_11) cost_11 = cost_2;
        cost_11 += smartRubble(loc_11);
        int cost_3 = smartRubble(loc_3) + loc_3.distanceSquaredTo(dest);
// layer 5
        int cost_36 = smartRubble(loc_36) + loc_36.distanceSquaredTo(dest);
        int cost_28 = Integer.MAX_VALUE;
        if (cost_18 < cost_28) cost_28 = cost_18;
        if (cost_27 < cost_28) cost_28 = cost_27;
        if (cost_19 < cost_28) cost_28 = cost_19;
        cost_28 += smartRubble(loc_28);
        int cost_20 = Integer.MAX_VALUE;
        if (cost_10 < cost_20) cost_20 = cost_10;
        if (cost_19 < cost_20) cost_20 = cost_19;
        if (cost_11 < cost_20) cost_20 = cost_11;
        cost_20 += smartRubble(loc_20);
        int cost_12 = Integer.MAX_VALUE;
        if (cost_2 < cost_12) cost_12 = cost_2;
        if (cost_11 < cost_12) cost_12 = cost_11;
        if (cost_3 < cost_12) cost_12 = cost_3;
        cost_12 += smartRubble(loc_12);
        int cost_4 = smartRubble(loc_4) + loc_4.distanceSquaredTo(dest);
// layer 4
        int cost_37 = Integer.MAX_VALUE;
        if (cost_27 < cost_37) cost_37 = cost_27;
        if (cost_36 < cost_37) cost_37 = cost_36;
        if (cost_28 < cost_37) cost_37 = cost_28;
        cost_37 += smartRubble(loc_37);
        int cost_29 = Integer.MAX_VALUE;
        if (cost_19 < cost_29) cost_29 = cost_19;
        if (cost_28 < cost_29) cost_29 = cost_28;
        if (cost_20 < cost_29) cost_29 = cost_20;
        cost_29 += smartRubble(loc_29);
        int cost_21 = Integer.MAX_VALUE;
        if (cost_11 < cost_21) cost_21 = cost_11;
        if (cost_20 < cost_21) cost_21 = cost_20;
        if (cost_12 < cost_21) cost_21 = cost_12;
        cost_21 += smartRubble(loc_21);
        int cost_13 = Integer.MAX_VALUE;
        if (cost_3 < cost_13) cost_13 = cost_3;
        if (cost_12 < cost_13) cost_13 = cost_12;
        if (cost_4 < cost_13) cost_13 = cost_4;
        cost_13 += smartRubble(loc_13);
// layer 3
        int cost_38 = Integer.MAX_VALUE;
        if (cost_28 < cost_38) cost_38 = cost_28;
        if (cost_37 < cost_38) cost_38 = cost_37;
        if (cost_29 < cost_38) cost_38 = cost_29;
        cost_38 += smartRubble(loc_38);
        int cost_30 = Integer.MAX_VALUE;
        if (cost_20 < cost_30) cost_30 = cost_20;
        if (cost_29 < cost_30) cost_30 = cost_29;
        if (cost_21 < cost_30) cost_30 = cost_21;
        cost_30 += smartRubble(loc_30);
        int cost_22 = Integer.MAX_VALUE;
        if (cost_12 < cost_22) cost_22 = cost_12;
        if (cost_21 < cost_22) cost_22 = cost_21;
        if (cost_13 < cost_22) cost_22 = cost_13;
        cost_22 += smartRubble(loc_22);
// layer 2
        int cost_39 = Integer.MAX_VALUE;
        if (cost_29 < cost_39) cost_39 = cost_29;
        if (cost_38 < cost_39) cost_39 = cost_38;
        if (cost_30 < cost_39) cost_39 = cost_30;
        cost_39 += smartRubble(loc_39);
        int cost_31 = Integer.MAX_VALUE;
        if (cost_21 < cost_31) cost_31 = cost_21;
        if (cost_30 < cost_31) cost_31 = cost_30;
        if (cost_22 < cost_31) cost_31 = cost_22;
        cost_31 += smartRubble(loc_31);
        int cost_40 = cost_30;
        best_dir = Direction.NORTHWEST;
        if (cost_39 < cost_40) {
            cost_40 = cost_39;
            best_dir = Direction.WEST;
        }
        if (cost_31 < cost_40) {
            cost_40 = cost_31;
            best_dir = Direction.NORTH;
        }
        return best_dir;}private static Direction pathfind_SOUTHEAST(RobotController rc, MapLocation dest) throws GameActionException {
        MapLocation m_location = rc.getLocation();
        Direction best_dir = null;MapLocation loc_0 = m_location.translate(-4, 4);
        MapLocation loc_1 = m_location.translate(-3, 4);
        MapLocation loc_2 = m_location.translate(-2, 4);
        MapLocation loc_3 = m_location.translate(-1, 4);
        MapLocation loc_4 = m_location.translate(0, 4);
        MapLocation loc_5 = m_location.translate(1, 4);
        MapLocation loc_6 = m_location.translate(2, 4);
        MapLocation loc_7 = m_location.translate(3, 4);
        MapLocation loc_8 = m_location.translate(4, 4);
        MapLocation loc_9 = m_location.translate(-4, 3);
        MapLocation loc_10 = m_location.translate(-3, 3);
        MapLocation loc_11 = m_location.translate(-2, 3);
        MapLocation loc_12 = m_location.translate(-1, 3);
        MapLocation loc_13 = m_location.translate(0, 3);
        MapLocation loc_14 = m_location.translate(1, 3);
        MapLocation loc_15 = m_location.translate(2, 3);
        MapLocation loc_16 = m_location.translate(3, 3);
        MapLocation loc_17 = m_location.translate(4, 3);
        MapLocation loc_18 = m_location.translate(-4, 2);
        MapLocation loc_19 = m_location.translate(-3, 2);
        MapLocation loc_20 = m_location.translate(-2, 2);
        MapLocation loc_21 = m_location.translate(-1, 2);
        MapLocation loc_22 = m_location.translate(0, 2);
        MapLocation loc_23 = m_location.translate(1, 2);
        MapLocation loc_24 = m_location.translate(2, 2);
        MapLocation loc_25 = m_location.translate(3, 2);
        MapLocation loc_26 = m_location.translate(4, 2);
        MapLocation loc_27 = m_location.translate(-4, 1);
        MapLocation loc_28 = m_location.translate(-3, 1);
        MapLocation loc_29 = m_location.translate(-2, 1);
        MapLocation loc_30 = m_location.translate(-1, 1);
        MapLocation loc_31 = m_location.translate(0, 1);
        MapLocation loc_32 = m_location.translate(1, 1);
        MapLocation loc_33 = m_location.translate(2, 1);
        MapLocation loc_34 = m_location.translate(3, 1);
        MapLocation loc_35 = m_location.translate(4, 1);
        MapLocation loc_36 = m_location.translate(-4, 0);
        MapLocation loc_37 = m_location.translate(-3, 0);
        MapLocation loc_38 = m_location.translate(-2, 0);
        MapLocation loc_39 = m_location.translate(-1, 0);
        MapLocation loc_40 = m_location.translate(0, 0);
        MapLocation loc_41 = m_location.translate(1, 0);
        MapLocation loc_42 = m_location.translate(2, 0);
        MapLocation loc_43 = m_location.translate(3, 0);
        MapLocation loc_44 = m_location.translate(4, 0);
        MapLocation loc_45 = m_location.translate(-4, -1);
        MapLocation loc_46 = m_location.translate(-3, -1);
        MapLocation loc_47 = m_location.translate(-2, -1);
        MapLocation loc_48 = m_location.translate(-1, -1);
        MapLocation loc_49 = m_location.translate(0, -1);
        MapLocation loc_50 = m_location.translate(1, -1);
        MapLocation loc_51 = m_location.translate(2, -1);
        MapLocation loc_52 = m_location.translate(3, -1);
        MapLocation loc_53 = m_location.translate(4, -1);
        MapLocation loc_54 = m_location.translate(-4, -2);
        MapLocation loc_55 = m_location.translate(-3, -2);
        MapLocation loc_56 = m_location.translate(-2, -2);
        MapLocation loc_57 = m_location.translate(-1, -2);
        MapLocation loc_58 = m_location.translate(0, -2);
        MapLocation loc_59 = m_location.translate(1, -2);
        MapLocation loc_60 = m_location.translate(2, -2);
        MapLocation loc_61 = m_location.translate(3, -2);
        MapLocation loc_62 = m_location.translate(4, -2);
        MapLocation loc_63 = m_location.translate(-4, -3);
        MapLocation loc_64 = m_location.translate(-3, -3);
        MapLocation loc_65 = m_location.translate(-2, -3);
        MapLocation loc_66 = m_location.translate(-1, -3);
        MapLocation loc_67 = m_location.translate(0, -3);
        MapLocation loc_68 = m_location.translate(1, -3);
        MapLocation loc_69 = m_location.translate(2, -3);
        MapLocation loc_70 = m_location.translate(3, -3);
        MapLocation loc_71 = m_location.translate(4, -3);
        MapLocation loc_72 = m_location.translate(-4, -4);
        MapLocation loc_73 = m_location.translate(-3, -4);
        MapLocation loc_74 = m_location.translate(-2, -4);
        MapLocation loc_75 = m_location.translate(-1, -4);
        MapLocation loc_76 = m_location.translate(0, -4);
        MapLocation loc_77 = m_location.translate(1, -4);
        MapLocation loc_78 = m_location.translate(2, -4);
        MapLocation loc_79 = m_location.translate(3, -4);
        MapLocation loc_80 = m_location.translate(4, -4);
// layer 8
        int cost_80 = smartRubble(loc_80) + loc_80.distanceSquaredTo(dest);
        int cost_71 = smartRubble(loc_71) + loc_71.distanceSquaredTo(dest);
        int cost_79 = smartRubble(loc_79) + loc_79.distanceSquaredTo(dest);
// layer 7
        int cost_62 = smartRubble(loc_62) + loc_62.distanceSquaredTo(dest);
        int cost_70 = Integer.MAX_VALUE;
        if (cost_80 < cost_70) cost_70 = cost_80;
        if (cost_71 < cost_70) cost_70 = cost_71;
        if (cost_79 < cost_70) cost_70 = cost_79;
        cost_70 += smartRubble(loc_70);
        int cost_78 = smartRubble(loc_78) + loc_78.distanceSquaredTo(dest);
// layer 6
        int cost_53 = smartRubble(loc_53) + loc_53.distanceSquaredTo(dest);
        int cost_61 = Integer.MAX_VALUE;
        if (cost_71 < cost_61) cost_61 = cost_71;
        if (cost_62 < cost_61) cost_61 = cost_62;
        if (cost_70 < cost_61) cost_61 = cost_70;
        cost_61 += smartRubble(loc_61);
        int cost_69 = Integer.MAX_VALUE;
        if (cost_79 < cost_69) cost_69 = cost_79;
        if (cost_70 < cost_69) cost_69 = cost_70;
        if (cost_78 < cost_69) cost_69 = cost_78;
        cost_69 += smartRubble(loc_69);
        int cost_77 = smartRubble(loc_77) + loc_77.distanceSquaredTo(dest);
// layer 5
        int cost_44 = smartRubble(loc_44) + loc_44.distanceSquaredTo(dest);
        int cost_52 = Integer.MAX_VALUE;
        if (cost_62 < cost_52) cost_52 = cost_62;
        if (cost_53 < cost_52) cost_52 = cost_53;
        if (cost_61 < cost_52) cost_52 = cost_61;
        cost_52 += smartRubble(loc_52);
        int cost_60 = Integer.MAX_VALUE;
        if (cost_70 < cost_60) cost_60 = cost_70;
        if (cost_61 < cost_60) cost_60 = cost_61;
        if (cost_69 < cost_60) cost_60 = cost_69;
        cost_60 += smartRubble(loc_60);
        int cost_68 = Integer.MAX_VALUE;
        if (cost_78 < cost_68) cost_68 = cost_78;
        if (cost_69 < cost_68) cost_68 = cost_69;
        if (cost_77 < cost_68) cost_68 = cost_77;
        cost_68 += smartRubble(loc_68);
        int cost_76 = smartRubble(loc_76) + loc_76.distanceSquaredTo(dest);
// layer 4
        int cost_43 = Integer.MAX_VALUE;
        if (cost_53 < cost_43) cost_43 = cost_53;
        if (cost_44 < cost_43) cost_43 = cost_44;
        if (cost_52 < cost_43) cost_43 = cost_52;
        cost_43 += smartRubble(loc_43);
        int cost_51 = Integer.MAX_VALUE;
        if (cost_61 < cost_51) cost_51 = cost_61;
        if (cost_52 < cost_51) cost_51 = cost_52;
        if (cost_60 < cost_51) cost_51 = cost_60;
        cost_51 += smartRubble(loc_51);
        int cost_59 = Integer.MAX_VALUE;
        if (cost_69 < cost_59) cost_59 = cost_69;
        if (cost_60 < cost_59) cost_59 = cost_60;
        if (cost_68 < cost_59) cost_59 = cost_68;
        cost_59 += smartRubble(loc_59);
        int cost_67 = Integer.MAX_VALUE;
        if (cost_77 < cost_67) cost_67 = cost_77;
        if (cost_68 < cost_67) cost_67 = cost_68;
        if (cost_76 < cost_67) cost_67 = cost_76;
        cost_67 += smartRubble(loc_67);
// layer 3
        int cost_42 = Integer.MAX_VALUE;
        if (cost_52 < cost_42) cost_42 = cost_52;
        if (cost_43 < cost_42) cost_42 = cost_43;
        if (cost_51 < cost_42) cost_42 = cost_51;
        cost_42 += smartRubble(loc_42);
        int cost_50 = Integer.MAX_VALUE;
        if (cost_60 < cost_50) cost_50 = cost_60;
        if (cost_51 < cost_50) cost_50 = cost_51;
        if (cost_59 < cost_50) cost_50 = cost_59;
        cost_50 += smartRubble(loc_50);
        int cost_58 = Integer.MAX_VALUE;
        if (cost_68 < cost_58) cost_58 = cost_68;
        if (cost_59 < cost_58) cost_58 = cost_59;
        if (cost_67 < cost_58) cost_58 = cost_67;
        cost_58 += smartRubble(loc_58);
// layer 2
        int cost_41 = Integer.MAX_VALUE;
        if (cost_51 < cost_41) cost_41 = cost_51;
        if (cost_42 < cost_41) cost_41 = cost_42;
        if (cost_50 < cost_41) cost_41 = cost_50;
        cost_41 += smartRubble(loc_41);
        int cost_49 = Integer.MAX_VALUE;
        if (cost_59 < cost_49) cost_49 = cost_59;
        if (cost_50 < cost_49) cost_49 = cost_50;
        if (cost_58 < cost_49) cost_49 = cost_58;
        cost_49 += smartRubble(loc_49);
        int cost_40 = cost_50;
        best_dir = Direction.SOUTHEAST;
        if (cost_41 < cost_40) {
            cost_40 = cost_41;
            best_dir = Direction.EAST;
        }
        if (cost_49 < cost_40) {
            cost_40 = cost_49;
            best_dir = Direction.SOUTH;
        }
        return best_dir;}private static Direction pathfind_SOUTHWEST(RobotController rc, MapLocation dest) throws GameActionException {
        MapLocation m_location = rc.getLocation();
        Direction best_dir = null;MapLocation loc_0 = m_location.translate(-4, 4);
        MapLocation loc_1 = m_location.translate(-3, 4);
        MapLocation loc_2 = m_location.translate(-2, 4);
        MapLocation loc_3 = m_location.translate(-1, 4);
        MapLocation loc_4 = m_location.translate(0, 4);
        MapLocation loc_5 = m_location.translate(1, 4);
        MapLocation loc_6 = m_location.translate(2, 4);
        MapLocation loc_7 = m_location.translate(3, 4);
        MapLocation loc_8 = m_location.translate(4, 4);
        MapLocation loc_9 = m_location.translate(-4, 3);
        MapLocation loc_10 = m_location.translate(-3, 3);
        MapLocation loc_11 = m_location.translate(-2, 3);
        MapLocation loc_12 = m_location.translate(-1, 3);
        MapLocation loc_13 = m_location.translate(0, 3);
        MapLocation loc_14 = m_location.translate(1, 3);
        MapLocation loc_15 = m_location.translate(2, 3);
        MapLocation loc_16 = m_location.translate(3, 3);
        MapLocation loc_17 = m_location.translate(4, 3);
        MapLocation loc_18 = m_location.translate(-4, 2);
        MapLocation loc_19 = m_location.translate(-3, 2);
        MapLocation loc_20 = m_location.translate(-2, 2);
        MapLocation loc_21 = m_location.translate(-1, 2);
        MapLocation loc_22 = m_location.translate(0, 2);
        MapLocation loc_23 = m_location.translate(1, 2);
        MapLocation loc_24 = m_location.translate(2, 2);
        MapLocation loc_25 = m_location.translate(3, 2);
        MapLocation loc_26 = m_location.translate(4, 2);
        MapLocation loc_27 = m_location.translate(-4, 1);
        MapLocation loc_28 = m_location.translate(-3, 1);
        MapLocation loc_29 = m_location.translate(-2, 1);
        MapLocation loc_30 = m_location.translate(-1, 1);
        MapLocation loc_31 = m_location.translate(0, 1);
        MapLocation loc_32 = m_location.translate(1, 1);
        MapLocation loc_33 = m_location.translate(2, 1);
        MapLocation loc_34 = m_location.translate(3, 1);
        MapLocation loc_35 = m_location.translate(4, 1);
        MapLocation loc_36 = m_location.translate(-4, 0);
        MapLocation loc_37 = m_location.translate(-3, 0);
        MapLocation loc_38 = m_location.translate(-2, 0);
        MapLocation loc_39 = m_location.translate(-1, 0);
        MapLocation loc_40 = m_location.translate(0, 0);
        MapLocation loc_41 = m_location.translate(1, 0);
        MapLocation loc_42 = m_location.translate(2, 0);
        MapLocation loc_43 = m_location.translate(3, 0);
        MapLocation loc_44 = m_location.translate(4, 0);
        MapLocation loc_45 = m_location.translate(-4, -1);
        MapLocation loc_46 = m_location.translate(-3, -1);
        MapLocation loc_47 = m_location.translate(-2, -1);
        MapLocation loc_48 = m_location.translate(-1, -1);
        MapLocation loc_49 = m_location.translate(0, -1);
        MapLocation loc_50 = m_location.translate(1, -1);
        MapLocation loc_51 = m_location.translate(2, -1);
        MapLocation loc_52 = m_location.translate(3, -1);
        MapLocation loc_53 = m_location.translate(4, -1);
        MapLocation loc_54 = m_location.translate(-4, -2);
        MapLocation loc_55 = m_location.translate(-3, -2);
        MapLocation loc_56 = m_location.translate(-2, -2);
        MapLocation loc_57 = m_location.translate(-1, -2);
        MapLocation loc_58 = m_location.translate(0, -2);
        MapLocation loc_59 = m_location.translate(1, -2);
        MapLocation loc_60 = m_location.translate(2, -2);
        MapLocation loc_61 = m_location.translate(3, -2);
        MapLocation loc_62 = m_location.translate(4, -2);
        MapLocation loc_63 = m_location.translate(-4, -3);
        MapLocation loc_64 = m_location.translate(-3, -3);
        MapLocation loc_65 = m_location.translate(-2, -3);
        MapLocation loc_66 = m_location.translate(-1, -3);
        MapLocation loc_67 = m_location.translate(0, -3);
        MapLocation loc_68 = m_location.translate(1, -3);
        MapLocation loc_69 = m_location.translate(2, -3);
        MapLocation loc_70 = m_location.translate(3, -3);
        MapLocation loc_71 = m_location.translate(4, -3);
        MapLocation loc_72 = m_location.translate(-4, -4);
        MapLocation loc_73 = m_location.translate(-3, -4);
        MapLocation loc_74 = m_location.translate(-2, -4);
        MapLocation loc_75 = m_location.translate(-1, -4);
        MapLocation loc_76 = m_location.translate(0, -4);
        MapLocation loc_77 = m_location.translate(1, -4);
        MapLocation loc_78 = m_location.translate(2, -4);
        MapLocation loc_79 = m_location.translate(3, -4);
        MapLocation loc_80 = m_location.translate(4, -4);
// layer 8
        int cost_72 = smartRubble(loc_72) + loc_72.distanceSquaredTo(dest);
        int cost_73 = smartRubble(loc_73) + loc_73.distanceSquaredTo(dest);
        int cost_63 = smartRubble(loc_63) + loc_63.distanceSquaredTo(dest);
// layer 7
        int cost_74 = smartRubble(loc_74) + loc_74.distanceSquaredTo(dest);
        int cost_64 = Integer.MAX_VALUE;
        if (cost_72 < cost_64) cost_64 = cost_72;
        if (cost_73 < cost_64) cost_64 = cost_73;
        if (cost_63 < cost_64) cost_64 = cost_63;
        cost_64 += smartRubble(loc_64);
        int cost_54 = smartRubble(loc_54) + loc_54.distanceSquaredTo(dest);
// layer 6
        int cost_75 = smartRubble(loc_75) + loc_75.distanceSquaredTo(dest);
        int cost_65 = Integer.MAX_VALUE;
        if (cost_73 < cost_65) cost_65 = cost_73;
        if (cost_74 < cost_65) cost_65 = cost_74;
        if (cost_64 < cost_65) cost_65 = cost_64;
        cost_65 += smartRubble(loc_65);
        int cost_55 = Integer.MAX_VALUE;
        if (cost_63 < cost_55) cost_55 = cost_63;
        if (cost_64 < cost_55) cost_55 = cost_64;
        if (cost_54 < cost_55) cost_55 = cost_54;
        cost_55 += smartRubble(loc_55);
        int cost_45 = smartRubble(loc_45) + loc_45.distanceSquaredTo(dest);
// layer 5
        int cost_76 = smartRubble(loc_76) + loc_76.distanceSquaredTo(dest);
        int cost_66 = Integer.MAX_VALUE;
        if (cost_74 < cost_66) cost_66 = cost_74;
        if (cost_75 < cost_66) cost_66 = cost_75;
        if (cost_65 < cost_66) cost_66 = cost_65;
        cost_66 += smartRubble(loc_66);
        int cost_56 = Integer.MAX_VALUE;
        if (cost_64 < cost_56) cost_56 = cost_64;
        if (cost_65 < cost_56) cost_56 = cost_65;
        if (cost_55 < cost_56) cost_56 = cost_55;
        cost_56 += smartRubble(loc_56);
        int cost_46 = Integer.MAX_VALUE;
        if (cost_54 < cost_46) cost_46 = cost_54;
        if (cost_55 < cost_46) cost_46 = cost_55;
        if (cost_45 < cost_46) cost_46 = cost_45;
        cost_46 += smartRubble(loc_46);
        int cost_36 = smartRubble(loc_36) + loc_36.distanceSquaredTo(dest);
// layer 4
        int cost_67 = Integer.MAX_VALUE;
        if (cost_75 < cost_67) cost_67 = cost_75;
        if (cost_76 < cost_67) cost_67 = cost_76;
        if (cost_66 < cost_67) cost_67 = cost_66;
        cost_67 += smartRubble(loc_67);
        int cost_57 = Integer.MAX_VALUE;
        if (cost_65 < cost_57) cost_57 = cost_65;
        if (cost_66 < cost_57) cost_57 = cost_66;
        if (cost_56 < cost_57) cost_57 = cost_56;
        cost_57 += smartRubble(loc_57);
        int cost_47 = Integer.MAX_VALUE;
        if (cost_55 < cost_47) cost_47 = cost_55;
        if (cost_56 < cost_47) cost_47 = cost_56;
        if (cost_46 < cost_47) cost_47 = cost_46;
        cost_47 += smartRubble(loc_47);
        int cost_37 = Integer.MAX_VALUE;
        if (cost_45 < cost_37) cost_37 = cost_45;
        if (cost_46 < cost_37) cost_37 = cost_46;
        if (cost_36 < cost_37) cost_37 = cost_36;
        cost_37 += smartRubble(loc_37);
// layer 3
        int cost_58 = Integer.MAX_VALUE;
        if (cost_66 < cost_58) cost_58 = cost_66;
        if (cost_67 < cost_58) cost_58 = cost_67;
        if (cost_57 < cost_58) cost_58 = cost_57;
        cost_58 += smartRubble(loc_58);
        int cost_48 = Integer.MAX_VALUE;
        if (cost_56 < cost_48) cost_48 = cost_56;
        if (cost_57 < cost_48) cost_48 = cost_57;
        if (cost_47 < cost_48) cost_48 = cost_47;
        cost_48 += smartRubble(loc_48);
        int cost_38 = Integer.MAX_VALUE;
        if (cost_46 < cost_38) cost_38 = cost_46;
        if (cost_47 < cost_38) cost_38 = cost_47;
        if (cost_37 < cost_38) cost_38 = cost_37;
        cost_38 += smartRubble(loc_38);
// layer 2
        int cost_49 = Integer.MAX_VALUE;
        if (cost_57 < cost_49) cost_49 = cost_57;
        if (cost_58 < cost_49) cost_49 = cost_58;
        if (cost_48 < cost_49) cost_49 = cost_48;
        cost_49 += smartRubble(loc_49);
        int cost_39 = Integer.MAX_VALUE;
        if (cost_47 < cost_39) cost_39 = cost_47;
        if (cost_48 < cost_39) cost_39 = cost_48;
        if (cost_38 < cost_39) cost_39 = cost_38;
        cost_39 += smartRubble(loc_39);
        int cost_40 = cost_48;
        best_dir = Direction.SOUTHWEST;
        if (cost_49 < cost_40) {
            cost_40 = cost_49;
            best_dir = Direction.SOUTH;
        }
        if (cost_39 < cost_40) {
            cost_40 = cost_39;
            best_dir = Direction.WEST;
        }
        return best_dir;}}