package pathfinder;
import battlecode.common.*;

class UnrolledPathfinder {
static void NORTH(RobotController rc, MapLocation destination) throws GameActionException {
MapLocation cur = rc.getLocation();
MapLocation loc_0_4 = cur.translate(-4, 0);
MapLocation loc_0_5 = cur.translate(-4, 1);
MapLocation loc_0_6 = cur.translate(-4, 2);
MapLocation loc_2_8 = cur.translate(-2, 4);
MapLocation loc_3_8 = cur.translate(-1, 4);
MapLocation loc_4_8 = cur.translate(0, 4);
MapLocation loc_5_8 = cur.translate(1, 4);
MapLocation loc_6_8 = cur.translate(2, 4);
MapLocation loc_8_6 = cur.translate(4, 2);
MapLocation loc_8_5 = cur.translate(4, 1);
MapLocation loc_8_4 = cur.translate(4, 0);
MapLocation loc_1_4 = cur.translate(-3, 0);
MapLocation loc_1_5 = cur.translate(-3, 1);
MapLocation loc_1_6 = cur.translate(-3, 2);
MapLocation loc_1_7 = cur.translate(-3, 3);
MapLocation loc_2_7 = cur.translate(-2, 3);
MapLocation loc_3_7 = cur.translate(-1, 3);
MapLocation loc_4_7 = cur.translate(0, 3);
MapLocation loc_5_7 = cur.translate(1, 3);
MapLocation loc_6_7 = cur.translate(2, 3);
MapLocation loc_7_7 = cur.translate(3, 3);
MapLocation loc_7_6 = cur.translate(3, 2);
MapLocation loc_7_5 = cur.translate(3, 1);
MapLocation loc_7_4 = cur.translate(3, 0);
MapLocation loc_2_4 = cur.translate(-2, 0);
MapLocation loc_2_5 = cur.translate(-2, 1);
MapLocation loc_2_6 = cur.translate(-2, 2);
MapLocation loc_3_6 = cur.translate(-1, 2);
MapLocation loc_4_6 = cur.translate(0, 2);
MapLocation loc_5_6 = cur.translate(1, 2);
MapLocation loc_6_6 = cur.translate(2, 2);
MapLocation loc_6_5 = cur.translate(2, 1);
MapLocation loc_6_4 = cur.translate(2, 0);
MapLocation loc_3_4 = cur.translate(-1, 0);
MapLocation loc_3_5 = cur.translate(-1, 1);
MapLocation loc_4_5 = cur.translate(0, 1);
MapLocation loc_5_5 = cur.translate(1, 1);
MapLocation loc_5_4 = cur.translate(1, 0);
int rubble_0_4 = (rc.canSenseLocation(loc_0_4) && !rc.isLocationOccupied(loc_0_4))? 20 + 2 * rc.senseRubble(loc_0_4) : 100000;
if (loc_0_4.equals(destination)) { rubble_0_4 = -0; }int rubble_0_5 = (rc.canSenseLocation(loc_0_5) && !rc.isLocationOccupied(loc_0_5))? 20 + 2 * rc.senseRubble(loc_0_5) : 100000;
if (loc_0_5.equals(destination)) { rubble_0_5 = -0; }int rubble_0_6 = (rc.canSenseLocation(loc_0_6) && !rc.isLocationOccupied(loc_0_6))? 20 + 2 * rc.senseRubble(loc_0_6) : 100000;
if (loc_0_6.equals(destination)) { rubble_0_6 = -0; }int rubble_2_8 = (rc.canSenseLocation(loc_2_8) && !rc.isLocationOccupied(loc_2_8))? 20 + 2 * rc.senseRubble(loc_2_8) : 100000;
if (loc_2_8.equals(destination)) { rubble_2_8 = -0; }int rubble_3_8 = (rc.canSenseLocation(loc_3_8) && !rc.isLocationOccupied(loc_3_8))? 20 + 2 * rc.senseRubble(loc_3_8) : 100000;
if (loc_3_8.equals(destination)) { rubble_3_8 = -0; }int rubble_4_8 = (rc.canSenseLocation(loc_4_8) && !rc.isLocationOccupied(loc_4_8))? 20 + 2 * rc.senseRubble(loc_4_8) : 100000;
if (loc_4_8.equals(destination)) { rubble_4_8 = -0; }int rubble_5_8 = (rc.canSenseLocation(loc_5_8) && !rc.isLocationOccupied(loc_5_8))? 20 + 2 * rc.senseRubble(loc_5_8) : 100000;
if (loc_5_8.equals(destination)) { rubble_5_8 = -0; }int rubble_6_8 = (rc.canSenseLocation(loc_6_8) && !rc.isLocationOccupied(loc_6_8))? 20 + 2 * rc.senseRubble(loc_6_8) : 100000;
if (loc_6_8.equals(destination)) { rubble_6_8 = -0; }int rubble_8_6 = (rc.canSenseLocation(loc_8_6) && !rc.isLocationOccupied(loc_8_6))? 20 + 2 * rc.senseRubble(loc_8_6) : 100000;
if (loc_8_6.equals(destination)) { rubble_8_6 = -0; }int rubble_8_5 = (rc.canSenseLocation(loc_8_5) && !rc.isLocationOccupied(loc_8_5))? 20 + 2 * rc.senseRubble(loc_8_5) : 100000;
if (loc_8_5.equals(destination)) { rubble_8_5 = -0; }int rubble_8_4 = (rc.canSenseLocation(loc_8_4) && !rc.isLocationOccupied(loc_8_4))? 20 + 2 * rc.senseRubble(loc_8_4) : 100000;
if (loc_8_4.equals(destination)) { rubble_8_4 = -0; }int rubble_1_4 = (rc.canSenseLocation(loc_1_4) && !rc.isLocationOccupied(loc_1_4))? 20 + 2 * rc.senseRubble(loc_1_4) : 100000;
if (loc_1_4.equals(destination)) { rubble_1_4 = -0; }int rubble_1_5 = (rc.canSenseLocation(loc_1_5) && !rc.isLocationOccupied(loc_1_5))? 20 + 2 * rc.senseRubble(loc_1_5) : 100000;
if (loc_1_5.equals(destination)) { rubble_1_5 = -0; }int rubble_1_6 = (rc.canSenseLocation(loc_1_6) && !rc.isLocationOccupied(loc_1_6))? 20 + 2 * rc.senseRubble(loc_1_6) : 100000;
if (loc_1_6.equals(destination)) { rubble_1_6 = -0; }int rubble_1_7 = (rc.canSenseLocation(loc_1_7) && !rc.isLocationOccupied(loc_1_7))? 20 + 2 * rc.senseRubble(loc_1_7) : 100000;
if (loc_1_7.equals(destination)) { rubble_1_7 = -0; }int rubble_2_7 = (rc.canSenseLocation(loc_2_7) && !rc.isLocationOccupied(loc_2_7))? 20 + 2 * rc.senseRubble(loc_2_7) : 100000;
if (loc_2_7.equals(destination)) { rubble_2_7 = -0; }int rubble_3_7 = (rc.canSenseLocation(loc_3_7) && !rc.isLocationOccupied(loc_3_7))? 20 + 2 * rc.senseRubble(loc_3_7) : 100000;
if (loc_3_7.equals(destination)) { rubble_3_7 = -0; }int rubble_4_7 = (rc.canSenseLocation(loc_4_7) && !rc.isLocationOccupied(loc_4_7))? 20 + 2 * rc.senseRubble(loc_4_7) : 100000;
if (loc_4_7.equals(destination)) { rubble_4_7 = -0; }int rubble_5_7 = (rc.canSenseLocation(loc_5_7) && !rc.isLocationOccupied(loc_5_7))? 20 + 2 * rc.senseRubble(loc_5_7) : 100000;
if (loc_5_7.equals(destination)) { rubble_5_7 = -0; }int rubble_6_7 = (rc.canSenseLocation(loc_6_7) && !rc.isLocationOccupied(loc_6_7))? 20 + 2 * rc.senseRubble(loc_6_7) : 100000;
if (loc_6_7.equals(destination)) { rubble_6_7 = -0; }int rubble_7_7 = (rc.canSenseLocation(loc_7_7) && !rc.isLocationOccupied(loc_7_7))? 20 + 2 * rc.senseRubble(loc_7_7) : 100000;
if (loc_7_7.equals(destination)) { rubble_7_7 = -0; }int rubble_7_6 = (rc.canSenseLocation(loc_7_6) && !rc.isLocationOccupied(loc_7_6))? 20 + 2 * rc.senseRubble(loc_7_6) : 100000;
if (loc_7_6.equals(destination)) { rubble_7_6 = -0; }int rubble_7_5 = (rc.canSenseLocation(loc_7_5) && !rc.isLocationOccupied(loc_7_5))? 20 + 2 * rc.senseRubble(loc_7_5) : 100000;
if (loc_7_5.equals(destination)) { rubble_7_5 = -0; }int rubble_7_4 = (rc.canSenseLocation(loc_7_4) && !rc.isLocationOccupied(loc_7_4))? 20 + 2 * rc.senseRubble(loc_7_4) : 100000;
if (loc_7_4.equals(destination)) { rubble_7_4 = -0; }int rubble_2_4 = (rc.canSenseLocation(loc_2_4) && !rc.isLocationOccupied(loc_2_4))? 20 + 2 * rc.senseRubble(loc_2_4) : 100000;
if (loc_2_4.equals(destination)) { rubble_2_4 = -0; }int rubble_2_5 = (rc.canSenseLocation(loc_2_5) && !rc.isLocationOccupied(loc_2_5))? 20 + 2 * rc.senseRubble(loc_2_5) : 100000;
if (loc_2_5.equals(destination)) { rubble_2_5 = -0; }int rubble_2_6 = (rc.canSenseLocation(loc_2_6) && !rc.isLocationOccupied(loc_2_6))? 20 + 2 * rc.senseRubble(loc_2_6) : 100000;
if (loc_2_6.equals(destination)) { rubble_2_6 = -0; }int rubble_3_6 = (rc.canSenseLocation(loc_3_6) && !rc.isLocationOccupied(loc_3_6))? 20 + 2 * rc.senseRubble(loc_3_6) : 100000;
if (loc_3_6.equals(destination)) { rubble_3_6 = -0; }int rubble_4_6 = (rc.canSenseLocation(loc_4_6) && !rc.isLocationOccupied(loc_4_6))? 20 + 2 * rc.senseRubble(loc_4_6) : 100000;
if (loc_4_6.equals(destination)) { rubble_4_6 = -0; }int rubble_5_6 = (rc.canSenseLocation(loc_5_6) && !rc.isLocationOccupied(loc_5_6))? 20 + 2 * rc.senseRubble(loc_5_6) : 100000;
if (loc_5_6.equals(destination)) { rubble_5_6 = -0; }int rubble_6_6 = (rc.canSenseLocation(loc_6_6) && !rc.isLocationOccupied(loc_6_6))? 20 + 2 * rc.senseRubble(loc_6_6) : 100000;
if (loc_6_6.equals(destination)) { rubble_6_6 = -0; }int rubble_6_5 = (rc.canSenseLocation(loc_6_5) && !rc.isLocationOccupied(loc_6_5))? 20 + 2 * rc.senseRubble(loc_6_5) : 100000;
if (loc_6_5.equals(destination)) { rubble_6_5 = -0; }int rubble_6_4 = (rc.canSenseLocation(loc_6_4) && !rc.isLocationOccupied(loc_6_4))? 20 + 2 * rc.senseRubble(loc_6_4) : 100000;
if (loc_6_4.equals(destination)) { rubble_6_4 = -0; }int rubble_3_4 = (rc.canSenseLocation(loc_3_4) && !rc.isLocationOccupied(loc_3_4))? 20 + 2 * rc.senseRubble(loc_3_4) : 100000;
if (loc_3_4.equals(destination)) { rubble_3_4 = -0; }int rubble_3_5 = (rc.canSenseLocation(loc_3_5) && !rc.isLocationOccupied(loc_3_5))? 20 + 2 * rc.senseRubble(loc_3_5) : 100000;
if (loc_3_5.equals(destination)) { rubble_3_5 = -0; }int rubble_4_5 = (rc.canSenseLocation(loc_4_5) && !rc.isLocationOccupied(loc_4_5))? 20 + 2 * rc.senseRubble(loc_4_5) : 100000;
if (loc_4_5.equals(destination)) { rubble_4_5 = -0; }int rubble_5_5 = (rc.canSenseLocation(loc_5_5) && !rc.isLocationOccupied(loc_5_5))? 20 + 2 * rc.senseRubble(loc_5_5) : 100000;
if (loc_5_5.equals(destination)) { rubble_5_5 = -0; }int rubble_5_4 = (rc.canSenseLocation(loc_5_4) && !rc.isLocationOccupied(loc_5_4))? 20 + 2 * rc.senseRubble(loc_5_4) : 100000;
if (loc_5_4.equals(destination)) { rubble_5_4 = -0; }int score_0_4 = 1000000000;
int score_0_5 = 1000000000;
int score_0_6 = 1000000000;
int score_2_8 = 1000000000;
int score_3_8 = 1000000000;
int score_4_8 = 1000000000;
int score_5_8 = 1000000000;
int score_6_8 = 1000000000;
int score_8_6 = 1000000000;
int score_8_5 = 1000000000;
int score_8_4 = 1000000000;
int score_1_4 = 1000000000;
int score_1_5 = 1000000000;
int score_1_6 = 1000000000;
int score_1_7 = 1000000000;
int score_2_7 = 1000000000;
int score_3_7 = 1000000000;
int score_4_7 = 1000000000;
int score_5_7 = 1000000000;
int score_6_7 = 1000000000;
int score_7_7 = 1000000000;
int score_7_6 = 1000000000;
int score_7_5 = 1000000000;
int score_7_4 = 1000000000;
int score_2_4 = 1000000000;
int score_2_5 = 1000000000;
int score_2_6 = 1000000000;
int score_3_6 = 1000000000;
int score_4_6 = 1000000000;
int score_5_6 = 1000000000;
int score_6_6 = 1000000000;
int score_6_5 = 1000000000;
int score_6_4 = 1000000000;
int score_3_4 = 1000000000;
int score_3_5 = 1000000000;
int score_4_5 = 1000000000;
int score_5_5 = 1000000000;
int score_5_4 = 1000000000;
score_0_4 = man(loc_0_4, destination) * (20 + 0) + rubble_0_4;
score_0_5 = man(loc_0_5, destination) * (20 + 0) + rubble_0_5;
score_0_6 = man(loc_0_6, destination) * (20 + 0) + rubble_0_6;
score_2_8 = man(loc_2_8, destination) * (20 + 0) + rubble_2_8;
score_3_8 = man(loc_3_8, destination) * (20 + 0) + rubble_3_8;
score_4_8 = man(loc_4_8, destination) * (20 + 0) + rubble_4_8;
score_5_8 = man(loc_5_8, destination) * (20 + 0) + rubble_5_8;
score_6_8 = man(loc_6_8, destination) * (20 + 0) + rubble_6_8;
score_8_6 = man(loc_8_6, destination) * (20 + 0) + rubble_8_6;
score_8_5 = man(loc_8_5, destination) * (20 + 0) + rubble_8_5;
score_8_4 = man(loc_8_4, destination) * (20 + 0) + rubble_8_4;
score_0_5 = Math.min(score_0_5, score_0_4 + rubble_0_5);
score_0_6 = Math.min(score_0_6, score_0_5 + rubble_0_6);
score_3_8 = Math.min(score_3_8, score_2_8 + rubble_3_8);
score_4_8 = Math.min(score_4_8, score_3_8 + rubble_4_8);
score_5_8 = Math.min(score_5_8, score_4_8 + rubble_5_8);
score_6_8 = Math.min(score_6_8, score_5_8 + rubble_6_8);
score_8_5 = Math.min(score_8_5, score_8_6 + rubble_8_5);
score_8_4 = Math.min(score_8_4, score_8_5 + rubble_8_4);
score_8_5 = Math.min(score_8_5, score_8_4 + rubble_8_5);
score_8_6 = Math.min(score_8_6, score_8_5 + rubble_8_6);
score_5_8 = Math.min(score_5_8, score_6_8 + rubble_5_8);
score_4_8 = Math.min(score_4_8, score_5_8 + rubble_4_8);
score_3_8 = Math.min(score_3_8, score_4_8 + rubble_3_8);
score_2_8 = Math.min(score_2_8, score_3_8 + rubble_2_8);
score_0_5 = Math.min(score_0_5, score_0_6 + rubble_0_5);
score_0_4 = Math.min(score_0_4, score_0_5 + rubble_0_4);
score_7_4 = Math.min(score_7_4, score_8_4 + rubble_7_4);
score_7_4 = Math.min(score_7_4, score_8_5 + rubble_7_4);
score_7_5 = Math.min(score_7_5, score_8_4 + rubble_7_5);
score_7_5 = Math.min(score_7_5, score_8_5 + rubble_7_5);
score_7_5 = Math.min(score_7_5, score_8_6 + rubble_7_5);
score_7_6 = Math.min(score_7_6, score_8_5 + rubble_7_6);
score_7_6 = Math.min(score_7_6, score_8_6 + rubble_7_6);
score_7_7 = Math.min(score_7_7, score_8_6 + rubble_7_7);
score_7_7 = Math.min(score_7_7, score_6_8 + rubble_7_7);
score_6_7 = Math.min(score_6_7, score_6_8 + rubble_6_7);
score_6_7 = Math.min(score_6_7, score_5_8 + rubble_6_7);
score_5_7 = Math.min(score_5_7, score_6_8 + rubble_5_7);
score_5_7 = Math.min(score_5_7, score_5_8 + rubble_5_7);
score_5_7 = Math.min(score_5_7, score_4_8 + rubble_5_7);
score_4_7 = Math.min(score_4_7, score_5_8 + rubble_4_7);
score_4_7 = Math.min(score_4_7, score_4_8 + rubble_4_7);
score_4_7 = Math.min(score_4_7, score_3_8 + rubble_4_7);
score_3_7 = Math.min(score_3_7, score_4_8 + rubble_3_7);
score_3_7 = Math.min(score_3_7, score_3_8 + rubble_3_7);
score_3_7 = Math.min(score_3_7, score_2_8 + rubble_3_7);
score_2_7 = Math.min(score_2_7, score_3_8 + rubble_2_7);
score_2_7 = Math.min(score_2_7, score_2_8 + rubble_2_7);
score_1_7 = Math.min(score_1_7, score_2_8 + rubble_1_7);
score_1_7 = Math.min(score_1_7, score_0_6 + rubble_1_7);
score_1_6 = Math.min(score_1_6, score_0_6 + rubble_1_6);
score_1_6 = Math.min(score_1_6, score_0_5 + rubble_1_6);
score_1_5 = Math.min(score_1_5, score_0_6 + rubble_1_5);
score_1_5 = Math.min(score_1_5, score_0_5 + rubble_1_5);
score_1_5 = Math.min(score_1_5, score_0_4 + rubble_1_5);
score_1_4 = Math.min(score_1_4, score_0_5 + rubble_1_4);
score_1_4 = Math.min(score_1_4, score_0_4 + rubble_1_4);
score_1_5 = Math.min(score_1_5, score_1_4 + rubble_1_5);
score_1_6 = Math.min(score_1_6, score_1_5 + rubble_1_6);
score_1_7 = Math.min(score_1_7, score_1_6 + rubble_1_7);
score_2_7 = Math.min(score_2_7, score_1_7 + rubble_2_7);
score_2_7 = Math.min(score_2_7, score_1_6 + rubble_2_7);
score_3_7 = Math.min(score_3_7, score_2_7 + rubble_3_7);
score_4_7 = Math.min(score_4_7, score_3_7 + rubble_4_7);
score_5_7 = Math.min(score_5_7, score_4_7 + rubble_5_7);
score_6_7 = Math.min(score_6_7, score_5_7 + rubble_6_7);
score_7_7 = Math.min(score_7_7, score_6_7 + rubble_7_7);
score_7_6 = Math.min(score_7_6, score_7_7 + rubble_7_6);
score_7_6 = Math.min(score_7_6, score_6_7 + rubble_7_6);
score_7_5 = Math.min(score_7_5, score_7_6 + rubble_7_5);
score_7_4 = Math.min(score_7_4, score_7_5 + rubble_7_4);
score_7_5 = Math.min(score_7_5, score_7_4 + rubble_7_5);
score_7_6 = Math.min(score_7_6, score_7_5 + rubble_7_6);
score_7_7 = Math.min(score_7_7, score_7_6 + rubble_7_7);
score_6_7 = Math.min(score_6_7, score_7_7 + rubble_6_7);
score_6_7 = Math.min(score_6_7, score_7_6 + rubble_6_7);
score_5_7 = Math.min(score_5_7, score_6_7 + rubble_5_7);
score_4_7 = Math.min(score_4_7, score_5_7 + rubble_4_7);
score_3_7 = Math.min(score_3_7, score_4_7 + rubble_3_7);
score_2_7 = Math.min(score_2_7, score_3_7 + rubble_2_7);
score_1_7 = Math.min(score_1_7, score_2_7 + rubble_1_7);
score_1_6 = Math.min(score_1_6, score_1_7 + rubble_1_6);
score_1_6 = Math.min(score_1_6, score_2_7 + rubble_1_6);
score_1_5 = Math.min(score_1_5, score_1_6 + rubble_1_5);
score_1_4 = Math.min(score_1_4, score_1_5 + rubble_1_4);
score_6_4 = Math.min(score_6_4, score_7_4 + rubble_6_4);
score_6_4 = Math.min(score_6_4, score_7_5 + rubble_6_4);
score_6_5 = Math.min(score_6_5, score_7_4 + rubble_6_5);
score_6_5 = Math.min(score_6_5, score_7_5 + rubble_6_5);
score_6_5 = Math.min(score_6_5, score_7_6 + rubble_6_5);
score_6_6 = Math.min(score_6_6, score_7_5 + rubble_6_6);
score_6_6 = Math.min(score_6_6, score_7_6 + rubble_6_6);
score_6_6 = Math.min(score_6_6, score_7_7 + rubble_6_6);
score_6_6 = Math.min(score_6_6, score_6_7 + rubble_6_6);
score_6_6 = Math.min(score_6_6, score_5_7 + rubble_6_6);
score_5_6 = Math.min(score_5_6, score_6_7 + rubble_5_6);
score_5_6 = Math.min(score_5_6, score_5_7 + rubble_5_6);
score_5_6 = Math.min(score_5_6, score_4_7 + rubble_5_6);
score_4_6 = Math.min(score_4_6, score_5_7 + rubble_4_6);
score_4_6 = Math.min(score_4_6, score_4_7 + rubble_4_6);
score_4_6 = Math.min(score_4_6, score_3_7 + rubble_4_6);
score_3_6 = Math.min(score_3_6, score_4_7 + rubble_3_6);
score_3_6 = Math.min(score_3_6, score_3_7 + rubble_3_6);
score_3_6 = Math.min(score_3_6, score_2_7 + rubble_3_6);
score_2_6 = Math.min(score_2_6, score_3_7 + rubble_2_6);
score_2_6 = Math.min(score_2_6, score_2_7 + rubble_2_6);
score_2_6 = Math.min(score_2_6, score_1_7 + rubble_2_6);
score_2_6 = Math.min(score_2_6, score_1_6 + rubble_2_6);
score_2_6 = Math.min(score_2_6, score_1_5 + rubble_2_6);
score_2_5 = Math.min(score_2_5, score_1_6 + rubble_2_5);
score_2_5 = Math.min(score_2_5, score_1_5 + rubble_2_5);
score_2_5 = Math.min(score_2_5, score_1_4 + rubble_2_5);
score_2_4 = Math.min(score_2_4, score_1_5 + rubble_2_4);
score_2_4 = Math.min(score_2_4, score_1_4 + rubble_2_4);
score_2_5 = Math.min(score_2_5, score_2_4 + rubble_2_5);
score_2_6 = Math.min(score_2_6, score_2_5 + rubble_2_6);
score_3_6 = Math.min(score_3_6, score_2_6 + rubble_3_6);
score_3_6 = Math.min(score_3_6, score_2_5 + rubble_3_6);
score_4_6 = Math.min(score_4_6, score_3_6 + rubble_4_6);
score_5_6 = Math.min(score_5_6, score_4_6 + rubble_5_6);
score_6_6 = Math.min(score_6_6, score_5_6 + rubble_6_6);
score_6_5 = Math.min(score_6_5, score_6_6 + rubble_6_5);
score_6_5 = Math.min(score_6_5, score_5_6 + rubble_6_5);
score_6_4 = Math.min(score_6_4, score_6_5 + rubble_6_4);
score_6_5 = Math.min(score_6_5, score_6_4 + rubble_6_5);
score_6_6 = Math.min(score_6_6, score_6_5 + rubble_6_6);
score_5_6 = Math.min(score_5_6, score_6_6 + rubble_5_6);
score_5_6 = Math.min(score_5_6, score_6_5 + rubble_5_6);
score_4_6 = Math.min(score_4_6, score_5_6 + rubble_4_6);
score_3_6 = Math.min(score_3_6, score_4_6 + rubble_3_6);
score_2_6 = Math.min(score_2_6, score_3_6 + rubble_2_6);
score_2_5 = Math.min(score_2_5, score_2_6 + rubble_2_5);
score_2_5 = Math.min(score_2_5, score_3_6 + rubble_2_5);
score_2_4 = Math.min(score_2_4, score_2_5 + rubble_2_4);
score_5_4 = Math.min(score_5_4, score_6_4 + rubble_5_4);
score_5_4 = Math.min(score_5_4, score_6_5 + rubble_5_4);
score_5_5 = Math.min(score_5_5, score_6_4 + rubble_5_5);
score_5_5 = Math.min(score_5_5, score_6_5 + rubble_5_5);
score_5_5 = Math.min(score_5_5, score_6_6 + rubble_5_5);
score_5_5 = Math.min(score_5_5, score_5_6 + rubble_5_5);
score_5_5 = Math.min(score_5_5, score_4_6 + rubble_5_5);
score_4_5 = Math.min(score_4_5, score_5_6 + rubble_4_5);
score_4_5 = Math.min(score_4_5, score_4_6 + rubble_4_5);
score_4_5 = Math.min(score_4_5, score_3_6 + rubble_4_5);
score_3_5 = Math.min(score_3_5, score_4_6 + rubble_3_5);
score_3_5 = Math.min(score_3_5, score_3_6 + rubble_3_5);
score_3_5 = Math.min(score_3_5, score_2_6 + rubble_3_5);
score_3_5 = Math.min(score_3_5, score_2_5 + rubble_3_5);
score_3_5 = Math.min(score_3_5, score_2_4 + rubble_3_5);
score_3_4 = Math.min(score_3_4, score_2_5 + rubble_3_4);
score_3_4 = Math.min(score_3_4, score_2_4 + rubble_3_4);
score_3_4 = Math.min(score_3_4, score_5_4 + rubble_3_4);
score_3_5 = Math.min(score_3_5, score_3_4 + rubble_3_5);
score_4_5 = Math.min(score_4_5, score_3_5 + rubble_4_5);
score_4_5 = Math.min(score_4_5, score_3_4 + rubble_4_5);
score_5_5 = Math.min(score_5_5, score_4_5 + rubble_5_5);
score_5_4 = Math.min(score_5_4, score_5_5 + rubble_5_4);
score_5_4 = Math.min(score_5_4, score_4_5 + rubble_5_4);
score_5_4 = Math.min(score_5_4, score_3_5 + rubble_5_4);
score_5_5 = Math.min(score_5_5, score_5_4 + rubble_5_5);
score_4_5 = Math.min(score_4_5, score_5_5 + rubble_4_5);
score_4_5 = Math.min(score_4_5, score_5_4 + rubble_4_5);
score_3_5 = Math.min(score_3_5, score_4_5 + rubble_3_5);
score_3_4 = Math.min(score_3_4, score_3_5 + rubble_3_4);
score_3_4 = Math.min(score_3_4, score_4_5 + rubble_3_4);
score_6_4 = Math.min(score_6_4, score_5_4 + rubble_6_4);
score_6_5 = Math.min(score_6_5, score_5_4 + rubble_6_5);
score_6_4 = Math.min(score_6_4, score_5_5 + rubble_6_4);
score_6_5 = Math.min(score_6_5, score_5_5 + rubble_6_5);
score_6_6 = Math.min(score_6_6, score_5_5 + rubble_6_6);
score_5_6 = Math.min(score_5_6, score_5_5 + rubble_5_6);
score_4_6 = Math.min(score_4_6, score_5_5 + rubble_4_6);
score_5_6 = Math.min(score_5_6, score_4_5 + rubble_5_6);
score_4_6 = Math.min(score_4_6, score_4_5 + rubble_4_6);
score_3_6 = Math.min(score_3_6, score_4_5 + rubble_3_6);
score_4_6 = Math.min(score_4_6, score_3_5 + rubble_4_6);
score_3_6 = Math.min(score_3_6, score_3_5 + rubble_3_6);
score_2_6 = Math.min(score_2_6, score_3_5 + rubble_2_6);
score_2_5 = Math.min(score_2_5, score_3_5 + rubble_2_5);
score_2_4 = Math.min(score_2_4, score_3_5 + rubble_2_4);
score_2_5 = Math.min(score_2_5, score_3_4 + rubble_2_5);
score_2_4 = Math.min(score_2_4, score_3_4 + rubble_2_4);
score_7_4 = Math.min(score_7_4, score_6_4 + rubble_7_4);
score_7_5 = Math.min(score_7_5, score_6_4 + rubble_7_5);
score_7_4 = Math.min(score_7_4, score_6_5 + rubble_7_4);
score_7_5 = Math.min(score_7_5, score_6_5 + rubble_7_5);
score_7_6 = Math.min(score_7_6, score_6_5 + rubble_7_6);
score_7_5 = Math.min(score_7_5, score_6_6 + rubble_7_5);
score_7_6 = Math.min(score_7_6, score_6_6 + rubble_7_6);
score_7_7 = Math.min(score_7_7, score_6_6 + rubble_7_7);
score_6_7 = Math.min(score_6_7, score_6_6 + rubble_6_7);
score_5_7 = Math.min(score_5_7, score_6_6 + rubble_5_7);
score_6_7 = Math.min(score_6_7, score_5_6 + rubble_6_7);
score_5_7 = Math.min(score_5_7, score_5_6 + rubble_5_7);
score_4_7 = Math.min(score_4_7, score_5_6 + rubble_4_7);
score_5_7 = Math.min(score_5_7, score_4_6 + rubble_5_7);
score_4_7 = Math.min(score_4_7, score_4_6 + rubble_4_7);
score_3_7 = Math.min(score_3_7, score_4_6 + rubble_3_7);
score_4_7 = Math.min(score_4_7, score_3_6 + rubble_4_7);
score_3_7 = Math.min(score_3_7, score_3_6 + rubble_3_7);
score_2_7 = Math.min(score_2_7, score_3_6 + rubble_2_7);
score_3_7 = Math.min(score_3_7, score_2_6 + rubble_3_7);
score_2_7 = Math.min(score_2_7, score_2_6 + rubble_2_7);
score_1_7 = Math.min(score_1_7, score_2_6 + rubble_1_7);
score_1_6 = Math.min(score_1_6, score_2_6 + rubble_1_6);
score_1_5 = Math.min(score_1_5, score_2_6 + rubble_1_5);
score_1_6 = Math.min(score_1_6, score_2_5 + rubble_1_6);
score_1_5 = Math.min(score_1_5, score_2_5 + rubble_1_5);
score_1_4 = Math.min(score_1_4, score_2_5 + rubble_1_4);
score_1_5 = Math.min(score_1_5, score_2_4 + rubble_1_5);
score_1_4 = Math.min(score_1_4, score_2_4 + rubble_1_4);
score_8_4 = Math.min(score_8_4, score_7_4 + rubble_8_4);
score_8_5 = Math.min(score_8_5, score_7_4 + rubble_8_5);
score_8_4 = Math.min(score_8_4, score_7_5 + rubble_8_4);
score_8_5 = Math.min(score_8_5, score_7_5 + rubble_8_5);
score_8_6 = Math.min(score_8_6, score_7_5 + rubble_8_6);
score_8_5 = Math.min(score_8_5, score_7_6 + rubble_8_5);
score_8_6 = Math.min(score_8_6, score_7_6 + rubble_8_6);
score_8_6 = Math.min(score_8_6, score_7_7 + rubble_8_6);
score_6_8 = Math.min(score_6_8, score_7_7 + rubble_6_8);
score_6_8 = Math.min(score_6_8, score_6_7 + rubble_6_8);
score_5_8 = Math.min(score_5_8, score_6_7 + rubble_5_8);
score_6_8 = Math.min(score_6_8, score_5_7 + rubble_6_8);
score_5_8 = Math.min(score_5_8, score_5_7 + rubble_5_8);
score_4_8 = Math.min(score_4_8, score_5_7 + rubble_4_8);
score_5_8 = Math.min(score_5_8, score_4_7 + rubble_5_8);
score_4_8 = Math.min(score_4_8, score_4_7 + rubble_4_8);
score_3_8 = Math.min(score_3_8, score_4_7 + rubble_3_8);
score_4_8 = Math.min(score_4_8, score_3_7 + rubble_4_8);
score_3_8 = Math.min(score_3_8, score_3_7 + rubble_3_8);
score_2_8 = Math.min(score_2_8, score_3_7 + rubble_2_8);
score_3_8 = Math.min(score_3_8, score_2_7 + rubble_3_8);
score_2_8 = Math.min(score_2_8, score_2_7 + rubble_2_8);
score_2_8 = Math.min(score_2_8, score_1_7 + rubble_2_8);
score_0_6 = Math.min(score_0_6, score_1_7 + rubble_0_6);
score_0_6 = Math.min(score_0_6, score_1_6 + rubble_0_6);
score_0_5 = Math.min(score_0_5, score_1_6 + rubble_0_5);
score_0_6 = Math.min(score_0_6, score_1_5 + rubble_0_6);
score_0_5 = Math.min(score_0_5, score_1_5 + rubble_0_5);
score_0_4 = Math.min(score_0_4, score_1_5 + rubble_0_4);
score_0_5 = Math.min(score_0_5, score_1_4 + rubble_0_5);
score_0_4 = Math.min(score_0_4, score_1_4 + rubble_0_4);
Direction go = Direction.CENTER;
int best = Integer.MAX_VALUE;
if (score_3_4 < best) {
best = score_3_4;
go = cur.directionTo(loc_3_4);
}
if (score_3_5 < best) {
best = score_3_5;
go = cur.directionTo(loc_3_5);
}
if (score_4_5 < best) {
best = score_4_5;
go = cur.directionTo(loc_4_5);
}
if (score_5_5 < best) {
best = score_5_5;
go = cur.directionTo(loc_5_5);
}
if (score_5_4 < best) {
best = score_5_4;
go = cur.directionTo(loc_5_4);
}
if (rc.canMove(go)) rc.move(go);
if (cur.equals(new MapLocation(27, 25))) { System.out.println(score_0_4 + " " + "score_0_4");
System.out.println(score_0_5 + " " + "score_0_5");
System.out.println(score_0_6 + " " + "score_0_6");
System.out.println(score_2_8 + " " + "score_2_8");
System.out.println(score_3_8 + " " + "score_3_8");
System.out.println(score_4_8 + " " + "score_4_8");
System.out.println(score_5_8 + " " + "score_5_8");
System.out.println(score_6_8 + " " + "score_6_8");
System.out.println(score_8_6 + " " + "score_8_6");
System.out.println(score_8_5 + " " + "score_8_5");
System.out.println(score_8_4 + " " + "score_8_4");

System.out.println(score_1_4 + " " + "score_1_4");
System.out.println(score_1_5 + " " + "score_1_5");
System.out.println(score_1_6 + " " + "score_1_6");
System.out.println(score_1_7 + " " + "score_1_7");
System.out.println(score_2_7 + " " + "score_2_7");
System.out.println(score_3_7 + " " + "score_3_7");
System.out.println(score_4_7 + " " + "score_4_7");
System.out.println(score_5_7 + " " + "score_5_7");
System.out.println(score_6_7 + " " + "score_6_7");
System.out.println(score_7_7 + " " + "score_7_7");
System.out.println(score_7_6 + " " + "score_7_6");
System.out.println(score_7_5 + " " + "score_7_5");
System.out.println(score_7_4 + " " + "score_7_4");

System.out.println(score_2_4 + " " + "score_2_4");
System.out.println(score_2_5 + " " + "score_2_5");
System.out.println(score_2_6 + " " + "score_2_6");
System.out.println(score_3_6 + " " + "score_3_6");
System.out.println(score_4_6 + " " + "score_4_6");
System.out.println(score_5_6 + " " + "score_5_6");
System.out.println(score_6_6 + " " + "score_6_6");
System.out.println(score_6_5 + " " + "score_6_5");
System.out.println(score_6_4 + " " + "score_6_4");

System.out.println(score_3_4 + " " + "score_3_4");
System.out.println(score_3_5 + " " + "score_3_5");
System.out.println(score_4_5 + " " + "score_4_5");
System.out.println(score_5_5 + " " + "score_5_5");
System.out.println(score_5_4 + " " + "score_5_4");

}
}
static void WEST(RobotController rc, MapLocation destination) throws GameActionException {
MapLocation cur = rc.getLocation();
MapLocation loc_4_0 = cur.translate(0, -4);
MapLocation loc_3_0 = cur.translate(-1, -4);
MapLocation loc_2_0 = cur.translate(-2, -4);
MapLocation loc_0_2 = cur.translate(-4, -2);
MapLocation loc_0_3 = cur.translate(-4, -1);
MapLocation loc_0_4 = cur.translate(-4, 0);
MapLocation loc_0_5 = cur.translate(-4, 1);
MapLocation loc_0_6 = cur.translate(-4, 2);
MapLocation loc_2_8 = cur.translate(-2, 4);
MapLocation loc_3_8 = cur.translate(-1, 4);
MapLocation loc_4_8 = cur.translate(0, 4);
MapLocation loc_4_1 = cur.translate(0, -3);
MapLocation loc_3_1 = cur.translate(-1, -3);
MapLocation loc_2_1 = cur.translate(-2, -3);
MapLocation loc_1_1 = cur.translate(-3, -3);
MapLocation loc_1_2 = cur.translate(-3, -2);
MapLocation loc_1_3 = cur.translate(-3, -1);
MapLocation loc_1_4 = cur.translate(-3, 0);
MapLocation loc_1_5 = cur.translate(-3, 1);
MapLocation loc_1_6 = cur.translate(-3, 2);
MapLocation loc_1_7 = cur.translate(-3, 3);
MapLocation loc_2_7 = cur.translate(-2, 3);
MapLocation loc_3_7 = cur.translate(-1, 3);
MapLocation loc_4_7 = cur.translate(0, 3);
MapLocation loc_4_2 = cur.translate(0, -2);
MapLocation loc_3_2 = cur.translate(-1, -2);
MapLocation loc_2_2 = cur.translate(-2, -2);
MapLocation loc_2_3 = cur.translate(-2, -1);
MapLocation loc_2_4 = cur.translate(-2, 0);
MapLocation loc_2_5 = cur.translate(-2, 1);
MapLocation loc_2_6 = cur.translate(-2, 2);
MapLocation loc_3_6 = cur.translate(-1, 2);
MapLocation loc_4_6 = cur.translate(0, 2);
MapLocation loc_4_3 = cur.translate(0, -1);
MapLocation loc_3_3 = cur.translate(-1, -1);
MapLocation loc_3_4 = cur.translate(-1, 0);
MapLocation loc_3_5 = cur.translate(-1, 1);
MapLocation loc_4_5 = cur.translate(0, 1);
int rubble_4_0 = (rc.canSenseLocation(loc_4_0) && !rc.isLocationOccupied(loc_4_0))? 20 + 2 * rc.senseRubble(loc_4_0) : 100000;
if (loc_4_0.equals(destination)) { rubble_4_0 = -0; }int rubble_3_0 = (rc.canSenseLocation(loc_3_0) && !rc.isLocationOccupied(loc_3_0))? 20 + 2 * rc.senseRubble(loc_3_0) : 100000;
if (loc_3_0.equals(destination)) { rubble_3_0 = -0; }int rubble_2_0 = (rc.canSenseLocation(loc_2_0) && !rc.isLocationOccupied(loc_2_0))? 20 + 2 * rc.senseRubble(loc_2_0) : 100000;
if (loc_2_0.equals(destination)) { rubble_2_0 = -0; }int rubble_0_2 = (rc.canSenseLocation(loc_0_2) && !rc.isLocationOccupied(loc_0_2))? 20 + 2 * rc.senseRubble(loc_0_2) : 100000;
if (loc_0_2.equals(destination)) { rubble_0_2 = -0; }int rubble_0_3 = (rc.canSenseLocation(loc_0_3) && !rc.isLocationOccupied(loc_0_3))? 20 + 2 * rc.senseRubble(loc_0_3) : 100000;
if (loc_0_3.equals(destination)) { rubble_0_3 = -0; }int rubble_0_4 = (rc.canSenseLocation(loc_0_4) && !rc.isLocationOccupied(loc_0_4))? 20 + 2 * rc.senseRubble(loc_0_4) : 100000;
if (loc_0_4.equals(destination)) { rubble_0_4 = -0; }int rubble_0_5 = (rc.canSenseLocation(loc_0_5) && !rc.isLocationOccupied(loc_0_5))? 20 + 2 * rc.senseRubble(loc_0_5) : 100000;
if (loc_0_5.equals(destination)) { rubble_0_5 = -0; }int rubble_0_6 = (rc.canSenseLocation(loc_0_6) && !rc.isLocationOccupied(loc_0_6))? 20 + 2 * rc.senseRubble(loc_0_6) : 100000;
if (loc_0_6.equals(destination)) { rubble_0_6 = -0; }int rubble_2_8 = (rc.canSenseLocation(loc_2_8) && !rc.isLocationOccupied(loc_2_8))? 20 + 2 * rc.senseRubble(loc_2_8) : 100000;
if (loc_2_8.equals(destination)) { rubble_2_8 = -0; }int rubble_3_8 = (rc.canSenseLocation(loc_3_8) && !rc.isLocationOccupied(loc_3_8))? 20 + 2 * rc.senseRubble(loc_3_8) : 100000;
if (loc_3_8.equals(destination)) { rubble_3_8 = -0; }int rubble_4_8 = (rc.canSenseLocation(loc_4_8) && !rc.isLocationOccupied(loc_4_8))? 20 + 2 * rc.senseRubble(loc_4_8) : 100000;
if (loc_4_8.equals(destination)) { rubble_4_8 = -0; }int rubble_4_1 = (rc.canSenseLocation(loc_4_1) && !rc.isLocationOccupied(loc_4_1))? 20 + 2 * rc.senseRubble(loc_4_1) : 100000;
if (loc_4_1.equals(destination)) { rubble_4_1 = -0; }int rubble_3_1 = (rc.canSenseLocation(loc_3_1) && !rc.isLocationOccupied(loc_3_1))? 20 + 2 * rc.senseRubble(loc_3_1) : 100000;
if (loc_3_1.equals(destination)) { rubble_3_1 = -0; }int rubble_2_1 = (rc.canSenseLocation(loc_2_1) && !rc.isLocationOccupied(loc_2_1))? 20 + 2 * rc.senseRubble(loc_2_1) : 100000;
if (loc_2_1.equals(destination)) { rubble_2_1 = -0; }int rubble_1_1 = (rc.canSenseLocation(loc_1_1) && !rc.isLocationOccupied(loc_1_1))? 20 + 2 * rc.senseRubble(loc_1_1) : 100000;
if (loc_1_1.equals(destination)) { rubble_1_1 = -0; }int rubble_1_2 = (rc.canSenseLocation(loc_1_2) && !rc.isLocationOccupied(loc_1_2))? 20 + 2 * rc.senseRubble(loc_1_2) : 100000;
if (loc_1_2.equals(destination)) { rubble_1_2 = -0; }int rubble_1_3 = (rc.canSenseLocation(loc_1_3) && !rc.isLocationOccupied(loc_1_3))? 20 + 2 * rc.senseRubble(loc_1_3) : 100000;
if (loc_1_3.equals(destination)) { rubble_1_3 = -0; }int rubble_1_4 = (rc.canSenseLocation(loc_1_4) && !rc.isLocationOccupied(loc_1_4))? 20 + 2 * rc.senseRubble(loc_1_4) : 100000;
if (loc_1_4.equals(destination)) { rubble_1_4 = -0; }int rubble_1_5 = (rc.canSenseLocation(loc_1_5) && !rc.isLocationOccupied(loc_1_5))? 20 + 2 * rc.senseRubble(loc_1_5) : 100000;
if (loc_1_5.equals(destination)) { rubble_1_5 = -0; }int rubble_1_6 = (rc.canSenseLocation(loc_1_6) && !rc.isLocationOccupied(loc_1_6))? 20 + 2 * rc.senseRubble(loc_1_6) : 100000;
if (loc_1_6.equals(destination)) { rubble_1_6 = -0; }int rubble_1_7 = (rc.canSenseLocation(loc_1_7) && !rc.isLocationOccupied(loc_1_7))? 20 + 2 * rc.senseRubble(loc_1_7) : 100000;
if (loc_1_7.equals(destination)) { rubble_1_7 = -0; }int rubble_2_7 = (rc.canSenseLocation(loc_2_7) && !rc.isLocationOccupied(loc_2_7))? 20 + 2 * rc.senseRubble(loc_2_7) : 100000;
if (loc_2_7.equals(destination)) { rubble_2_7 = -0; }int rubble_3_7 = (rc.canSenseLocation(loc_3_7) && !rc.isLocationOccupied(loc_3_7))? 20 + 2 * rc.senseRubble(loc_3_7) : 100000;
if (loc_3_7.equals(destination)) { rubble_3_7 = -0; }int rubble_4_7 = (rc.canSenseLocation(loc_4_7) && !rc.isLocationOccupied(loc_4_7))? 20 + 2 * rc.senseRubble(loc_4_7) : 100000;
if (loc_4_7.equals(destination)) { rubble_4_7 = -0; }int rubble_4_2 = (rc.canSenseLocation(loc_4_2) && !rc.isLocationOccupied(loc_4_2))? 20 + 2 * rc.senseRubble(loc_4_2) : 100000;
if (loc_4_2.equals(destination)) { rubble_4_2 = -0; }int rubble_3_2 = (rc.canSenseLocation(loc_3_2) && !rc.isLocationOccupied(loc_3_2))? 20 + 2 * rc.senseRubble(loc_3_2) : 100000;
if (loc_3_2.equals(destination)) { rubble_3_2 = -0; }int rubble_2_2 = (rc.canSenseLocation(loc_2_2) && !rc.isLocationOccupied(loc_2_2))? 20 + 2 * rc.senseRubble(loc_2_2) : 100000;
if (loc_2_2.equals(destination)) { rubble_2_2 = -0; }int rubble_2_3 = (rc.canSenseLocation(loc_2_3) && !rc.isLocationOccupied(loc_2_3))? 20 + 2 * rc.senseRubble(loc_2_3) : 100000;
if (loc_2_3.equals(destination)) { rubble_2_3 = -0; }int rubble_2_4 = (rc.canSenseLocation(loc_2_4) && !rc.isLocationOccupied(loc_2_4))? 20 + 2 * rc.senseRubble(loc_2_4) : 100000;
if (loc_2_4.equals(destination)) { rubble_2_4 = -0; }int rubble_2_5 = (rc.canSenseLocation(loc_2_5) && !rc.isLocationOccupied(loc_2_5))? 20 + 2 * rc.senseRubble(loc_2_5) : 100000;
if (loc_2_5.equals(destination)) { rubble_2_5 = -0; }int rubble_2_6 = (rc.canSenseLocation(loc_2_6) && !rc.isLocationOccupied(loc_2_6))? 20 + 2 * rc.senseRubble(loc_2_6) : 100000;
if (loc_2_6.equals(destination)) { rubble_2_6 = -0; }int rubble_3_6 = (rc.canSenseLocation(loc_3_6) && !rc.isLocationOccupied(loc_3_6))? 20 + 2 * rc.senseRubble(loc_3_6) : 100000;
if (loc_3_6.equals(destination)) { rubble_3_6 = -0; }int rubble_4_6 = (rc.canSenseLocation(loc_4_6) && !rc.isLocationOccupied(loc_4_6))? 20 + 2 * rc.senseRubble(loc_4_6) : 100000;
if (loc_4_6.equals(destination)) { rubble_4_6 = -0; }int rubble_4_3 = (rc.canSenseLocation(loc_4_3) && !rc.isLocationOccupied(loc_4_3))? 20 + 2 * rc.senseRubble(loc_4_3) : 100000;
if (loc_4_3.equals(destination)) { rubble_4_3 = -0; }int rubble_3_3 = (rc.canSenseLocation(loc_3_3) && !rc.isLocationOccupied(loc_3_3))? 20 + 2 * rc.senseRubble(loc_3_3) : 100000;
if (loc_3_3.equals(destination)) { rubble_3_3 = -0; }int rubble_3_4 = (rc.canSenseLocation(loc_3_4) && !rc.isLocationOccupied(loc_3_4))? 20 + 2 * rc.senseRubble(loc_3_4) : 100000;
if (loc_3_4.equals(destination)) { rubble_3_4 = -0; }int rubble_3_5 = (rc.canSenseLocation(loc_3_5) && !rc.isLocationOccupied(loc_3_5))? 20 + 2 * rc.senseRubble(loc_3_5) : 100000;
if (loc_3_5.equals(destination)) { rubble_3_5 = -0; }int rubble_4_5 = (rc.canSenseLocation(loc_4_5) && !rc.isLocationOccupied(loc_4_5))? 20 + 2 * rc.senseRubble(loc_4_5) : 100000;
if (loc_4_5.equals(destination)) { rubble_4_5 = -0; }int score_4_0 = 1000000000;
int score_3_0 = 1000000000;
int score_2_0 = 1000000000;
int score_0_2 = 1000000000;
int score_0_3 = 1000000000;
int score_0_4 = 1000000000;
int score_0_5 = 1000000000;
int score_0_6 = 1000000000;
int score_2_8 = 1000000000;
int score_3_8 = 1000000000;
int score_4_8 = 1000000000;
int score_4_1 = 1000000000;
int score_3_1 = 1000000000;
int score_2_1 = 1000000000;
int score_1_1 = 1000000000;
int score_1_2 = 1000000000;
int score_1_3 = 1000000000;
int score_1_4 = 1000000000;
int score_1_5 = 1000000000;
int score_1_6 = 1000000000;
int score_1_7 = 1000000000;
int score_2_7 = 1000000000;
int score_3_7 = 1000000000;
int score_4_7 = 1000000000;
int score_4_2 = 1000000000;
int score_3_2 = 1000000000;
int score_2_2 = 1000000000;
int score_2_3 = 1000000000;
int score_2_4 = 1000000000;
int score_2_5 = 1000000000;
int score_2_6 = 1000000000;
int score_3_6 = 1000000000;
int score_4_6 = 1000000000;
int score_4_3 = 1000000000;
int score_3_3 = 1000000000;
int score_3_4 = 1000000000;
int score_3_5 = 1000000000;
int score_4_5 = 1000000000;
score_4_0 = man(loc_4_0, destination) * (20 + 0) + rubble_4_0;
score_3_0 = man(loc_3_0, destination) * (20 + 0) + rubble_3_0;
score_2_0 = man(loc_2_0, destination) * (20 + 0) + rubble_2_0;
score_0_2 = man(loc_0_2, destination) * (20 + 0) + rubble_0_2;
score_0_3 = man(loc_0_3, destination) * (20 + 0) + rubble_0_3;
score_0_4 = man(loc_0_4, destination) * (20 + 0) + rubble_0_4;
score_0_5 = man(loc_0_5, destination) * (20 + 0) + rubble_0_5;
score_0_6 = man(loc_0_6, destination) * (20 + 0) + rubble_0_6;
score_2_8 = man(loc_2_8, destination) * (20 + 0) + rubble_2_8;
score_3_8 = man(loc_3_8, destination) * (20 + 0) + rubble_3_8;
score_4_8 = man(loc_4_8, destination) * (20 + 0) + rubble_4_8;
score_3_0 = Math.min(score_3_0, score_4_0 + rubble_3_0);
score_2_0 = Math.min(score_2_0, score_3_0 + rubble_2_0);
score_0_3 = Math.min(score_0_3, score_0_2 + rubble_0_3);
score_0_4 = Math.min(score_0_4, score_0_3 + rubble_0_4);
score_0_5 = Math.min(score_0_5, score_0_4 + rubble_0_5);
score_0_6 = Math.min(score_0_6, score_0_5 + rubble_0_6);
score_3_8 = Math.min(score_3_8, score_2_8 + rubble_3_8);
score_4_8 = Math.min(score_4_8, score_3_8 + rubble_4_8);
score_3_8 = Math.min(score_3_8, score_4_8 + rubble_3_8);
score_2_8 = Math.min(score_2_8, score_3_8 + rubble_2_8);
score_0_5 = Math.min(score_0_5, score_0_6 + rubble_0_5);
score_0_4 = Math.min(score_0_4, score_0_5 + rubble_0_4);
score_0_3 = Math.min(score_0_3, score_0_4 + rubble_0_3);
score_0_2 = Math.min(score_0_2, score_0_3 + rubble_0_2);
score_3_0 = Math.min(score_3_0, score_2_0 + rubble_3_0);
score_4_0 = Math.min(score_4_0, score_3_0 + rubble_4_0);
score_4_7 = Math.min(score_4_7, score_4_8 + rubble_4_7);
score_4_7 = Math.min(score_4_7, score_3_8 + rubble_4_7);
score_3_7 = Math.min(score_3_7, score_4_8 + rubble_3_7);
score_3_7 = Math.min(score_3_7, score_3_8 + rubble_3_7);
score_3_7 = Math.min(score_3_7, score_2_8 + rubble_3_7);
score_2_7 = Math.min(score_2_7, score_3_8 + rubble_2_7);
score_2_7 = Math.min(score_2_7, score_2_8 + rubble_2_7);
score_1_7 = Math.min(score_1_7, score_2_8 + rubble_1_7);
score_1_7 = Math.min(score_1_7, score_0_6 + rubble_1_7);
score_1_6 = Math.min(score_1_6, score_0_6 + rubble_1_6);
score_1_6 = Math.min(score_1_6, score_0_5 + rubble_1_6);
score_1_5 = Math.min(score_1_5, score_0_6 + rubble_1_5);
score_1_5 = Math.min(score_1_5, score_0_5 + rubble_1_5);
score_1_5 = Math.min(score_1_5, score_0_4 + rubble_1_5);
score_1_4 = Math.min(score_1_4, score_0_5 + rubble_1_4);
score_1_4 = Math.min(score_1_4, score_0_4 + rubble_1_4);
score_1_4 = Math.min(score_1_4, score_0_3 + rubble_1_4);
score_1_3 = Math.min(score_1_3, score_0_4 + rubble_1_3);
score_1_3 = Math.min(score_1_3, score_0_3 + rubble_1_3);
score_1_3 = Math.min(score_1_3, score_0_2 + rubble_1_3);
score_1_2 = Math.min(score_1_2, score_0_3 + rubble_1_2);
score_1_2 = Math.min(score_1_2, score_0_2 + rubble_1_2);
score_1_1 = Math.min(score_1_1, score_0_2 + rubble_1_1);
score_1_1 = Math.min(score_1_1, score_2_0 + rubble_1_1);
score_2_1 = Math.min(score_2_1, score_2_0 + rubble_2_1);
score_2_1 = Math.min(score_2_1, score_3_0 + rubble_2_1);
score_3_1 = Math.min(score_3_1, score_2_0 + rubble_3_1);
score_3_1 = Math.min(score_3_1, score_3_0 + rubble_3_1);
score_3_1 = Math.min(score_3_1, score_4_0 + rubble_3_1);
score_4_1 = Math.min(score_4_1, score_3_0 + rubble_4_1);
score_4_1 = Math.min(score_4_1, score_4_0 + rubble_4_1);
score_3_1 = Math.min(score_3_1, score_4_1 + rubble_3_1);
score_2_1 = Math.min(score_2_1, score_3_1 + rubble_2_1);
score_1_1 = Math.min(score_1_1, score_2_1 + rubble_1_1);
score_1_2 = Math.min(score_1_2, score_1_1 + rubble_1_2);
score_1_2 = Math.min(score_1_2, score_2_1 + rubble_1_2);
score_1_3 = Math.min(score_1_3, score_1_2 + rubble_1_3);
score_1_4 = Math.min(score_1_4, score_1_3 + rubble_1_4);
score_1_5 = Math.min(score_1_5, score_1_4 + rubble_1_5);
score_1_6 = Math.min(score_1_6, score_1_5 + rubble_1_6);
score_1_7 = Math.min(score_1_7, score_1_6 + rubble_1_7);
score_2_7 = Math.min(score_2_7, score_1_7 + rubble_2_7);
score_2_7 = Math.min(score_2_7, score_1_6 + rubble_2_7);
score_3_7 = Math.min(score_3_7, score_2_7 + rubble_3_7);
score_4_7 = Math.min(score_4_7, score_3_7 + rubble_4_7);
score_3_7 = Math.min(score_3_7, score_4_7 + rubble_3_7);
score_2_7 = Math.min(score_2_7, score_3_7 + rubble_2_7);
score_1_7 = Math.min(score_1_7, score_2_7 + rubble_1_7);
score_1_6 = Math.min(score_1_6, score_1_7 + rubble_1_6);
score_1_6 = Math.min(score_1_6, score_2_7 + rubble_1_6);
score_1_5 = Math.min(score_1_5, score_1_6 + rubble_1_5);
score_1_4 = Math.min(score_1_4, score_1_5 + rubble_1_4);
score_1_3 = Math.min(score_1_3, score_1_4 + rubble_1_3);
score_1_2 = Math.min(score_1_2, score_1_3 + rubble_1_2);
score_1_1 = Math.min(score_1_1, score_1_2 + rubble_1_1);
score_2_1 = Math.min(score_2_1, score_1_1 + rubble_2_1);
score_2_1 = Math.min(score_2_1, score_1_2 + rubble_2_1);
score_3_1 = Math.min(score_3_1, score_2_1 + rubble_3_1);
score_4_1 = Math.min(score_4_1, score_3_1 + rubble_4_1);
score_4_6 = Math.min(score_4_6, score_4_7 + rubble_4_6);
score_4_6 = Math.min(score_4_6, score_3_7 + rubble_4_6);
score_3_6 = Math.min(score_3_6, score_4_7 + rubble_3_6);
score_3_6 = Math.min(score_3_6, score_3_7 + rubble_3_6);
score_3_6 = Math.min(score_3_6, score_2_7 + rubble_3_6);
score_2_6 = Math.min(score_2_6, score_3_7 + rubble_2_6);
score_2_6 = Math.min(score_2_6, score_2_7 + rubble_2_6);
score_2_6 = Math.min(score_2_6, score_1_7 + rubble_2_6);
score_2_6 = Math.min(score_2_6, score_1_6 + rubble_2_6);
score_2_6 = Math.min(score_2_6, score_1_5 + rubble_2_6);
score_2_5 = Math.min(score_2_5, score_1_6 + rubble_2_5);
score_2_5 = Math.min(score_2_5, score_1_5 + rubble_2_5);
score_2_5 = Math.min(score_2_5, score_1_4 + rubble_2_5);
score_2_4 = Math.min(score_2_4, score_1_5 + rubble_2_4);
score_2_4 = Math.min(score_2_4, score_1_4 + rubble_2_4);
score_2_4 = Math.min(score_2_4, score_1_3 + rubble_2_4);
score_2_3 = Math.min(score_2_3, score_1_4 + rubble_2_3);
score_2_3 = Math.min(score_2_3, score_1_3 + rubble_2_3);
score_2_3 = Math.min(score_2_3, score_1_2 + rubble_2_3);
score_2_2 = Math.min(score_2_2, score_1_3 + rubble_2_2);
score_2_2 = Math.min(score_2_2, score_1_2 + rubble_2_2);
score_2_2 = Math.min(score_2_2, score_1_1 + rubble_2_2);
score_2_2 = Math.min(score_2_2, score_2_1 + rubble_2_2);
score_2_2 = Math.min(score_2_2, score_3_1 + rubble_2_2);
score_3_2 = Math.min(score_3_2, score_2_1 + rubble_3_2);
score_3_2 = Math.min(score_3_2, score_3_1 + rubble_3_2);
score_3_2 = Math.min(score_3_2, score_4_1 + rubble_3_2);
score_4_2 = Math.min(score_4_2, score_3_1 + rubble_4_2);
score_4_2 = Math.min(score_4_2, score_4_1 + rubble_4_2);
score_3_2 = Math.min(score_3_2, score_4_2 + rubble_3_2);
score_2_2 = Math.min(score_2_2, score_3_2 + rubble_2_2);
score_2_3 = Math.min(score_2_3, score_2_2 + rubble_2_3);
score_2_3 = Math.min(score_2_3, score_3_2 + rubble_2_3);
score_2_4 = Math.min(score_2_4, score_2_3 + rubble_2_4);
score_2_5 = Math.min(score_2_5, score_2_4 + rubble_2_5);
score_2_6 = Math.min(score_2_6, score_2_5 + rubble_2_6);
score_3_6 = Math.min(score_3_6, score_2_6 + rubble_3_6);
score_3_6 = Math.min(score_3_6, score_2_5 + rubble_3_6);
score_4_6 = Math.min(score_4_6, score_3_6 + rubble_4_6);
score_3_6 = Math.min(score_3_6, score_4_6 + rubble_3_6);
score_2_6 = Math.min(score_2_6, score_3_6 + rubble_2_6);
score_2_5 = Math.min(score_2_5, score_2_6 + rubble_2_5);
score_2_5 = Math.min(score_2_5, score_3_6 + rubble_2_5);
score_2_4 = Math.min(score_2_4, score_2_5 + rubble_2_4);
score_2_3 = Math.min(score_2_3, score_2_4 + rubble_2_3);
score_2_2 = Math.min(score_2_2, score_2_3 + rubble_2_2);
score_3_2 = Math.min(score_3_2, score_2_2 + rubble_3_2);
score_3_2 = Math.min(score_3_2, score_2_3 + rubble_3_2);
score_4_2 = Math.min(score_4_2, score_3_2 + rubble_4_2);
score_4_5 = Math.min(score_4_5, score_4_6 + rubble_4_5);
score_4_5 = Math.min(score_4_5, score_3_6 + rubble_4_5);
score_3_5 = Math.min(score_3_5, score_4_6 + rubble_3_5);
score_3_5 = Math.min(score_3_5, score_3_6 + rubble_3_5);
score_3_5 = Math.min(score_3_5, score_2_6 + rubble_3_5);
score_3_5 = Math.min(score_3_5, score_2_5 + rubble_3_5);
score_3_5 = Math.min(score_3_5, score_2_4 + rubble_3_5);
score_3_4 = Math.min(score_3_4, score_2_5 + rubble_3_4);
score_3_4 = Math.min(score_3_4, score_2_4 + rubble_3_4);
score_3_4 = Math.min(score_3_4, score_2_3 + rubble_3_4);
score_3_3 = Math.min(score_3_3, score_2_4 + rubble_3_3);
score_3_3 = Math.min(score_3_3, score_2_3 + rubble_3_3);
score_3_3 = Math.min(score_3_3, score_2_2 + rubble_3_3);
score_3_3 = Math.min(score_3_3, score_3_2 + rubble_3_3);
score_3_3 = Math.min(score_3_3, score_4_2 + rubble_3_3);
score_4_3 = Math.min(score_4_3, score_3_2 + rubble_4_3);
score_4_3 = Math.min(score_4_3, score_4_2 + rubble_4_3);
score_4_3 = Math.min(score_4_3, score_4_5 + rubble_4_3);
score_3_3 = Math.min(score_3_3, score_4_3 + rubble_3_3);
score_3_4 = Math.min(score_3_4, score_3_3 + rubble_3_4);
score_3_4 = Math.min(score_3_4, score_4_3 + rubble_3_4);
score_3_5 = Math.min(score_3_5, score_3_4 + rubble_3_5);
score_4_5 = Math.min(score_4_5, score_3_5 + rubble_4_5);
score_4_5 = Math.min(score_4_5, score_3_4 + rubble_4_5);
score_4_5 = Math.min(score_4_5, score_3_3 + rubble_4_5);
score_3_5 = Math.min(score_3_5, score_4_5 + rubble_3_5);
score_3_4 = Math.min(score_3_4, score_3_5 + rubble_3_4);
score_3_4 = Math.min(score_3_4, score_4_5 + rubble_3_4);
score_3_3 = Math.min(score_3_3, score_3_4 + rubble_3_3);
score_4_3 = Math.min(score_4_3, score_3_3 + rubble_4_3);
score_4_3 = Math.min(score_4_3, score_3_4 + rubble_4_3);
score_4_6 = Math.min(score_4_6, score_4_5 + rubble_4_6);
score_3_6 = Math.min(score_3_6, score_4_5 + rubble_3_6);
score_4_6 = Math.min(score_4_6, score_3_5 + rubble_4_6);
score_3_6 = Math.min(score_3_6, score_3_5 + rubble_3_6);
score_2_6 = Math.min(score_2_6, score_3_5 + rubble_2_6);
score_2_5 = Math.min(score_2_5, score_3_5 + rubble_2_5);
score_2_4 = Math.min(score_2_4, score_3_5 + rubble_2_4);
score_2_5 = Math.min(score_2_5, score_3_4 + rubble_2_5);
score_2_4 = Math.min(score_2_4, score_3_4 + rubble_2_4);
score_2_3 = Math.min(score_2_3, score_3_4 + rubble_2_3);
score_2_4 = Math.min(score_2_4, score_3_3 + rubble_2_4);
score_2_3 = Math.min(score_2_3, score_3_3 + rubble_2_3);
score_2_2 = Math.min(score_2_2, score_3_3 + rubble_2_2);
score_3_2 = Math.min(score_3_2, score_3_3 + rubble_3_2);
score_4_2 = Math.min(score_4_2, score_3_3 + rubble_4_2);
score_3_2 = Math.min(score_3_2, score_4_3 + rubble_3_2);
score_4_2 = Math.min(score_4_2, score_4_3 + rubble_4_2);
score_4_7 = Math.min(score_4_7, score_4_6 + rubble_4_7);
score_3_7 = Math.min(score_3_7, score_4_6 + rubble_3_7);
score_4_7 = Math.min(score_4_7, score_3_6 + rubble_4_7);
score_3_7 = Math.min(score_3_7, score_3_6 + rubble_3_7);
score_2_7 = Math.min(score_2_7, score_3_6 + rubble_2_7);
score_3_7 = Math.min(score_3_7, score_2_6 + rubble_3_7);
score_2_7 = Math.min(score_2_7, score_2_6 + rubble_2_7);
score_1_7 = Math.min(score_1_7, score_2_6 + rubble_1_7);
score_1_6 = Math.min(score_1_6, score_2_6 + rubble_1_6);
score_1_5 = Math.min(score_1_5, score_2_6 + rubble_1_5);
score_1_6 = Math.min(score_1_6, score_2_5 + rubble_1_6);
score_1_5 = Math.min(score_1_5, score_2_5 + rubble_1_5);
score_1_4 = Math.min(score_1_4, score_2_5 + rubble_1_4);
score_1_5 = Math.min(score_1_5, score_2_4 + rubble_1_5);
score_1_4 = Math.min(score_1_4, score_2_4 + rubble_1_4);
score_1_3 = Math.min(score_1_3, score_2_4 + rubble_1_3);
score_1_4 = Math.min(score_1_4, score_2_3 + rubble_1_4);
score_1_3 = Math.min(score_1_3, score_2_3 + rubble_1_3);
score_1_2 = Math.min(score_1_2, score_2_3 + rubble_1_2);
score_1_3 = Math.min(score_1_3, score_2_2 + rubble_1_3);
score_1_2 = Math.min(score_1_2, score_2_2 + rubble_1_2);
score_1_1 = Math.min(score_1_1, score_2_2 + rubble_1_1);
score_2_1 = Math.min(score_2_1, score_2_2 + rubble_2_1);
score_3_1 = Math.min(score_3_1, score_2_2 + rubble_3_1);
score_2_1 = Math.min(score_2_1, score_3_2 + rubble_2_1);
score_3_1 = Math.min(score_3_1, score_3_2 + rubble_3_1);
score_4_1 = Math.min(score_4_1, score_3_2 + rubble_4_1);
score_3_1 = Math.min(score_3_1, score_4_2 + rubble_3_1);
score_4_1 = Math.min(score_4_1, score_4_2 + rubble_4_1);
score_4_8 = Math.min(score_4_8, score_4_7 + rubble_4_8);
score_3_8 = Math.min(score_3_8, score_4_7 + rubble_3_8);
score_4_8 = Math.min(score_4_8, score_3_7 + rubble_4_8);
score_3_8 = Math.min(score_3_8, score_3_7 + rubble_3_8);
score_2_8 = Math.min(score_2_8, score_3_7 + rubble_2_8);
score_3_8 = Math.min(score_3_8, score_2_7 + rubble_3_8);
score_2_8 = Math.min(score_2_8, score_2_7 + rubble_2_8);
score_2_8 = Math.min(score_2_8, score_1_7 + rubble_2_8);
score_0_6 = Math.min(score_0_6, score_1_7 + rubble_0_6);
score_0_6 = Math.min(score_0_6, score_1_6 + rubble_0_6);
score_0_5 = Math.min(score_0_5, score_1_6 + rubble_0_5);
score_0_6 = Math.min(score_0_6, score_1_5 + rubble_0_6);
score_0_5 = Math.min(score_0_5, score_1_5 + rubble_0_5);
score_0_4 = Math.min(score_0_4, score_1_5 + rubble_0_4);
score_0_5 = Math.min(score_0_5, score_1_4 + rubble_0_5);
score_0_4 = Math.min(score_0_4, score_1_4 + rubble_0_4);
score_0_3 = Math.min(score_0_3, score_1_4 + rubble_0_3);
score_0_4 = Math.min(score_0_4, score_1_3 + rubble_0_4);
score_0_3 = Math.min(score_0_3, score_1_3 + rubble_0_3);
score_0_2 = Math.min(score_0_2, score_1_3 + rubble_0_2);
score_0_3 = Math.min(score_0_3, score_1_2 + rubble_0_3);
score_0_2 = Math.min(score_0_2, score_1_2 + rubble_0_2);
score_0_2 = Math.min(score_0_2, score_1_1 + rubble_0_2);
score_2_0 = Math.min(score_2_0, score_1_1 + rubble_2_0);
score_2_0 = Math.min(score_2_0, score_2_1 + rubble_2_0);
score_3_0 = Math.min(score_3_0, score_2_1 + rubble_3_0);
score_2_0 = Math.min(score_2_0, score_3_1 + rubble_2_0);
score_3_0 = Math.min(score_3_0, score_3_1 + rubble_3_0);
score_4_0 = Math.min(score_4_0, score_3_1 + rubble_4_0);
score_3_0 = Math.min(score_3_0, score_4_1 + rubble_3_0);
score_4_0 = Math.min(score_4_0, score_4_1 + rubble_4_0);
Direction go = Direction.CENTER;
int best = Integer.MAX_VALUE;
if (score_4_3 < best) {
best = score_4_3;
go = cur.directionTo(loc_4_3);
}
if (score_3_3 < best) {
best = score_3_3;
go = cur.directionTo(loc_3_3);
}
if (score_3_4 < best) {
best = score_3_4;
go = cur.directionTo(loc_3_4);
}
if (score_3_5 < best) {
best = score_3_5;
go = cur.directionTo(loc_3_5);
}
if (score_4_5 < best) {
best = score_4_5;
go = cur.directionTo(loc_4_5);
}
if (rc.canMove(go)) rc.move(go);
if (cur.equals(new MapLocation(27, 25))) { System.out.println(score_4_0 + " " + "score_4_0");
System.out.println(score_3_0 + " " + "score_3_0");
System.out.println(score_2_0 + " " + "score_2_0");
System.out.println(score_0_2 + " " + "score_0_2");
System.out.println(score_0_3 + " " + "score_0_3");
System.out.println(score_0_4 + " " + "score_0_4");
System.out.println(score_0_5 + " " + "score_0_5");
System.out.println(score_0_6 + " " + "score_0_6");
System.out.println(score_2_8 + " " + "score_2_8");
System.out.println(score_3_8 + " " + "score_3_8");
System.out.println(score_4_8 + " " + "score_4_8");

System.out.println(score_4_1 + " " + "score_4_1");
System.out.println(score_3_1 + " " + "score_3_1");
System.out.println(score_2_1 + " " + "score_2_1");
System.out.println(score_1_1 + " " + "score_1_1");
System.out.println(score_1_2 + " " + "score_1_2");
System.out.println(score_1_3 + " " + "score_1_3");
System.out.println(score_1_4 + " " + "score_1_4");
System.out.println(score_1_5 + " " + "score_1_5");
System.out.println(score_1_6 + " " + "score_1_6");
System.out.println(score_1_7 + " " + "score_1_7");
System.out.println(score_2_7 + " " + "score_2_7");
System.out.println(score_3_7 + " " + "score_3_7");
System.out.println(score_4_7 + " " + "score_4_7");

System.out.println(score_4_2 + " " + "score_4_2");
System.out.println(score_3_2 + " " + "score_3_2");
System.out.println(score_2_2 + " " + "score_2_2");
System.out.println(score_2_3 + " " + "score_2_3");
System.out.println(score_2_4 + " " + "score_2_4");
System.out.println(score_2_5 + " " + "score_2_5");
System.out.println(score_2_6 + " " + "score_2_6");
System.out.println(score_3_6 + " " + "score_3_6");
System.out.println(score_4_6 + " " + "score_4_6");

System.out.println(score_4_3 + " " + "score_4_3");
System.out.println(score_3_3 + " " + "score_3_3");
System.out.println(score_3_4 + " " + "score_3_4");
System.out.println(score_3_5 + " " + "score_3_5");
System.out.println(score_4_5 + " " + "score_4_5");

}
}
static void SOUTH(RobotController rc, MapLocation destination) throws GameActionException {
MapLocation cur = rc.getLocation();
MapLocation loc_8_4 = cur.translate(4, 0);
MapLocation loc_8_3 = cur.translate(4, -1);
MapLocation loc_8_2 = cur.translate(4, -2);
MapLocation loc_6_0 = cur.translate(2, -4);
MapLocation loc_5_0 = cur.translate(1, -4);
MapLocation loc_4_0 = cur.translate(0, -4);
MapLocation loc_3_0 = cur.translate(-1, -4);
MapLocation loc_2_0 = cur.translate(-2, -4);
MapLocation loc_0_2 = cur.translate(-4, -2);
MapLocation loc_0_3 = cur.translate(-4, -1);
MapLocation loc_0_4 = cur.translate(-4, 0);
MapLocation loc_7_4 = cur.translate(3, 0);
MapLocation loc_7_3 = cur.translate(3, -1);
MapLocation loc_7_2 = cur.translate(3, -2);
MapLocation loc_7_1 = cur.translate(3, -3);
MapLocation loc_6_1 = cur.translate(2, -3);
MapLocation loc_5_1 = cur.translate(1, -3);
MapLocation loc_4_1 = cur.translate(0, -3);
MapLocation loc_3_1 = cur.translate(-1, -3);
MapLocation loc_2_1 = cur.translate(-2, -3);
MapLocation loc_1_1 = cur.translate(-3, -3);
MapLocation loc_1_2 = cur.translate(-3, -2);
MapLocation loc_1_3 = cur.translate(-3, -1);
MapLocation loc_1_4 = cur.translate(-3, 0);
MapLocation loc_6_4 = cur.translate(2, 0);
MapLocation loc_6_3 = cur.translate(2, -1);
MapLocation loc_6_2 = cur.translate(2, -2);
MapLocation loc_5_2 = cur.translate(1, -2);
MapLocation loc_4_2 = cur.translate(0, -2);
MapLocation loc_3_2 = cur.translate(-1, -2);
MapLocation loc_2_2 = cur.translate(-2, -2);
MapLocation loc_2_3 = cur.translate(-2, -1);
MapLocation loc_2_4 = cur.translate(-2, 0);
MapLocation loc_5_4 = cur.translate(1, 0);
MapLocation loc_5_3 = cur.translate(1, -1);
MapLocation loc_4_3 = cur.translate(0, -1);
MapLocation loc_3_3 = cur.translate(-1, -1);
MapLocation loc_3_4 = cur.translate(-1, 0);
int rubble_8_4 = (rc.canSenseLocation(loc_8_4) && !rc.isLocationOccupied(loc_8_4))? 20 + 2 * rc.senseRubble(loc_8_4) : 100000;
if (loc_8_4.equals(destination)) { rubble_8_4 = -0; }int rubble_8_3 = (rc.canSenseLocation(loc_8_3) && !rc.isLocationOccupied(loc_8_3))? 20 + 2 * rc.senseRubble(loc_8_3) : 100000;
if (loc_8_3.equals(destination)) { rubble_8_3 = -0; }int rubble_8_2 = (rc.canSenseLocation(loc_8_2) && !rc.isLocationOccupied(loc_8_2))? 20 + 2 * rc.senseRubble(loc_8_2) : 100000;
if (loc_8_2.equals(destination)) { rubble_8_2 = -0; }int rubble_6_0 = (rc.canSenseLocation(loc_6_0) && !rc.isLocationOccupied(loc_6_0))? 20 + 2 * rc.senseRubble(loc_6_0) : 100000;
if (loc_6_0.equals(destination)) { rubble_6_0 = -0; }int rubble_5_0 = (rc.canSenseLocation(loc_5_0) && !rc.isLocationOccupied(loc_5_0))? 20 + 2 * rc.senseRubble(loc_5_0) : 100000;
if (loc_5_0.equals(destination)) { rubble_5_0 = -0; }int rubble_4_0 = (rc.canSenseLocation(loc_4_0) && !rc.isLocationOccupied(loc_4_0))? 20 + 2 * rc.senseRubble(loc_4_0) : 100000;
if (loc_4_0.equals(destination)) { rubble_4_0 = -0; }int rubble_3_0 = (rc.canSenseLocation(loc_3_0) && !rc.isLocationOccupied(loc_3_0))? 20 + 2 * rc.senseRubble(loc_3_0) : 100000;
if (loc_3_0.equals(destination)) { rubble_3_0 = -0; }int rubble_2_0 = (rc.canSenseLocation(loc_2_0) && !rc.isLocationOccupied(loc_2_0))? 20 + 2 * rc.senseRubble(loc_2_0) : 100000;
if (loc_2_0.equals(destination)) { rubble_2_0 = -0; }int rubble_0_2 = (rc.canSenseLocation(loc_0_2) && !rc.isLocationOccupied(loc_0_2))? 20 + 2 * rc.senseRubble(loc_0_2) : 100000;
if (loc_0_2.equals(destination)) { rubble_0_2 = -0; }int rubble_0_3 = (rc.canSenseLocation(loc_0_3) && !rc.isLocationOccupied(loc_0_3))? 20 + 2 * rc.senseRubble(loc_0_3) : 100000;
if (loc_0_3.equals(destination)) { rubble_0_3 = -0; }int rubble_0_4 = (rc.canSenseLocation(loc_0_4) && !rc.isLocationOccupied(loc_0_4))? 20 + 2 * rc.senseRubble(loc_0_4) : 100000;
if (loc_0_4.equals(destination)) { rubble_0_4 = -0; }int rubble_7_4 = (rc.canSenseLocation(loc_7_4) && !rc.isLocationOccupied(loc_7_4))? 20 + 2 * rc.senseRubble(loc_7_4) : 100000;
if (loc_7_4.equals(destination)) { rubble_7_4 = -0; }int rubble_7_3 = (rc.canSenseLocation(loc_7_3) && !rc.isLocationOccupied(loc_7_3))? 20 + 2 * rc.senseRubble(loc_7_3) : 100000;
if (loc_7_3.equals(destination)) { rubble_7_3 = -0; }int rubble_7_2 = (rc.canSenseLocation(loc_7_2) && !rc.isLocationOccupied(loc_7_2))? 20 + 2 * rc.senseRubble(loc_7_2) : 100000;
if (loc_7_2.equals(destination)) { rubble_7_2 = -0; }int rubble_7_1 = (rc.canSenseLocation(loc_7_1) && !rc.isLocationOccupied(loc_7_1))? 20 + 2 * rc.senseRubble(loc_7_1) : 100000;
if (loc_7_1.equals(destination)) { rubble_7_1 = -0; }int rubble_6_1 = (rc.canSenseLocation(loc_6_1) && !rc.isLocationOccupied(loc_6_1))? 20 + 2 * rc.senseRubble(loc_6_1) : 100000;
if (loc_6_1.equals(destination)) { rubble_6_1 = -0; }int rubble_5_1 = (rc.canSenseLocation(loc_5_1) && !rc.isLocationOccupied(loc_5_1))? 20 + 2 * rc.senseRubble(loc_5_1) : 100000;
if (loc_5_1.equals(destination)) { rubble_5_1 = -0; }int rubble_4_1 = (rc.canSenseLocation(loc_4_1) && !rc.isLocationOccupied(loc_4_1))? 20 + 2 * rc.senseRubble(loc_4_1) : 100000;
if (loc_4_1.equals(destination)) { rubble_4_1 = -0; }int rubble_3_1 = (rc.canSenseLocation(loc_3_1) && !rc.isLocationOccupied(loc_3_1))? 20 + 2 * rc.senseRubble(loc_3_1) : 100000;
if (loc_3_1.equals(destination)) { rubble_3_1 = -0; }int rubble_2_1 = (rc.canSenseLocation(loc_2_1) && !rc.isLocationOccupied(loc_2_1))? 20 + 2 * rc.senseRubble(loc_2_1) : 100000;
if (loc_2_1.equals(destination)) { rubble_2_1 = -0; }int rubble_1_1 = (rc.canSenseLocation(loc_1_1) && !rc.isLocationOccupied(loc_1_1))? 20 + 2 * rc.senseRubble(loc_1_1) : 100000;
if (loc_1_1.equals(destination)) { rubble_1_1 = -0; }int rubble_1_2 = (rc.canSenseLocation(loc_1_2) && !rc.isLocationOccupied(loc_1_2))? 20 + 2 * rc.senseRubble(loc_1_2) : 100000;
if (loc_1_2.equals(destination)) { rubble_1_2 = -0; }int rubble_1_3 = (rc.canSenseLocation(loc_1_3) && !rc.isLocationOccupied(loc_1_3))? 20 + 2 * rc.senseRubble(loc_1_3) : 100000;
if (loc_1_3.equals(destination)) { rubble_1_3 = -0; }int rubble_1_4 = (rc.canSenseLocation(loc_1_4) && !rc.isLocationOccupied(loc_1_4))? 20 + 2 * rc.senseRubble(loc_1_4) : 100000;
if (loc_1_4.equals(destination)) { rubble_1_4 = -0; }int rubble_6_4 = (rc.canSenseLocation(loc_6_4) && !rc.isLocationOccupied(loc_6_4))? 20 + 2 * rc.senseRubble(loc_6_4) : 100000;
if (loc_6_4.equals(destination)) { rubble_6_4 = -0; }int rubble_6_3 = (rc.canSenseLocation(loc_6_3) && !rc.isLocationOccupied(loc_6_3))? 20 + 2 * rc.senseRubble(loc_6_3) : 100000;
if (loc_6_3.equals(destination)) { rubble_6_3 = -0; }int rubble_6_2 = (rc.canSenseLocation(loc_6_2) && !rc.isLocationOccupied(loc_6_2))? 20 + 2 * rc.senseRubble(loc_6_2) : 100000;
if (loc_6_2.equals(destination)) { rubble_6_2 = -0; }int rubble_5_2 = (rc.canSenseLocation(loc_5_2) && !rc.isLocationOccupied(loc_5_2))? 20 + 2 * rc.senseRubble(loc_5_2) : 100000;
if (loc_5_2.equals(destination)) { rubble_5_2 = -0; }int rubble_4_2 = (rc.canSenseLocation(loc_4_2) && !rc.isLocationOccupied(loc_4_2))? 20 + 2 * rc.senseRubble(loc_4_2) : 100000;
if (loc_4_2.equals(destination)) { rubble_4_2 = -0; }int rubble_3_2 = (rc.canSenseLocation(loc_3_2) && !rc.isLocationOccupied(loc_3_2))? 20 + 2 * rc.senseRubble(loc_3_2) : 100000;
if (loc_3_2.equals(destination)) { rubble_3_2 = -0; }int rubble_2_2 = (rc.canSenseLocation(loc_2_2) && !rc.isLocationOccupied(loc_2_2))? 20 + 2 * rc.senseRubble(loc_2_2) : 100000;
if (loc_2_2.equals(destination)) { rubble_2_2 = -0; }int rubble_2_3 = (rc.canSenseLocation(loc_2_3) && !rc.isLocationOccupied(loc_2_3))? 20 + 2 * rc.senseRubble(loc_2_3) : 100000;
if (loc_2_3.equals(destination)) { rubble_2_3 = -0; }int rubble_2_4 = (rc.canSenseLocation(loc_2_4) && !rc.isLocationOccupied(loc_2_4))? 20 + 2 * rc.senseRubble(loc_2_4) : 100000;
if (loc_2_4.equals(destination)) { rubble_2_4 = -0; }int rubble_5_4 = (rc.canSenseLocation(loc_5_4) && !rc.isLocationOccupied(loc_5_4))? 20 + 2 * rc.senseRubble(loc_5_4) : 100000;
if (loc_5_4.equals(destination)) { rubble_5_4 = -0; }int rubble_5_3 = (rc.canSenseLocation(loc_5_3) && !rc.isLocationOccupied(loc_5_3))? 20 + 2 * rc.senseRubble(loc_5_3) : 100000;
if (loc_5_3.equals(destination)) { rubble_5_3 = -0; }int rubble_4_3 = (rc.canSenseLocation(loc_4_3) && !rc.isLocationOccupied(loc_4_3))? 20 + 2 * rc.senseRubble(loc_4_3) : 100000;
if (loc_4_3.equals(destination)) { rubble_4_3 = -0; }int rubble_3_3 = (rc.canSenseLocation(loc_3_3) && !rc.isLocationOccupied(loc_3_3))? 20 + 2 * rc.senseRubble(loc_3_3) : 100000;
if (loc_3_3.equals(destination)) { rubble_3_3 = -0; }int rubble_3_4 = (rc.canSenseLocation(loc_3_4) && !rc.isLocationOccupied(loc_3_4))? 20 + 2 * rc.senseRubble(loc_3_4) : 100000;
if (loc_3_4.equals(destination)) { rubble_3_4 = -0; }int score_8_4 = 1000000000;
int score_8_3 = 1000000000;
int score_8_2 = 1000000000;
int score_6_0 = 1000000000;
int score_5_0 = 1000000000;
int score_4_0 = 1000000000;
int score_3_0 = 1000000000;
int score_2_0 = 1000000000;
int score_0_2 = 1000000000;
int score_0_3 = 1000000000;
int score_0_4 = 1000000000;
int score_7_4 = 1000000000;
int score_7_3 = 1000000000;
int score_7_2 = 1000000000;
int score_7_1 = 1000000000;
int score_6_1 = 1000000000;
int score_5_1 = 1000000000;
int score_4_1 = 1000000000;
int score_3_1 = 1000000000;
int score_2_1 = 1000000000;
int score_1_1 = 1000000000;
int score_1_2 = 1000000000;
int score_1_3 = 1000000000;
int score_1_4 = 1000000000;
int score_6_4 = 1000000000;
int score_6_3 = 1000000000;
int score_6_2 = 1000000000;
int score_5_2 = 1000000000;
int score_4_2 = 1000000000;
int score_3_2 = 1000000000;
int score_2_2 = 1000000000;
int score_2_3 = 1000000000;
int score_2_4 = 1000000000;
int score_5_4 = 1000000000;
int score_5_3 = 1000000000;
int score_4_3 = 1000000000;
int score_3_3 = 1000000000;
int score_3_4 = 1000000000;
score_8_4 = man(loc_8_4, destination) * (20 + 0) + rubble_8_4;
score_8_3 = man(loc_8_3, destination) * (20 + 0) + rubble_8_3;
score_8_2 = man(loc_8_2, destination) * (20 + 0) + rubble_8_2;
score_6_0 = man(loc_6_0, destination) * (20 + 0) + rubble_6_0;
score_5_0 = man(loc_5_0, destination) * (20 + 0) + rubble_5_0;
score_4_0 = man(loc_4_0, destination) * (20 + 0) + rubble_4_0;
score_3_0 = man(loc_3_0, destination) * (20 + 0) + rubble_3_0;
score_2_0 = man(loc_2_0, destination) * (20 + 0) + rubble_2_0;
score_0_2 = man(loc_0_2, destination) * (20 + 0) + rubble_0_2;
score_0_3 = man(loc_0_3, destination) * (20 + 0) + rubble_0_3;
score_0_4 = man(loc_0_4, destination) * (20 + 0) + rubble_0_4;
score_8_3 = Math.min(score_8_3, score_8_4 + rubble_8_3);
score_8_2 = Math.min(score_8_2, score_8_3 + rubble_8_2);
score_5_0 = Math.min(score_5_0, score_6_0 + rubble_5_0);
score_4_0 = Math.min(score_4_0, score_5_0 + rubble_4_0);
score_3_0 = Math.min(score_3_0, score_4_0 + rubble_3_0);
score_2_0 = Math.min(score_2_0, score_3_0 + rubble_2_0);
score_0_3 = Math.min(score_0_3, score_0_2 + rubble_0_3);
score_0_4 = Math.min(score_0_4, score_0_3 + rubble_0_4);
score_0_3 = Math.min(score_0_3, score_0_4 + rubble_0_3);
score_0_2 = Math.min(score_0_2, score_0_3 + rubble_0_2);
score_3_0 = Math.min(score_3_0, score_2_0 + rubble_3_0);
score_4_0 = Math.min(score_4_0, score_3_0 + rubble_4_0);
score_5_0 = Math.min(score_5_0, score_4_0 + rubble_5_0);
score_6_0 = Math.min(score_6_0, score_5_0 + rubble_6_0);
score_8_3 = Math.min(score_8_3, score_8_2 + rubble_8_3);
score_8_4 = Math.min(score_8_4, score_8_3 + rubble_8_4);
score_1_4 = Math.min(score_1_4, score_0_4 + rubble_1_4);
score_1_4 = Math.min(score_1_4, score_0_3 + rubble_1_4);
score_1_3 = Math.min(score_1_3, score_0_4 + rubble_1_3);
score_1_3 = Math.min(score_1_3, score_0_3 + rubble_1_3);
score_1_3 = Math.min(score_1_3, score_0_2 + rubble_1_3);
score_1_2 = Math.min(score_1_2, score_0_3 + rubble_1_2);
score_1_2 = Math.min(score_1_2, score_0_2 + rubble_1_2);
score_1_1 = Math.min(score_1_1, score_0_2 + rubble_1_1);
score_1_1 = Math.min(score_1_1, score_2_0 + rubble_1_1);
score_2_1 = Math.min(score_2_1, score_2_0 + rubble_2_1);
score_2_1 = Math.min(score_2_1, score_3_0 + rubble_2_1);
score_3_1 = Math.min(score_3_1, score_2_0 + rubble_3_1);
score_3_1 = Math.min(score_3_1, score_3_0 + rubble_3_1);
score_3_1 = Math.min(score_3_1, score_4_0 + rubble_3_1);
score_4_1 = Math.min(score_4_1, score_3_0 + rubble_4_1);
score_4_1 = Math.min(score_4_1, score_4_0 + rubble_4_1);
score_4_1 = Math.min(score_4_1, score_5_0 + rubble_4_1);
score_5_1 = Math.min(score_5_1, score_4_0 + rubble_5_1);
score_5_1 = Math.min(score_5_1, score_5_0 + rubble_5_1);
score_5_1 = Math.min(score_5_1, score_6_0 + rubble_5_1);
score_6_1 = Math.min(score_6_1, score_5_0 + rubble_6_1);
score_6_1 = Math.min(score_6_1, score_6_0 + rubble_6_1);
score_7_1 = Math.min(score_7_1, score_6_0 + rubble_7_1);
score_7_1 = Math.min(score_7_1, score_8_2 + rubble_7_1);
score_7_2 = Math.min(score_7_2, score_8_2 + rubble_7_2);
score_7_2 = Math.min(score_7_2, score_8_3 + rubble_7_2);
score_7_3 = Math.min(score_7_3, score_8_2 + rubble_7_3);
score_7_3 = Math.min(score_7_3, score_8_3 + rubble_7_3);
score_7_3 = Math.min(score_7_3, score_8_4 + rubble_7_3);
score_7_4 = Math.min(score_7_4, score_8_3 + rubble_7_4);
score_7_4 = Math.min(score_7_4, score_8_4 + rubble_7_4);
score_7_3 = Math.min(score_7_3, score_7_4 + rubble_7_3);
score_7_2 = Math.min(score_7_2, score_7_3 + rubble_7_2);
score_7_1 = Math.min(score_7_1, score_7_2 + rubble_7_1);
score_6_1 = Math.min(score_6_1, score_7_1 + rubble_6_1);
score_6_1 = Math.min(score_6_1, score_7_2 + rubble_6_1);
score_5_1 = Math.min(score_5_1, score_6_1 + rubble_5_1);
score_4_1 = Math.min(score_4_1, score_5_1 + rubble_4_1);
score_3_1 = Math.min(score_3_1, score_4_1 + rubble_3_1);
score_2_1 = Math.min(score_2_1, score_3_1 + rubble_2_1);
score_1_1 = Math.min(score_1_1, score_2_1 + rubble_1_1);
score_1_2 = Math.min(score_1_2, score_1_1 + rubble_1_2);
score_1_2 = Math.min(score_1_2, score_2_1 + rubble_1_2);
score_1_3 = Math.min(score_1_3, score_1_2 + rubble_1_3);
score_1_4 = Math.min(score_1_4, score_1_3 + rubble_1_4);
score_1_3 = Math.min(score_1_3, score_1_4 + rubble_1_3);
score_1_2 = Math.min(score_1_2, score_1_3 + rubble_1_2);
score_1_1 = Math.min(score_1_1, score_1_2 + rubble_1_1);
score_2_1 = Math.min(score_2_1, score_1_1 + rubble_2_1);
score_2_1 = Math.min(score_2_1, score_1_2 + rubble_2_1);
score_3_1 = Math.min(score_3_1, score_2_1 + rubble_3_1);
score_4_1 = Math.min(score_4_1, score_3_1 + rubble_4_1);
score_5_1 = Math.min(score_5_1, score_4_1 + rubble_5_1);
score_6_1 = Math.min(score_6_1, score_5_1 + rubble_6_1);
score_7_1 = Math.min(score_7_1, score_6_1 + rubble_7_1);
score_7_2 = Math.min(score_7_2, score_7_1 + rubble_7_2);
score_7_2 = Math.min(score_7_2, score_6_1 + rubble_7_2);
score_7_3 = Math.min(score_7_3, score_7_2 + rubble_7_3);
score_7_4 = Math.min(score_7_4, score_7_3 + rubble_7_4);
score_2_4 = Math.min(score_2_4, score_1_4 + rubble_2_4);
score_2_4 = Math.min(score_2_4, score_1_3 + rubble_2_4);
score_2_3 = Math.min(score_2_3, score_1_4 + rubble_2_3);
score_2_3 = Math.min(score_2_3, score_1_3 + rubble_2_3);
score_2_3 = Math.min(score_2_3, score_1_2 + rubble_2_3);
score_2_2 = Math.min(score_2_2, score_1_3 + rubble_2_2);
score_2_2 = Math.min(score_2_2, score_1_2 + rubble_2_2);
score_2_2 = Math.min(score_2_2, score_1_1 + rubble_2_2);
score_2_2 = Math.min(score_2_2, score_2_1 + rubble_2_2);
score_2_2 = Math.min(score_2_2, score_3_1 + rubble_2_2);
score_3_2 = Math.min(score_3_2, score_2_1 + rubble_3_2);
score_3_2 = Math.min(score_3_2, score_3_1 + rubble_3_2);
score_3_2 = Math.min(score_3_2, score_4_1 + rubble_3_2);
score_4_2 = Math.min(score_4_2, score_3_1 + rubble_4_2);
score_4_2 = Math.min(score_4_2, score_4_1 + rubble_4_2);
score_4_2 = Math.min(score_4_2, score_5_1 + rubble_4_2);
score_5_2 = Math.min(score_5_2, score_4_1 + rubble_5_2);
score_5_2 = Math.min(score_5_2, score_5_1 + rubble_5_2);
score_5_2 = Math.min(score_5_2, score_6_1 + rubble_5_2);
score_6_2 = Math.min(score_6_2, score_5_1 + rubble_6_2);
score_6_2 = Math.min(score_6_2, score_6_1 + rubble_6_2);
score_6_2 = Math.min(score_6_2, score_7_1 + rubble_6_2);
score_6_2 = Math.min(score_6_2, score_7_2 + rubble_6_2);
score_6_2 = Math.min(score_6_2, score_7_3 + rubble_6_2);
score_6_3 = Math.min(score_6_3, score_7_2 + rubble_6_3);
score_6_3 = Math.min(score_6_3, score_7_3 + rubble_6_3);
score_6_3 = Math.min(score_6_3, score_7_4 + rubble_6_3);
score_6_4 = Math.min(score_6_4, score_7_3 + rubble_6_4);
score_6_4 = Math.min(score_6_4, score_7_4 + rubble_6_4);
score_6_3 = Math.min(score_6_3, score_6_4 + rubble_6_3);
score_6_2 = Math.min(score_6_2, score_6_3 + rubble_6_2);
score_5_2 = Math.min(score_5_2, score_6_2 + rubble_5_2);
score_5_2 = Math.min(score_5_2, score_6_3 + rubble_5_2);
score_4_2 = Math.min(score_4_2, score_5_2 + rubble_4_2);
score_3_2 = Math.min(score_3_2, score_4_2 + rubble_3_2);
score_2_2 = Math.min(score_2_2, score_3_2 + rubble_2_2);
score_2_3 = Math.min(score_2_3, score_2_2 + rubble_2_3);
score_2_3 = Math.min(score_2_3, score_3_2 + rubble_2_3);
score_2_4 = Math.min(score_2_4, score_2_3 + rubble_2_4);
score_2_3 = Math.min(score_2_3, score_2_4 + rubble_2_3);
score_2_2 = Math.min(score_2_2, score_2_3 + rubble_2_2);
score_3_2 = Math.min(score_3_2, score_2_2 + rubble_3_2);
score_3_2 = Math.min(score_3_2, score_2_3 + rubble_3_2);
score_4_2 = Math.min(score_4_2, score_3_2 + rubble_4_2);
score_5_2 = Math.min(score_5_2, score_4_2 + rubble_5_2);
score_6_2 = Math.min(score_6_2, score_5_2 + rubble_6_2);
score_6_3 = Math.min(score_6_3, score_6_2 + rubble_6_3);
score_6_3 = Math.min(score_6_3, score_5_2 + rubble_6_3);
score_6_4 = Math.min(score_6_4, score_6_3 + rubble_6_4);
score_3_4 = Math.min(score_3_4, score_2_4 + rubble_3_4);
score_3_4 = Math.min(score_3_4, score_2_3 + rubble_3_4);
score_3_3 = Math.min(score_3_3, score_2_4 + rubble_3_3);
score_3_3 = Math.min(score_3_3, score_2_3 + rubble_3_3);
score_3_3 = Math.min(score_3_3, score_2_2 + rubble_3_3);
score_3_3 = Math.min(score_3_3, score_3_2 + rubble_3_3);
score_3_3 = Math.min(score_3_3, score_4_2 + rubble_3_3);
score_4_3 = Math.min(score_4_3, score_3_2 + rubble_4_3);
score_4_3 = Math.min(score_4_3, score_4_2 + rubble_4_3);
score_4_3 = Math.min(score_4_3, score_5_2 + rubble_4_3);
score_5_3 = Math.min(score_5_3, score_4_2 + rubble_5_3);
score_5_3 = Math.min(score_5_3, score_5_2 + rubble_5_3);
score_5_3 = Math.min(score_5_3, score_6_2 + rubble_5_3);
score_5_3 = Math.min(score_5_3, score_6_3 + rubble_5_3);
score_5_3 = Math.min(score_5_3, score_6_4 + rubble_5_3);
score_5_4 = Math.min(score_5_4, score_6_3 + rubble_5_4);
score_5_4 = Math.min(score_5_4, score_6_4 + rubble_5_4);
score_5_4 = Math.min(score_5_4, score_3_4 + rubble_5_4);
score_5_3 = Math.min(score_5_3, score_5_4 + rubble_5_3);
score_4_3 = Math.min(score_4_3, score_5_3 + rubble_4_3);
score_4_3 = Math.min(score_4_3, score_5_4 + rubble_4_3);
score_3_3 = Math.min(score_3_3, score_4_3 + rubble_3_3);
score_3_4 = Math.min(score_3_4, score_3_3 + rubble_3_4);
score_3_4 = Math.min(score_3_4, score_4_3 + rubble_3_4);
score_3_4 = Math.min(score_3_4, score_5_3 + rubble_3_4);
score_3_3 = Math.min(score_3_3, score_3_4 + rubble_3_3);
score_4_3 = Math.min(score_4_3, score_3_3 + rubble_4_3);
score_4_3 = Math.min(score_4_3, score_3_4 + rubble_4_3);
score_5_3 = Math.min(score_5_3, score_4_3 + rubble_5_3);
score_5_4 = Math.min(score_5_4, score_5_3 + rubble_5_4);
score_5_4 = Math.min(score_5_4, score_4_3 + rubble_5_4);
score_2_4 = Math.min(score_2_4, score_3_4 + rubble_2_4);
score_2_3 = Math.min(score_2_3, score_3_4 + rubble_2_3);
score_2_4 = Math.min(score_2_4, score_3_3 + rubble_2_4);
score_2_3 = Math.min(score_2_3, score_3_3 + rubble_2_3);
score_2_2 = Math.min(score_2_2, score_3_3 + rubble_2_2);
score_3_2 = Math.min(score_3_2, score_3_3 + rubble_3_2);
score_4_2 = Math.min(score_4_2, score_3_3 + rubble_4_2);
score_3_2 = Math.min(score_3_2, score_4_3 + rubble_3_2);
score_4_2 = Math.min(score_4_2, score_4_3 + rubble_4_2);
score_5_2 = Math.min(score_5_2, score_4_3 + rubble_5_2);
score_4_2 = Math.min(score_4_2, score_5_3 + rubble_4_2);
score_5_2 = Math.min(score_5_2, score_5_3 + rubble_5_2);
score_6_2 = Math.min(score_6_2, score_5_3 + rubble_6_2);
score_6_3 = Math.min(score_6_3, score_5_3 + rubble_6_3);
score_6_4 = Math.min(score_6_4, score_5_3 + rubble_6_4);
score_6_3 = Math.min(score_6_3, score_5_4 + rubble_6_3);
score_6_4 = Math.min(score_6_4, score_5_4 + rubble_6_4);
score_1_4 = Math.min(score_1_4, score_2_4 + rubble_1_4);
score_1_3 = Math.min(score_1_3, score_2_4 + rubble_1_3);
score_1_4 = Math.min(score_1_4, score_2_3 + rubble_1_4);
score_1_3 = Math.min(score_1_3, score_2_3 + rubble_1_3);
score_1_2 = Math.min(score_1_2, score_2_3 + rubble_1_2);
score_1_3 = Math.min(score_1_3, score_2_2 + rubble_1_3);
score_1_2 = Math.min(score_1_2, score_2_2 + rubble_1_2);
score_1_1 = Math.min(score_1_1, score_2_2 + rubble_1_1);
score_2_1 = Math.min(score_2_1, score_2_2 + rubble_2_1);
score_3_1 = Math.min(score_3_1, score_2_2 + rubble_3_1);
score_2_1 = Math.min(score_2_1, score_3_2 + rubble_2_1);
score_3_1 = Math.min(score_3_1, score_3_2 + rubble_3_1);
score_4_1 = Math.min(score_4_1, score_3_2 + rubble_4_1);
score_3_1 = Math.min(score_3_1, score_4_2 + rubble_3_1);
score_4_1 = Math.min(score_4_1, score_4_2 + rubble_4_1);
score_5_1 = Math.min(score_5_1, score_4_2 + rubble_5_1);
score_4_1 = Math.min(score_4_1, score_5_2 + rubble_4_1);
score_5_1 = Math.min(score_5_1, score_5_2 + rubble_5_1);
score_6_1 = Math.min(score_6_1, score_5_2 + rubble_6_1);
score_5_1 = Math.min(score_5_1, score_6_2 + rubble_5_1);
score_6_1 = Math.min(score_6_1, score_6_2 + rubble_6_1);
score_7_1 = Math.min(score_7_1, score_6_2 + rubble_7_1);
score_7_2 = Math.min(score_7_2, score_6_2 + rubble_7_2);
score_7_3 = Math.min(score_7_3, score_6_2 + rubble_7_3);
score_7_2 = Math.min(score_7_2, score_6_3 + rubble_7_2);
score_7_3 = Math.min(score_7_3, score_6_3 + rubble_7_3);
score_7_4 = Math.min(score_7_4, score_6_3 + rubble_7_4);
score_7_3 = Math.min(score_7_3, score_6_4 + rubble_7_3);
score_7_4 = Math.min(score_7_4, score_6_4 + rubble_7_4);
score_0_4 = Math.min(score_0_4, score_1_4 + rubble_0_4);
score_0_3 = Math.min(score_0_3, score_1_4 + rubble_0_3);
score_0_4 = Math.min(score_0_4, score_1_3 + rubble_0_4);
score_0_3 = Math.min(score_0_3, score_1_3 + rubble_0_3);
score_0_2 = Math.min(score_0_2, score_1_3 + rubble_0_2);
score_0_3 = Math.min(score_0_3, score_1_2 + rubble_0_3);
score_0_2 = Math.min(score_0_2, score_1_2 + rubble_0_2);
score_0_2 = Math.min(score_0_2, score_1_1 + rubble_0_2);
score_2_0 = Math.min(score_2_0, score_1_1 + rubble_2_0);
score_2_0 = Math.min(score_2_0, score_2_1 + rubble_2_0);
score_3_0 = Math.min(score_3_0, score_2_1 + rubble_3_0);
score_2_0 = Math.min(score_2_0, score_3_1 + rubble_2_0);
score_3_0 = Math.min(score_3_0, score_3_1 + rubble_3_0);
score_4_0 = Math.min(score_4_0, score_3_1 + rubble_4_0);
score_3_0 = Math.min(score_3_0, score_4_1 + rubble_3_0);
score_4_0 = Math.min(score_4_0, score_4_1 + rubble_4_0);
score_5_0 = Math.min(score_5_0, score_4_1 + rubble_5_0);
score_4_0 = Math.min(score_4_0, score_5_1 + rubble_4_0);
score_5_0 = Math.min(score_5_0, score_5_1 + rubble_5_0);
score_6_0 = Math.min(score_6_0, score_5_1 + rubble_6_0);
score_5_0 = Math.min(score_5_0, score_6_1 + rubble_5_0);
score_6_0 = Math.min(score_6_0, score_6_1 + rubble_6_0);
score_6_0 = Math.min(score_6_0, score_7_1 + rubble_6_0);
score_8_2 = Math.min(score_8_2, score_7_1 + rubble_8_2);
score_8_2 = Math.min(score_8_2, score_7_2 + rubble_8_2);
score_8_3 = Math.min(score_8_3, score_7_2 + rubble_8_3);
score_8_2 = Math.min(score_8_2, score_7_3 + rubble_8_2);
score_8_3 = Math.min(score_8_3, score_7_3 + rubble_8_3);
score_8_4 = Math.min(score_8_4, score_7_3 + rubble_8_4);
score_8_3 = Math.min(score_8_3, score_7_4 + rubble_8_3);
score_8_4 = Math.min(score_8_4, score_7_4 + rubble_8_4);
Direction go = Direction.CENTER;
int best = Integer.MAX_VALUE;
if (score_5_4 < best) {
best = score_5_4;
go = cur.directionTo(loc_5_4);
}
if (score_5_3 < best) {
best = score_5_3;
go = cur.directionTo(loc_5_3);
}
if (score_4_3 < best) {
best = score_4_3;
go = cur.directionTo(loc_4_3);
}
if (score_3_3 < best) {
best = score_3_3;
go = cur.directionTo(loc_3_3);
}
if (score_3_4 < best) {
best = score_3_4;
go = cur.directionTo(loc_3_4);
}
if (rc.canMove(go)) rc.move(go);
if (cur.equals(new MapLocation(27, 25))) { System.out.println(score_8_4 + " " + "score_8_4");
System.out.println(score_8_3 + " " + "score_8_3");
System.out.println(score_8_2 + " " + "score_8_2");
System.out.println(score_6_0 + " " + "score_6_0");
System.out.println(score_5_0 + " " + "score_5_0");
System.out.println(score_4_0 + " " + "score_4_0");
System.out.println(score_3_0 + " " + "score_3_0");
System.out.println(score_2_0 + " " + "score_2_0");
System.out.println(score_0_2 + " " + "score_0_2");
System.out.println(score_0_3 + " " + "score_0_3");
System.out.println(score_0_4 + " " + "score_0_4");

System.out.println(score_7_4 + " " + "score_7_4");
System.out.println(score_7_3 + " " + "score_7_3");
System.out.println(score_7_2 + " " + "score_7_2");
System.out.println(score_7_1 + " " + "score_7_1");
System.out.println(score_6_1 + " " + "score_6_1");
System.out.println(score_5_1 + " " + "score_5_1");
System.out.println(score_4_1 + " " + "score_4_1");
System.out.println(score_3_1 + " " + "score_3_1");
System.out.println(score_2_1 + " " + "score_2_1");
System.out.println(score_1_1 + " " + "score_1_1");
System.out.println(score_1_2 + " " + "score_1_2");
System.out.println(score_1_3 + " " + "score_1_3");
System.out.println(score_1_4 + " " + "score_1_4");

System.out.println(score_6_4 + " " + "score_6_4");
System.out.println(score_6_3 + " " + "score_6_3");
System.out.println(score_6_2 + " " + "score_6_2");
System.out.println(score_5_2 + " " + "score_5_2");
System.out.println(score_4_2 + " " + "score_4_2");
System.out.println(score_3_2 + " " + "score_3_2");
System.out.println(score_2_2 + " " + "score_2_2");
System.out.println(score_2_3 + " " + "score_2_3");
System.out.println(score_2_4 + " " + "score_2_4");

System.out.println(score_5_4 + " " + "score_5_4");
System.out.println(score_5_3 + " " + "score_5_3");
System.out.println(score_4_3 + " " + "score_4_3");
System.out.println(score_3_3 + " " + "score_3_3");
System.out.println(score_3_4 + " " + "score_3_4");

}
}
static void EAST(RobotController rc, MapLocation destination) throws GameActionException {
MapLocation cur = rc.getLocation();
MapLocation loc_4_8 = cur.translate(0, 4);
MapLocation loc_5_8 = cur.translate(1, 4);
MapLocation loc_6_8 = cur.translate(2, 4);
MapLocation loc_8_6 = cur.translate(4, 2);
MapLocation loc_8_5 = cur.translate(4, 1);
MapLocation loc_8_4 = cur.translate(4, 0);
MapLocation loc_8_3 = cur.translate(4, -1);
MapLocation loc_8_2 = cur.translate(4, -2);
MapLocation loc_6_0 = cur.translate(2, -4);
MapLocation loc_5_0 = cur.translate(1, -4);
MapLocation loc_4_0 = cur.translate(0, -4);
MapLocation loc_4_7 = cur.translate(0, 3);
MapLocation loc_5_7 = cur.translate(1, 3);
MapLocation loc_6_7 = cur.translate(2, 3);
MapLocation loc_7_7 = cur.translate(3, 3);
MapLocation loc_7_6 = cur.translate(3, 2);
MapLocation loc_7_5 = cur.translate(3, 1);
MapLocation loc_7_4 = cur.translate(3, 0);
MapLocation loc_7_3 = cur.translate(3, -1);
MapLocation loc_7_2 = cur.translate(3, -2);
MapLocation loc_7_1 = cur.translate(3, -3);
MapLocation loc_6_1 = cur.translate(2, -3);
MapLocation loc_5_1 = cur.translate(1, -3);
MapLocation loc_4_1 = cur.translate(0, -3);
MapLocation loc_4_6 = cur.translate(0, 2);
MapLocation loc_5_6 = cur.translate(1, 2);
MapLocation loc_6_6 = cur.translate(2, 2);
MapLocation loc_6_5 = cur.translate(2, 1);
MapLocation loc_6_4 = cur.translate(2, 0);
MapLocation loc_6_3 = cur.translate(2, -1);
MapLocation loc_6_2 = cur.translate(2, -2);
MapLocation loc_5_2 = cur.translate(1, -2);
MapLocation loc_4_2 = cur.translate(0, -2);
MapLocation loc_4_5 = cur.translate(0, 1);
MapLocation loc_5_5 = cur.translate(1, 1);
MapLocation loc_5_4 = cur.translate(1, 0);
MapLocation loc_5_3 = cur.translate(1, -1);
MapLocation loc_4_3 = cur.translate(0, -1);
int rubble_4_8 = (rc.canSenseLocation(loc_4_8) && !rc.isLocationOccupied(loc_4_8))? 20 + 2 * rc.senseRubble(loc_4_8) : 100000;
if (loc_4_8.equals(destination)) { rubble_4_8 = -0; }int rubble_5_8 = (rc.canSenseLocation(loc_5_8) && !rc.isLocationOccupied(loc_5_8))? 20 + 2 * rc.senseRubble(loc_5_8) : 100000;
if (loc_5_8.equals(destination)) { rubble_5_8 = -0; }int rubble_6_8 = (rc.canSenseLocation(loc_6_8) && !rc.isLocationOccupied(loc_6_8))? 20 + 2 * rc.senseRubble(loc_6_8) : 100000;
if (loc_6_8.equals(destination)) { rubble_6_8 = -0; }int rubble_8_6 = (rc.canSenseLocation(loc_8_6) && !rc.isLocationOccupied(loc_8_6))? 20 + 2 * rc.senseRubble(loc_8_6) : 100000;
if (loc_8_6.equals(destination)) { rubble_8_6 = -0; }int rubble_8_5 = (rc.canSenseLocation(loc_8_5) && !rc.isLocationOccupied(loc_8_5))? 20 + 2 * rc.senseRubble(loc_8_5) : 100000;
if (loc_8_5.equals(destination)) { rubble_8_5 = -0; }int rubble_8_4 = (rc.canSenseLocation(loc_8_4) && !rc.isLocationOccupied(loc_8_4))? 20 + 2 * rc.senseRubble(loc_8_4) : 100000;
if (loc_8_4.equals(destination)) { rubble_8_4 = -0; }int rubble_8_3 = (rc.canSenseLocation(loc_8_3) && !rc.isLocationOccupied(loc_8_3))? 20 + 2 * rc.senseRubble(loc_8_3) : 100000;
if (loc_8_3.equals(destination)) { rubble_8_3 = -0; }int rubble_8_2 = (rc.canSenseLocation(loc_8_2) && !rc.isLocationOccupied(loc_8_2))? 20 + 2 * rc.senseRubble(loc_8_2) : 100000;
if (loc_8_2.equals(destination)) { rubble_8_2 = -0; }int rubble_6_0 = (rc.canSenseLocation(loc_6_0) && !rc.isLocationOccupied(loc_6_0))? 20 + 2 * rc.senseRubble(loc_6_0) : 100000;
if (loc_6_0.equals(destination)) { rubble_6_0 = -0; }int rubble_5_0 = (rc.canSenseLocation(loc_5_0) && !rc.isLocationOccupied(loc_5_0))? 20 + 2 * rc.senseRubble(loc_5_0) : 100000;
if (loc_5_0.equals(destination)) { rubble_5_0 = -0; }int rubble_4_0 = (rc.canSenseLocation(loc_4_0) && !rc.isLocationOccupied(loc_4_0))? 20 + 2 * rc.senseRubble(loc_4_0) : 100000;
if (loc_4_0.equals(destination)) { rubble_4_0 = -0; }int rubble_4_7 = (rc.canSenseLocation(loc_4_7) && !rc.isLocationOccupied(loc_4_7))? 20 + 2 * rc.senseRubble(loc_4_7) : 100000;
if (loc_4_7.equals(destination)) { rubble_4_7 = -0; }int rubble_5_7 = (rc.canSenseLocation(loc_5_7) && !rc.isLocationOccupied(loc_5_7))? 20 + 2 * rc.senseRubble(loc_5_7) : 100000;
if (loc_5_7.equals(destination)) { rubble_5_7 = -0; }int rubble_6_7 = (rc.canSenseLocation(loc_6_7) && !rc.isLocationOccupied(loc_6_7))? 20 + 2 * rc.senseRubble(loc_6_7) : 100000;
if (loc_6_7.equals(destination)) { rubble_6_7 = -0; }int rubble_7_7 = (rc.canSenseLocation(loc_7_7) && !rc.isLocationOccupied(loc_7_7))? 20 + 2 * rc.senseRubble(loc_7_7) : 100000;
if (loc_7_7.equals(destination)) { rubble_7_7 = -0; }int rubble_7_6 = (rc.canSenseLocation(loc_7_6) && !rc.isLocationOccupied(loc_7_6))? 20 + 2 * rc.senseRubble(loc_7_6) : 100000;
if (loc_7_6.equals(destination)) { rubble_7_6 = -0; }int rubble_7_5 = (rc.canSenseLocation(loc_7_5) && !rc.isLocationOccupied(loc_7_5))? 20 + 2 * rc.senseRubble(loc_7_5) : 100000;
if (loc_7_5.equals(destination)) { rubble_7_5 = -0; }int rubble_7_4 = (rc.canSenseLocation(loc_7_4) && !rc.isLocationOccupied(loc_7_4))? 20 + 2 * rc.senseRubble(loc_7_4) : 100000;
if (loc_7_4.equals(destination)) { rubble_7_4 = -0; }int rubble_7_3 = (rc.canSenseLocation(loc_7_3) && !rc.isLocationOccupied(loc_7_3))? 20 + 2 * rc.senseRubble(loc_7_3) : 100000;
if (loc_7_3.equals(destination)) { rubble_7_3 = -0; }int rubble_7_2 = (rc.canSenseLocation(loc_7_2) && !rc.isLocationOccupied(loc_7_2))? 20 + 2 * rc.senseRubble(loc_7_2) : 100000;
if (loc_7_2.equals(destination)) { rubble_7_2 = -0; }int rubble_7_1 = (rc.canSenseLocation(loc_7_1) && !rc.isLocationOccupied(loc_7_1))? 20 + 2 * rc.senseRubble(loc_7_1) : 100000;
if (loc_7_1.equals(destination)) { rubble_7_1 = -0; }int rubble_6_1 = (rc.canSenseLocation(loc_6_1) && !rc.isLocationOccupied(loc_6_1))? 20 + 2 * rc.senseRubble(loc_6_1) : 100000;
if (loc_6_1.equals(destination)) { rubble_6_1 = -0; }int rubble_5_1 = (rc.canSenseLocation(loc_5_1) && !rc.isLocationOccupied(loc_5_1))? 20 + 2 * rc.senseRubble(loc_5_1) : 100000;
if (loc_5_1.equals(destination)) { rubble_5_1 = -0; }int rubble_4_1 = (rc.canSenseLocation(loc_4_1) && !rc.isLocationOccupied(loc_4_1))? 20 + 2 * rc.senseRubble(loc_4_1) : 100000;
if (loc_4_1.equals(destination)) { rubble_4_1 = -0; }int rubble_4_6 = (rc.canSenseLocation(loc_4_6) && !rc.isLocationOccupied(loc_4_6))? 20 + 2 * rc.senseRubble(loc_4_6) : 100000;
if (loc_4_6.equals(destination)) { rubble_4_6 = -0; }int rubble_5_6 = (rc.canSenseLocation(loc_5_6) && !rc.isLocationOccupied(loc_5_6))? 20 + 2 * rc.senseRubble(loc_5_6) : 100000;
if (loc_5_6.equals(destination)) { rubble_5_6 = -0; }int rubble_6_6 = (rc.canSenseLocation(loc_6_6) && !rc.isLocationOccupied(loc_6_6))? 20 + 2 * rc.senseRubble(loc_6_6) : 100000;
if (loc_6_6.equals(destination)) { rubble_6_6 = -0; }int rubble_6_5 = (rc.canSenseLocation(loc_6_5) && !rc.isLocationOccupied(loc_6_5))? 20 + 2 * rc.senseRubble(loc_6_5) : 100000;
if (loc_6_5.equals(destination)) { rubble_6_5 = -0; }int rubble_6_4 = (rc.canSenseLocation(loc_6_4) && !rc.isLocationOccupied(loc_6_4))? 20 + 2 * rc.senseRubble(loc_6_4) : 100000;
if (loc_6_4.equals(destination)) { rubble_6_4 = -0; }int rubble_6_3 = (rc.canSenseLocation(loc_6_3) && !rc.isLocationOccupied(loc_6_3))? 20 + 2 * rc.senseRubble(loc_6_3) : 100000;
if (loc_6_3.equals(destination)) { rubble_6_3 = -0; }int rubble_6_2 = (rc.canSenseLocation(loc_6_2) && !rc.isLocationOccupied(loc_6_2))? 20 + 2 * rc.senseRubble(loc_6_2) : 100000;
if (loc_6_2.equals(destination)) { rubble_6_2 = -0; }int rubble_5_2 = (rc.canSenseLocation(loc_5_2) && !rc.isLocationOccupied(loc_5_2))? 20 + 2 * rc.senseRubble(loc_5_2) : 100000;
if (loc_5_2.equals(destination)) { rubble_5_2 = -0; }int rubble_4_2 = (rc.canSenseLocation(loc_4_2) && !rc.isLocationOccupied(loc_4_2))? 20 + 2 * rc.senseRubble(loc_4_2) : 100000;
if (loc_4_2.equals(destination)) { rubble_4_2 = -0; }int rubble_4_5 = (rc.canSenseLocation(loc_4_5) && !rc.isLocationOccupied(loc_4_5))? 20 + 2 * rc.senseRubble(loc_4_5) : 100000;
if (loc_4_5.equals(destination)) { rubble_4_5 = -0; }int rubble_5_5 = (rc.canSenseLocation(loc_5_5) && !rc.isLocationOccupied(loc_5_5))? 20 + 2 * rc.senseRubble(loc_5_5) : 100000;
if (loc_5_5.equals(destination)) { rubble_5_5 = -0; }int rubble_5_4 = (rc.canSenseLocation(loc_5_4) && !rc.isLocationOccupied(loc_5_4))? 20 + 2 * rc.senseRubble(loc_5_4) : 100000;
if (loc_5_4.equals(destination)) { rubble_5_4 = -0; }int rubble_5_3 = (rc.canSenseLocation(loc_5_3) && !rc.isLocationOccupied(loc_5_3))? 20 + 2 * rc.senseRubble(loc_5_3) : 100000;
if (loc_5_3.equals(destination)) { rubble_5_3 = -0; }int rubble_4_3 = (rc.canSenseLocation(loc_4_3) && !rc.isLocationOccupied(loc_4_3))? 20 + 2 * rc.senseRubble(loc_4_3) : 100000;
if (loc_4_3.equals(destination)) { rubble_4_3 = -0; }int score_4_8 = 1000000000;
int score_5_8 = 1000000000;
int score_6_8 = 1000000000;
int score_8_6 = 1000000000;
int score_8_5 = 1000000000;
int score_8_4 = 1000000000;
int score_8_3 = 1000000000;
int score_8_2 = 1000000000;
int score_6_0 = 1000000000;
int score_5_0 = 1000000000;
int score_4_0 = 1000000000;
int score_4_7 = 1000000000;
int score_5_7 = 1000000000;
int score_6_7 = 1000000000;
int score_7_7 = 1000000000;
int score_7_6 = 1000000000;
int score_7_5 = 1000000000;
int score_7_4 = 1000000000;
int score_7_3 = 1000000000;
int score_7_2 = 1000000000;
int score_7_1 = 1000000000;
int score_6_1 = 1000000000;
int score_5_1 = 1000000000;
int score_4_1 = 1000000000;
int score_4_6 = 1000000000;
int score_5_6 = 1000000000;
int score_6_6 = 1000000000;
int score_6_5 = 1000000000;
int score_6_4 = 1000000000;
int score_6_3 = 1000000000;
int score_6_2 = 1000000000;
int score_5_2 = 1000000000;
int score_4_2 = 1000000000;
int score_4_5 = 1000000000;
int score_5_5 = 1000000000;
int score_5_4 = 1000000000;
int score_5_3 = 1000000000;
int score_4_3 = 1000000000;
score_4_8 = man(loc_4_8, destination) * (20 + 0) + rubble_4_8;
score_5_8 = man(loc_5_8, destination) * (20 + 0) + rubble_5_8;
score_6_8 = man(loc_6_8, destination) * (20 + 0) + rubble_6_8;
score_8_6 = man(loc_8_6, destination) * (20 + 0) + rubble_8_6;
score_8_5 = man(loc_8_5, destination) * (20 + 0) + rubble_8_5;
score_8_4 = man(loc_8_4, destination) * (20 + 0) + rubble_8_4;
score_8_3 = man(loc_8_3, destination) * (20 + 0) + rubble_8_3;
score_8_2 = man(loc_8_2, destination) * (20 + 0) + rubble_8_2;
score_6_0 = man(loc_6_0, destination) * (20 + 0) + rubble_6_0;
score_5_0 = man(loc_5_0, destination) * (20 + 0) + rubble_5_0;
score_4_0 = man(loc_4_0, destination) * (20 + 0) + rubble_4_0;
score_5_8 = Math.min(score_5_8, score_4_8 + rubble_5_8);
score_6_8 = Math.min(score_6_8, score_5_8 + rubble_6_8);
score_8_5 = Math.min(score_8_5, score_8_6 + rubble_8_5);
score_8_4 = Math.min(score_8_4, score_8_5 + rubble_8_4);
score_8_3 = Math.min(score_8_3, score_8_4 + rubble_8_3);
score_8_2 = Math.min(score_8_2, score_8_3 + rubble_8_2);
score_5_0 = Math.min(score_5_0, score_6_0 + rubble_5_0);
score_4_0 = Math.min(score_4_0, score_5_0 + rubble_4_0);
score_5_0 = Math.min(score_5_0, score_4_0 + rubble_5_0);
score_6_0 = Math.min(score_6_0, score_5_0 + rubble_6_0);
score_8_3 = Math.min(score_8_3, score_8_2 + rubble_8_3);
score_8_4 = Math.min(score_8_4, score_8_3 + rubble_8_4);
score_8_5 = Math.min(score_8_5, score_8_4 + rubble_8_5);
score_8_6 = Math.min(score_8_6, score_8_5 + rubble_8_6);
score_5_8 = Math.min(score_5_8, score_6_8 + rubble_5_8);
score_4_8 = Math.min(score_4_8, score_5_8 + rubble_4_8);
score_4_1 = Math.min(score_4_1, score_4_0 + rubble_4_1);
score_4_1 = Math.min(score_4_1, score_5_0 + rubble_4_1);
score_5_1 = Math.min(score_5_1, score_4_0 + rubble_5_1);
score_5_1 = Math.min(score_5_1, score_5_0 + rubble_5_1);
score_5_1 = Math.min(score_5_1, score_6_0 + rubble_5_1);
score_6_1 = Math.min(score_6_1, score_5_0 + rubble_6_1);
score_6_1 = Math.min(score_6_1, score_6_0 + rubble_6_1);
score_7_1 = Math.min(score_7_1, score_6_0 + rubble_7_1);
score_7_1 = Math.min(score_7_1, score_8_2 + rubble_7_1);
score_7_2 = Math.min(score_7_2, score_8_2 + rubble_7_2);
score_7_2 = Math.min(score_7_2, score_8_3 + rubble_7_2);
score_7_3 = Math.min(score_7_3, score_8_2 + rubble_7_3);
score_7_3 = Math.min(score_7_3, score_8_3 + rubble_7_3);
score_7_3 = Math.min(score_7_3, score_8_4 + rubble_7_3);
score_7_4 = Math.min(score_7_4, score_8_3 + rubble_7_4);
score_7_4 = Math.min(score_7_4, score_8_4 + rubble_7_4);
score_7_4 = Math.min(score_7_4, score_8_5 + rubble_7_4);
score_7_5 = Math.min(score_7_5, score_8_4 + rubble_7_5);
score_7_5 = Math.min(score_7_5, score_8_5 + rubble_7_5);
score_7_5 = Math.min(score_7_5, score_8_6 + rubble_7_5);
score_7_6 = Math.min(score_7_6, score_8_5 + rubble_7_6);
score_7_6 = Math.min(score_7_6, score_8_6 + rubble_7_6);
score_7_7 = Math.min(score_7_7, score_8_6 + rubble_7_7);
score_7_7 = Math.min(score_7_7, score_6_8 + rubble_7_7);
score_6_7 = Math.min(score_6_7, score_6_8 + rubble_6_7);
score_6_7 = Math.min(score_6_7, score_5_8 + rubble_6_7);
score_5_7 = Math.min(score_5_7, score_6_8 + rubble_5_7);
score_5_7 = Math.min(score_5_7, score_5_8 + rubble_5_7);
score_5_7 = Math.min(score_5_7, score_4_8 + rubble_5_7);
score_4_7 = Math.min(score_4_7, score_5_8 + rubble_4_7);
score_4_7 = Math.min(score_4_7, score_4_8 + rubble_4_7);
score_5_7 = Math.min(score_5_7, score_4_7 + rubble_5_7);
score_6_7 = Math.min(score_6_7, score_5_7 + rubble_6_7);
score_7_7 = Math.min(score_7_7, score_6_7 + rubble_7_7);
score_7_6 = Math.min(score_7_6, score_7_7 + rubble_7_6);
score_7_6 = Math.min(score_7_6, score_6_7 + rubble_7_6);
score_7_5 = Math.min(score_7_5, score_7_6 + rubble_7_5);
score_7_4 = Math.min(score_7_4, score_7_5 + rubble_7_4);
score_7_3 = Math.min(score_7_3, score_7_4 + rubble_7_3);
score_7_2 = Math.min(score_7_2, score_7_3 + rubble_7_2);
score_7_1 = Math.min(score_7_1, score_7_2 + rubble_7_1);
score_6_1 = Math.min(score_6_1, score_7_1 + rubble_6_1);
score_6_1 = Math.min(score_6_1, score_7_2 + rubble_6_1);
score_5_1 = Math.min(score_5_1, score_6_1 + rubble_5_1);
score_4_1 = Math.min(score_4_1, score_5_1 + rubble_4_1);
score_5_1 = Math.min(score_5_1, score_4_1 + rubble_5_1);
score_6_1 = Math.min(score_6_1, score_5_1 + rubble_6_1);
score_7_1 = Math.min(score_7_1, score_6_1 + rubble_7_1);
score_7_2 = Math.min(score_7_2, score_7_1 + rubble_7_2);
score_7_2 = Math.min(score_7_2, score_6_1 + rubble_7_2);
score_7_3 = Math.min(score_7_3, score_7_2 + rubble_7_3);
score_7_4 = Math.min(score_7_4, score_7_3 + rubble_7_4);
score_7_5 = Math.min(score_7_5, score_7_4 + rubble_7_5);
score_7_6 = Math.min(score_7_6, score_7_5 + rubble_7_6);
score_7_7 = Math.min(score_7_7, score_7_6 + rubble_7_7);
score_6_7 = Math.min(score_6_7, score_7_7 + rubble_6_7);
score_6_7 = Math.min(score_6_7, score_7_6 + rubble_6_7);
score_5_7 = Math.min(score_5_7, score_6_7 + rubble_5_7);
score_4_7 = Math.min(score_4_7, score_5_7 + rubble_4_7);
score_4_2 = Math.min(score_4_2, score_4_1 + rubble_4_2);
score_4_2 = Math.min(score_4_2, score_5_1 + rubble_4_2);
score_5_2 = Math.min(score_5_2, score_4_1 + rubble_5_2);
score_5_2 = Math.min(score_5_2, score_5_1 + rubble_5_2);
score_5_2 = Math.min(score_5_2, score_6_1 + rubble_5_2);
score_6_2 = Math.min(score_6_2, score_5_1 + rubble_6_2);
score_6_2 = Math.min(score_6_2, score_6_1 + rubble_6_2);
score_6_2 = Math.min(score_6_2, score_7_1 + rubble_6_2);
score_6_2 = Math.min(score_6_2, score_7_2 + rubble_6_2);
score_6_2 = Math.min(score_6_2, score_7_3 + rubble_6_2);
score_6_3 = Math.min(score_6_3, score_7_2 + rubble_6_3);
score_6_3 = Math.min(score_6_3, score_7_3 + rubble_6_3);
score_6_3 = Math.min(score_6_3, score_7_4 + rubble_6_3);
score_6_4 = Math.min(score_6_4, score_7_3 + rubble_6_4);
score_6_4 = Math.min(score_6_4, score_7_4 + rubble_6_4);
score_6_4 = Math.min(score_6_4, score_7_5 + rubble_6_4);
score_6_5 = Math.min(score_6_5, score_7_4 + rubble_6_5);
score_6_5 = Math.min(score_6_5, score_7_5 + rubble_6_5);
score_6_5 = Math.min(score_6_5, score_7_6 + rubble_6_5);
score_6_6 = Math.min(score_6_6, score_7_5 + rubble_6_6);
score_6_6 = Math.min(score_6_6, score_7_6 + rubble_6_6);
score_6_6 = Math.min(score_6_6, score_7_7 + rubble_6_6);
score_6_6 = Math.min(score_6_6, score_6_7 + rubble_6_6);
score_6_6 = Math.min(score_6_6, score_5_7 + rubble_6_6);
score_5_6 = Math.min(score_5_6, score_6_7 + rubble_5_6);
score_5_6 = Math.min(score_5_6, score_5_7 + rubble_5_6);
score_5_6 = Math.min(score_5_6, score_4_7 + rubble_5_6);
score_4_6 = Math.min(score_4_6, score_5_7 + rubble_4_6);
score_4_6 = Math.min(score_4_6, score_4_7 + rubble_4_6);
score_5_6 = Math.min(score_5_6, score_4_6 + rubble_5_6);
score_6_6 = Math.min(score_6_6, score_5_6 + rubble_6_6);
score_6_5 = Math.min(score_6_5, score_6_6 + rubble_6_5);
score_6_5 = Math.min(score_6_5, score_5_6 + rubble_6_5);
score_6_4 = Math.min(score_6_4, score_6_5 + rubble_6_4);
score_6_3 = Math.min(score_6_3, score_6_4 + rubble_6_3);
score_6_2 = Math.min(score_6_2, score_6_3 + rubble_6_2);
score_5_2 = Math.min(score_5_2, score_6_2 + rubble_5_2);
score_5_2 = Math.min(score_5_2, score_6_3 + rubble_5_2);
score_4_2 = Math.min(score_4_2, score_5_2 + rubble_4_2);
score_5_2 = Math.min(score_5_2, score_4_2 + rubble_5_2);
score_6_2 = Math.min(score_6_2, score_5_2 + rubble_6_2);
score_6_3 = Math.min(score_6_3, score_6_2 + rubble_6_3);
score_6_3 = Math.min(score_6_3, score_5_2 + rubble_6_3);
score_6_4 = Math.min(score_6_4, score_6_3 + rubble_6_4);
score_6_5 = Math.min(score_6_5, score_6_4 + rubble_6_5);
score_6_6 = Math.min(score_6_6, score_6_5 + rubble_6_6);
score_5_6 = Math.min(score_5_6, score_6_6 + rubble_5_6);
score_5_6 = Math.min(score_5_6, score_6_5 + rubble_5_6);
score_4_6 = Math.min(score_4_6, score_5_6 + rubble_4_6);
score_4_3 = Math.min(score_4_3, score_4_2 + rubble_4_3);
score_4_3 = Math.min(score_4_3, score_5_2 + rubble_4_3);
score_5_3 = Math.min(score_5_3, score_4_2 + rubble_5_3);
score_5_3 = Math.min(score_5_3, score_5_2 + rubble_5_3);
score_5_3 = Math.min(score_5_3, score_6_2 + rubble_5_3);
score_5_3 = Math.min(score_5_3, score_6_3 + rubble_5_3);
score_5_3 = Math.min(score_5_3, score_6_4 + rubble_5_3);
score_5_4 = Math.min(score_5_4, score_6_3 + rubble_5_4);
score_5_4 = Math.min(score_5_4, score_6_4 + rubble_5_4);
score_5_4 = Math.min(score_5_4, score_6_5 + rubble_5_4);
score_5_5 = Math.min(score_5_5, score_6_4 + rubble_5_5);
score_5_5 = Math.min(score_5_5, score_6_5 + rubble_5_5);
score_5_5 = Math.min(score_5_5, score_6_6 + rubble_5_5);
score_5_5 = Math.min(score_5_5, score_5_6 + rubble_5_5);
score_5_5 = Math.min(score_5_5, score_4_6 + rubble_5_5);
score_4_5 = Math.min(score_4_5, score_5_6 + rubble_4_5);
score_4_5 = Math.min(score_4_5, score_4_6 + rubble_4_5);
score_4_5 = Math.min(score_4_5, score_4_3 + rubble_4_5);
score_5_5 = Math.min(score_5_5, score_4_5 + rubble_5_5);
score_5_4 = Math.min(score_5_4, score_5_5 + rubble_5_4);
score_5_4 = Math.min(score_5_4, score_4_5 + rubble_5_4);
score_5_3 = Math.min(score_5_3, score_5_4 + rubble_5_3);
score_4_3 = Math.min(score_4_3, score_5_3 + rubble_4_3);
score_4_3 = Math.min(score_4_3, score_5_4 + rubble_4_3);
score_4_3 = Math.min(score_4_3, score_5_5 + rubble_4_3);
score_5_3 = Math.min(score_5_3, score_4_3 + rubble_5_3);
score_5_4 = Math.min(score_5_4, score_5_3 + rubble_5_4);
score_5_4 = Math.min(score_5_4, score_4_3 + rubble_5_4);
score_5_5 = Math.min(score_5_5, score_5_4 + rubble_5_5);
score_4_5 = Math.min(score_4_5, score_5_5 + rubble_4_5);
score_4_5 = Math.min(score_4_5, score_5_4 + rubble_4_5);
score_4_2 = Math.min(score_4_2, score_4_3 + rubble_4_2);
score_5_2 = Math.min(score_5_2, score_4_3 + rubble_5_2);
score_4_2 = Math.min(score_4_2, score_5_3 + rubble_4_2);
score_5_2 = Math.min(score_5_2, score_5_3 + rubble_5_2);
score_6_2 = Math.min(score_6_2, score_5_3 + rubble_6_2);
score_6_3 = Math.min(score_6_3, score_5_3 + rubble_6_3);
score_6_4 = Math.min(score_6_4, score_5_3 + rubble_6_4);
score_6_3 = Math.min(score_6_3, score_5_4 + rubble_6_3);
score_6_4 = Math.min(score_6_4, score_5_4 + rubble_6_4);
score_6_5 = Math.min(score_6_5, score_5_4 + rubble_6_5);
score_6_4 = Math.min(score_6_4, score_5_5 + rubble_6_4);
score_6_5 = Math.min(score_6_5, score_5_5 + rubble_6_5);
score_6_6 = Math.min(score_6_6, score_5_5 + rubble_6_6);
score_5_6 = Math.min(score_5_6, score_5_5 + rubble_5_6);
score_4_6 = Math.min(score_4_6, score_5_5 + rubble_4_6);
score_5_6 = Math.min(score_5_6, score_4_5 + rubble_5_6);
score_4_6 = Math.min(score_4_6, score_4_5 + rubble_4_6);
score_4_1 = Math.min(score_4_1, score_4_2 + rubble_4_1);
score_5_1 = Math.min(score_5_1, score_4_2 + rubble_5_1);
score_4_1 = Math.min(score_4_1, score_5_2 + rubble_4_1);
score_5_1 = Math.min(score_5_1, score_5_2 + rubble_5_1);
score_6_1 = Math.min(score_6_1, score_5_2 + rubble_6_1);
score_5_1 = Math.min(score_5_1, score_6_2 + rubble_5_1);
score_6_1 = Math.min(score_6_1, score_6_2 + rubble_6_1);
score_7_1 = Math.min(score_7_1, score_6_2 + rubble_7_1);
score_7_2 = Math.min(score_7_2, score_6_2 + rubble_7_2);
score_7_3 = Math.min(score_7_3, score_6_2 + rubble_7_3);
score_7_2 = Math.min(score_7_2, score_6_3 + rubble_7_2);
score_7_3 = Math.min(score_7_3, score_6_3 + rubble_7_3);
score_7_4 = Math.min(score_7_4, score_6_3 + rubble_7_4);
score_7_3 = Math.min(score_7_3, score_6_4 + rubble_7_3);
score_7_4 = Math.min(score_7_4, score_6_4 + rubble_7_4);
score_7_5 = Math.min(score_7_5, score_6_4 + rubble_7_5);
score_7_4 = Math.min(score_7_4, score_6_5 + rubble_7_4);
score_7_5 = Math.min(score_7_5, score_6_5 + rubble_7_5);
score_7_6 = Math.min(score_7_6, score_6_5 + rubble_7_6);
score_7_5 = Math.min(score_7_5, score_6_6 + rubble_7_5);
score_7_6 = Math.min(score_7_6, score_6_6 + rubble_7_6);
score_7_7 = Math.min(score_7_7, score_6_6 + rubble_7_7);
score_6_7 = Math.min(score_6_7, score_6_6 + rubble_6_7);
score_5_7 = Math.min(score_5_7, score_6_6 + rubble_5_7);
score_6_7 = Math.min(score_6_7, score_5_6 + rubble_6_7);
score_5_7 = Math.min(score_5_7, score_5_6 + rubble_5_7);
score_4_7 = Math.min(score_4_7, score_5_6 + rubble_4_7);
score_5_7 = Math.min(score_5_7, score_4_6 + rubble_5_7);
score_4_7 = Math.min(score_4_7, score_4_6 + rubble_4_7);
score_4_0 = Math.min(score_4_0, score_4_1 + rubble_4_0);
score_5_0 = Math.min(score_5_0, score_4_1 + rubble_5_0);
score_4_0 = Math.min(score_4_0, score_5_1 + rubble_4_0);
score_5_0 = Math.min(score_5_0, score_5_1 + rubble_5_0);
score_6_0 = Math.min(score_6_0, score_5_1 + rubble_6_0);
score_5_0 = Math.min(score_5_0, score_6_1 + rubble_5_0);
score_6_0 = Math.min(score_6_0, score_6_1 + rubble_6_0);
score_6_0 = Math.min(score_6_0, score_7_1 + rubble_6_0);
score_8_2 = Math.min(score_8_2, score_7_1 + rubble_8_2);
score_8_2 = Math.min(score_8_2, score_7_2 + rubble_8_2);
score_8_3 = Math.min(score_8_3, score_7_2 + rubble_8_3);
score_8_2 = Math.min(score_8_2, score_7_3 + rubble_8_2);
score_8_3 = Math.min(score_8_3, score_7_3 + rubble_8_3);
score_8_4 = Math.min(score_8_4, score_7_3 + rubble_8_4);
score_8_3 = Math.min(score_8_3, score_7_4 + rubble_8_3);
score_8_4 = Math.min(score_8_4, score_7_4 + rubble_8_4);
score_8_5 = Math.min(score_8_5, score_7_4 + rubble_8_5);
score_8_4 = Math.min(score_8_4, score_7_5 + rubble_8_4);
score_8_5 = Math.min(score_8_5, score_7_5 + rubble_8_5);
score_8_6 = Math.min(score_8_6, score_7_5 + rubble_8_6);
score_8_5 = Math.min(score_8_5, score_7_6 + rubble_8_5);
score_8_6 = Math.min(score_8_6, score_7_6 + rubble_8_6);
score_8_6 = Math.min(score_8_6, score_7_7 + rubble_8_6);
score_6_8 = Math.min(score_6_8, score_7_7 + rubble_6_8);
score_6_8 = Math.min(score_6_8, score_6_7 + rubble_6_8);
score_5_8 = Math.min(score_5_8, score_6_7 + rubble_5_8);
score_6_8 = Math.min(score_6_8, score_5_7 + rubble_6_8);
score_5_8 = Math.min(score_5_8, score_5_7 + rubble_5_8);
score_4_8 = Math.min(score_4_8, score_5_7 + rubble_4_8);
score_5_8 = Math.min(score_5_8, score_4_7 + rubble_5_8);
score_4_8 = Math.min(score_4_8, score_4_7 + rubble_4_8);
Direction go = Direction.CENTER;
int best = Integer.MAX_VALUE;
if (score_4_5 < best) {
best = score_4_5;
go = cur.directionTo(loc_4_5);
}
if (score_5_5 < best) {
best = score_5_5;
go = cur.directionTo(loc_5_5);
}
if (score_5_4 < best) {
best = score_5_4;
go = cur.directionTo(loc_5_4);
}
if (score_5_3 < best) {
best = score_5_3;
go = cur.directionTo(loc_5_3);
}
if (score_4_3 < best) {
best = score_4_3;
go = cur.directionTo(loc_4_3);
}
if (rc.canMove(go)) rc.move(go);
if (cur.equals(new MapLocation(27, 25))) { System.out.println(score_4_8 + " " + "score_4_8");
System.out.println(score_5_8 + " " + "score_5_8");
System.out.println(score_6_8 + " " + "score_6_8");
System.out.println(score_8_6 + " " + "score_8_6");
System.out.println(score_8_5 + " " + "score_8_5");
System.out.println(score_8_4 + " " + "score_8_4");
System.out.println(score_8_3 + " " + "score_8_3");
System.out.println(score_8_2 + " " + "score_8_2");
System.out.println(score_6_0 + " " + "score_6_0");
System.out.println(score_5_0 + " " + "score_5_0");
System.out.println(score_4_0 + " " + "score_4_0");

System.out.println(score_4_7 + " " + "score_4_7");
System.out.println(score_5_7 + " " + "score_5_7");
System.out.println(score_6_7 + " " + "score_6_7");
System.out.println(score_7_7 + " " + "score_7_7");
System.out.println(score_7_6 + " " + "score_7_6");
System.out.println(score_7_5 + " " + "score_7_5");
System.out.println(score_7_4 + " " + "score_7_4");
System.out.println(score_7_3 + " " + "score_7_3");
System.out.println(score_7_2 + " " + "score_7_2");
System.out.println(score_7_1 + " " + "score_7_1");
System.out.println(score_6_1 + " " + "score_6_1");
System.out.println(score_5_1 + " " + "score_5_1");
System.out.println(score_4_1 + " " + "score_4_1");

System.out.println(score_4_6 + " " + "score_4_6");
System.out.println(score_5_6 + " " + "score_5_6");
System.out.println(score_6_6 + " " + "score_6_6");
System.out.println(score_6_5 + " " + "score_6_5");
System.out.println(score_6_4 + " " + "score_6_4");
System.out.println(score_6_3 + " " + "score_6_3");
System.out.println(score_6_2 + " " + "score_6_2");
System.out.println(score_5_2 + " " + "score_5_2");
System.out.println(score_4_2 + " " + "score_4_2");

System.out.println(score_4_5 + " " + "score_4_5");
System.out.println(score_5_5 + " " + "score_5_5");
System.out.println(score_5_4 + " " + "score_5_4");
System.out.println(score_5_3 + " " + "score_5_3");
System.out.println(score_4_3 + " " + "score_4_3");

}
}
static void NORTHEAST(RobotController rc, MapLocation destination) throws GameActionException {
MapLocation cur = rc.getLocation();
MapLocation loc_2_8 = cur.translate(-2, 4);
MapLocation loc_3_8 = cur.translate(-1, 4);
MapLocation loc_4_8 = cur.translate(0, 4);
MapLocation loc_5_8 = cur.translate(1, 4);
MapLocation loc_6_8 = cur.translate(2, 4);
MapLocation loc_8_6 = cur.translate(4, 2);
MapLocation loc_8_5 = cur.translate(4, 1);
MapLocation loc_8_4 = cur.translate(4, 0);
MapLocation loc_8_3 = cur.translate(4, -1);
MapLocation loc_8_2 = cur.translate(4, -2);
MapLocation loc_1_7 = cur.translate(-3, 3);
MapLocation loc_2_7 = cur.translate(-2, 3);
MapLocation loc_3_7 = cur.translate(-1, 3);
MapLocation loc_4_7 = cur.translate(0, 3);
MapLocation loc_5_7 = cur.translate(1, 3);
MapLocation loc_6_7 = cur.translate(2, 3);
MapLocation loc_7_7 = cur.translate(3, 3);
MapLocation loc_7_6 = cur.translate(3, 2);
MapLocation loc_7_5 = cur.translate(3, 1);
MapLocation loc_7_4 = cur.translate(3, 0);
MapLocation loc_7_3 = cur.translate(3, -1);
MapLocation loc_7_2 = cur.translate(3, -2);
MapLocation loc_7_1 = cur.translate(3, -3);
MapLocation loc_2_6 = cur.translate(-2, 2);
MapLocation loc_3_6 = cur.translate(-1, 2);
MapLocation loc_4_6 = cur.translate(0, 2);
MapLocation loc_5_6 = cur.translate(1, 2);
MapLocation loc_6_6 = cur.translate(2, 2);
MapLocation loc_6_5 = cur.translate(2, 1);
MapLocation loc_6_4 = cur.translate(2, 0);
MapLocation loc_6_3 = cur.translate(2, -1);
MapLocation loc_6_2 = cur.translate(2, -2);
MapLocation loc_3_5 = cur.translate(-1, 1);
MapLocation loc_4_5 = cur.translate(0, 1);
MapLocation loc_5_5 = cur.translate(1, 1);
MapLocation loc_5_4 = cur.translate(1, 0);
MapLocation loc_5_3 = cur.translate(1, -1);
int rubble_2_8 = rc.canSenseLocation(loc_2_8) ? 20 + 2 * rc.senseRubble(loc_2_8) : 100000;
if (loc_2_8.equals(destination)) { rubble_2_8 = -0; }int rubble_3_8 = rc.canSenseLocation(loc_3_8) ? 20 + 2 * rc.senseRubble(loc_3_8) : 100000;
if (loc_3_8.equals(destination)) { rubble_3_8 = -0; }int rubble_4_8 = rc.canSenseLocation(loc_4_8) ? 20 + 2 * rc.senseRubble(loc_4_8) : 100000;
if (loc_4_8.equals(destination)) { rubble_4_8 = -0; }int rubble_5_8 = rc.canSenseLocation(loc_5_8) ? 20 + 2 * rc.senseRubble(loc_5_8) : 100000;
if (loc_5_8.equals(destination)) { rubble_5_8 = -0; }int rubble_6_8 = rc.canSenseLocation(loc_6_8) ? 20 + 2 * rc.senseRubble(loc_6_8) : 100000;
if (loc_6_8.equals(destination)) { rubble_6_8 = -0; }int rubble_8_6 = rc.canSenseLocation(loc_8_6) ? 20 + 2 * rc.senseRubble(loc_8_6) : 100000;
if (loc_8_6.equals(destination)) { rubble_8_6 = -0; }int rubble_8_5 = rc.canSenseLocation(loc_8_5) ? 20 + 2 * rc.senseRubble(loc_8_5) : 100000;
if (loc_8_5.equals(destination)) { rubble_8_5 = -0; }int rubble_8_4 = rc.canSenseLocation(loc_8_4) ? 20 + 2 * rc.senseRubble(loc_8_4) : 100000;
if (loc_8_4.equals(destination)) { rubble_8_4 = -0; }int rubble_8_3 = rc.canSenseLocation(loc_8_3) ? 20 + 2 * rc.senseRubble(loc_8_3) : 100000;
if (loc_8_3.equals(destination)) { rubble_8_3 = -0; }int rubble_8_2 = rc.canSenseLocation(loc_8_2) ? 20 + 2 * rc.senseRubble(loc_8_2) : 100000;
if (loc_8_2.equals(destination)) { rubble_8_2 = -0; }int rubble_1_7 = rc.canSenseLocation(loc_1_7) ? 20 + 2 * rc.senseRubble(loc_1_7) : 100000;
if (loc_1_7.equals(destination)) { rubble_1_7 = -0; }int rubble_2_7 = rc.canSenseLocation(loc_2_7) ? 20 + 2 * rc.senseRubble(loc_2_7) : 100000;
if (loc_2_7.equals(destination)) { rubble_2_7 = -0; }int rubble_3_7 = rc.canSenseLocation(loc_3_7) ? 20 + 2 * rc.senseRubble(loc_3_7) : 100000;
if (loc_3_7.equals(destination)) { rubble_3_7 = -0; }int rubble_4_7 = rc.canSenseLocation(loc_4_7) ? 20 + 2 * rc.senseRubble(loc_4_7) : 100000;
if (loc_4_7.equals(destination)) { rubble_4_7 = -0; }int rubble_5_7 = rc.canSenseLocation(loc_5_7) ? 20 + 2 * rc.senseRubble(loc_5_7) : 100000;
if (loc_5_7.equals(destination)) { rubble_5_7 = -0; }int rubble_6_7 = rc.canSenseLocation(loc_6_7) ? 20 + 2 * rc.senseRubble(loc_6_7) : 100000;
if (loc_6_7.equals(destination)) { rubble_6_7 = -0; }int rubble_7_7 = rc.canSenseLocation(loc_7_7) ? 20 + 2 * rc.senseRubble(loc_7_7) : 100000;
if (loc_7_7.equals(destination)) { rubble_7_7 = -0; }int rubble_7_6 = rc.canSenseLocation(loc_7_6) ? 20 + 2 * rc.senseRubble(loc_7_6) : 100000;
if (loc_7_6.equals(destination)) { rubble_7_6 = -0; }int rubble_7_5 = rc.canSenseLocation(loc_7_5) ? 20 + 2 * rc.senseRubble(loc_7_5) : 100000;
if (loc_7_5.equals(destination)) { rubble_7_5 = -0; }int rubble_7_4 = rc.canSenseLocation(loc_7_4) ? 20 + 2 * rc.senseRubble(loc_7_4) : 100000;
if (loc_7_4.equals(destination)) { rubble_7_4 = -0; }int rubble_7_3 = rc.canSenseLocation(loc_7_3) ? 20 + 2 * rc.senseRubble(loc_7_3) : 100000;
if (loc_7_3.equals(destination)) { rubble_7_3 = -0; }int rubble_7_2 = rc.canSenseLocation(loc_7_2) ? 20 + 2 * rc.senseRubble(loc_7_2) : 100000;
if (loc_7_2.equals(destination)) { rubble_7_2 = -0; }int rubble_7_1 = rc.canSenseLocation(loc_7_1) ? 20 + 2 * rc.senseRubble(loc_7_1) : 100000;
if (loc_7_1.equals(destination)) { rubble_7_1 = -0; }int rubble_2_6 = rc.canSenseLocation(loc_2_6) ? 20 + 2 * rc.senseRubble(loc_2_6) : 100000;
if (loc_2_6.equals(destination)) { rubble_2_6 = -0; }int rubble_3_6 = rc.canSenseLocation(loc_3_6) ? 20 + 2 * rc.senseRubble(loc_3_6) : 100000;
if (loc_3_6.equals(destination)) { rubble_3_6 = -0; }int rubble_4_6 = rc.canSenseLocation(loc_4_6) ? 20 + 2 * rc.senseRubble(loc_4_6) : 100000;
if (loc_4_6.equals(destination)) { rubble_4_6 = -0; }int rubble_5_6 = rc.canSenseLocation(loc_5_6) ? 20 + 2 * rc.senseRubble(loc_5_6) : 100000;
if (loc_5_6.equals(destination)) { rubble_5_6 = -0; }int rubble_6_6 = rc.canSenseLocation(loc_6_6) ? 20 + 2 * rc.senseRubble(loc_6_6) : 100000;
if (loc_6_6.equals(destination)) { rubble_6_6 = -0; }int rubble_6_5 = rc.canSenseLocation(loc_6_5) ? 20 + 2 * rc.senseRubble(loc_6_5) : 100000;
if (loc_6_5.equals(destination)) { rubble_6_5 = -0; }int rubble_6_4 = rc.canSenseLocation(loc_6_4) ? 20 + 2 * rc.senseRubble(loc_6_4) : 100000;
if (loc_6_4.equals(destination)) { rubble_6_4 = -0; }int rubble_6_3 = rc.canSenseLocation(loc_6_3) ? 20 + 2 * rc.senseRubble(loc_6_3) : 100000;
if (loc_6_3.equals(destination)) { rubble_6_3 = -0; }int rubble_6_2 = rc.canSenseLocation(loc_6_2) ? 20 + 2 * rc.senseRubble(loc_6_2) : 100000;
if (loc_6_2.equals(destination)) { rubble_6_2 = -0; }int rubble_3_5 = rc.canSenseLocation(loc_3_5) && !rc.isLocationOccupied(loc_3_5) ? 20 + 2 * rc.senseRubble(loc_3_5) : 100000;
if (loc_3_5.equals(destination)) { rubble_3_5 = -0; }int rubble_4_5 = rc.canSenseLocation(loc_4_5) && !rc.isLocationOccupied(loc_4_5) ? 20 + 2 * rc.senseRubble(loc_4_5) : 100000;
if (loc_4_5.equals(destination)) { rubble_4_5 = -0; }int rubble_5_5 = rc.canSenseLocation(loc_5_5) && !rc.isLocationOccupied(loc_5_5) ? 20 + 2 * rc.senseRubble(loc_5_5) : 100000;
if (loc_5_5.equals(destination)) { rubble_5_5 = -0; }int rubble_5_4 = rc.canSenseLocation(loc_5_4) && !rc.isLocationOccupied(loc_5_4) ? 20 + 2 * rc.senseRubble(loc_5_4) : 100000;
if (loc_5_4.equals(destination)) { rubble_5_4 = -0; }int rubble_5_3 = rc.canSenseLocation(loc_5_3) && !rc.isLocationOccupied(loc_5_3) ? 20 + 2 * rc.senseRubble(loc_5_3) : 100000;
if (loc_5_3.equals(destination)) { rubble_5_3 = -0; }int score_2_8 = 1000000000;
int score_3_8 = 1000000000;
int score_4_8 = 1000000000;
int score_5_8 = 1000000000;
int score_6_8 = 1000000000;
int score_8_6 = 1000000000;
int score_8_5 = 1000000000;
int score_8_4 = 1000000000;
int score_8_3 = 1000000000;
int score_8_2 = 1000000000;
int score_1_7 = 1000000000;
int score_2_7 = 1000000000;
int score_3_7 = 1000000000;
int score_4_7 = 1000000000;
int score_5_7 = 1000000000;
int score_6_7 = 1000000000;
int score_7_7 = 1000000000;
int score_7_6 = 1000000000;
int score_7_5 = 1000000000;
int score_7_4 = 1000000000;
int score_7_3 = 1000000000;
int score_7_2 = 1000000000;
int score_7_1 = 1000000000;
int score_2_6 = 1000000000;
int score_3_6 = 1000000000;
int score_4_6 = 1000000000;
int score_5_6 = 1000000000;
int score_6_6 = 1000000000;
int score_6_5 = 1000000000;
int score_6_4 = 1000000000;
int score_6_3 = 1000000000;
int score_6_2 = 1000000000;
int score_3_5 = 1000000000;
int score_4_5 = 1000000000;
int score_5_5 = 1000000000;
int score_5_4 = 1000000000;
int score_5_3 = 1000000000;
int temp0 = 0;
int temp1 = 0;
int temp2 = 0;
int temp3 = 0;
int temp4 = 0;
int temp5 = 0;
int temp6 = 0;
int temp7 = 0;
int temp8 = 0;
int temp9 = 0;
int temp10 = 0;
int temp11 = 0;
int temp12 = 0;
int runningMin = 100000;
score_2_8 = man(loc_2_8, destination) * (20 + 0) + rubble_2_8;
score_3_8 = man(loc_3_8, destination) * (20 + 0) + rubble_3_8;
score_4_8 = man(loc_4_8, destination) * (20 + 0) + rubble_4_8;
score_5_8 = man(loc_5_8, destination) * (20 + 0) + rubble_5_8;
score_6_8 = man(loc_6_8, destination) * (20 + 0) + rubble_6_8;
score_8_6 = man(loc_8_6, destination) * (20 + 0) + rubble_8_6;
score_8_5 = man(loc_8_5, destination) * (20 + 0) + rubble_8_5;
score_8_4 = man(loc_8_4, destination) * (20 + 0) + rubble_8_4;
score_8_3 = man(loc_8_3, destination) * (20 + 0) + rubble_8_3;
score_8_2 = man(loc_8_2, destination) * (20 + 0) + rubble_8_2;
score_3_8 = Math.min(score_3_8, score_2_8 + rubble_3_8);
score_4_8 = Math.min(score_4_8, score_3_8 + rubble_4_8);
score_5_8 = Math.min(score_5_8, score_4_8 + rubble_5_8);
score_6_8 = Math.min(score_6_8, score_5_8 + rubble_6_8);
score_8_5 = Math.min(score_8_5, score_8_6 + rubble_8_5);
score_8_4 = Math.min(score_8_4, score_8_5 + rubble_8_4);
score_8_3 = Math.min(score_8_3, score_8_4 + rubble_8_3);
score_8_2 = Math.min(score_8_2, score_8_3 + rubble_8_2);
score_8_3 = Math.min(score_8_3, score_8_2 + rubble_8_3);
score_8_4 = Math.min(score_8_4, score_8_3 + rubble_8_4);
score_8_5 = Math.min(score_8_5, score_8_4 + rubble_8_5);
score_8_6 = Math.min(score_8_6, score_8_5 + rubble_8_6);
score_5_8 = Math.min(score_5_8, score_6_8 + rubble_5_8);
score_4_8 = Math.min(score_4_8, score_5_8 + rubble_4_8);
score_3_8 = Math.min(score_3_8, score_4_8 + rubble_3_8);
score_2_8 = Math.min(score_2_8, score_3_8 + rubble_2_8);
score_7_1 = Math.min(score_7_1, score_8_2 + rubble_7_1);
score_7_2 = Math.min(score_7_2, score_8_2 + rubble_7_2);
score_7_2 = Math.min(score_7_2, score_8_3 + rubble_7_2);
score_7_3 = Math.min(score_7_3, score_8_2 + rubble_7_3);
score_7_3 = Math.min(score_7_3, score_8_3 + rubble_7_3);
score_7_3 = Math.min(score_7_3, score_8_4 + rubble_7_3);
score_7_4 = Math.min(score_7_4, score_8_3 + rubble_7_4);
score_7_4 = Math.min(score_7_4, score_8_4 + rubble_7_4);
score_7_4 = Math.min(score_7_4, score_8_5 + rubble_7_4);
score_7_5 = Math.min(score_7_5, score_8_4 + rubble_7_5);
score_7_5 = Math.min(score_7_5, score_8_5 + rubble_7_5);
score_7_5 = Math.min(score_7_5, score_8_6 + rubble_7_5);
score_7_6 = Math.min(score_7_6, score_8_5 + rubble_7_6);
score_7_6 = Math.min(score_7_6, score_8_6 + rubble_7_6);
score_7_7 = Math.min(score_7_7, score_8_6 + rubble_7_7);
score_7_7 = Math.min(score_7_7, score_6_8 + rubble_7_7);
score_6_7 = Math.min(score_6_7, score_6_8 + rubble_6_7);
score_6_7 = Math.min(score_6_7, score_5_8 + rubble_6_7);
score_5_7 = Math.min(score_5_7, score_6_8 + rubble_5_7);
score_5_7 = Math.min(score_5_7, score_5_8 + rubble_5_7);
score_5_7 = Math.min(score_5_7, score_4_8 + rubble_5_7);
score_4_7 = Math.min(score_4_7, score_5_8 + rubble_4_7);
score_4_7 = Math.min(score_4_7, score_4_8 + rubble_4_7);
score_4_7 = Math.min(score_4_7, score_3_8 + rubble_4_7);
score_3_7 = Math.min(score_3_7, score_4_8 + rubble_3_7);
score_3_7 = Math.min(score_3_7, score_3_8 + rubble_3_7);
score_3_7 = Math.min(score_3_7, score_2_8 + rubble_3_7);
score_2_7 = Math.min(score_2_7, score_3_8 + rubble_2_7);
score_2_7 = Math.min(score_2_7, score_2_8 + rubble_2_7);
score_1_7 = Math.min(score_1_7, score_2_8 + rubble_1_7);
score_2_7 = Math.min(score_2_7, score_1_7 + rubble_2_7);
score_3_7 = Math.min(score_3_7, score_2_7 + rubble_3_7);
score_4_7 = Math.min(score_4_7, score_3_7 + rubble_4_7);
score_5_7 = Math.min(score_5_7, score_4_7 + rubble_5_7);
score_6_7 = Math.min(score_6_7, score_5_7 + rubble_6_7);
score_7_7 = Math.min(score_7_7, score_6_7 + rubble_7_7);
score_7_6 = Math.min(score_7_6, score_7_7 + rubble_7_6);
score_7_6 = Math.min(score_7_6, score_6_7 + rubble_7_6);
score_7_5 = Math.min(score_7_5, score_7_6 + rubble_7_5);
score_7_4 = Math.min(score_7_4, score_7_5 + rubble_7_4);
score_7_3 = Math.min(score_7_3, score_7_4 + rubble_7_3);
score_7_2 = Math.min(score_7_2, score_7_3 + rubble_7_2);
score_7_1 = Math.min(score_7_1, score_7_2 + rubble_7_1);
score_7_2 = Math.min(score_7_2, score_7_1 + rubble_7_2);
score_7_3 = Math.min(score_7_3, score_7_2 + rubble_7_3);
score_7_4 = Math.min(score_7_4, score_7_3 + rubble_7_4);
score_7_5 = Math.min(score_7_5, score_7_4 + rubble_7_5);
score_7_6 = Math.min(score_7_6, score_7_5 + rubble_7_6);
score_7_7 = Math.min(score_7_7, score_7_6 + rubble_7_7);
score_6_7 = Math.min(score_6_7, score_7_7 + rubble_6_7);
score_6_7 = Math.min(score_6_7, score_7_6 + rubble_6_7);
score_5_7 = Math.min(score_5_7, score_6_7 + rubble_5_7);
score_4_7 = Math.min(score_4_7, score_5_7 + rubble_4_7);
score_3_7 = Math.min(score_3_7, score_4_7 + rubble_3_7);
score_2_7 = Math.min(score_2_7, score_3_7 + rubble_2_7);
score_1_7 = Math.min(score_1_7, score_2_7 + rubble_1_7);
score_6_2 = Math.min(score_6_2, score_7_1 + rubble_6_2);
score_6_2 = Math.min(score_6_2, score_7_2 + rubble_6_2);
score_6_2 = Math.min(score_6_2, score_7_3 + rubble_6_2);
score_6_3 = Math.min(score_6_3, score_7_2 + rubble_6_3);
score_6_3 = Math.min(score_6_3, score_7_3 + rubble_6_3);
score_6_3 = Math.min(score_6_3, score_7_4 + rubble_6_3);
score_6_4 = Math.min(score_6_4, score_7_3 + rubble_6_4);
score_6_4 = Math.min(score_6_4, score_7_4 + rubble_6_4);
score_6_4 = Math.min(score_6_4, score_7_5 + rubble_6_4);
score_6_5 = Math.min(score_6_5, score_7_4 + rubble_6_5);
score_6_5 = Math.min(score_6_5, score_7_5 + rubble_6_5);
score_6_5 = Math.min(score_6_5, score_7_6 + rubble_6_5);
score_6_6 = Math.min(score_6_6, score_7_5 + rubble_6_6);
score_6_6 = Math.min(score_6_6, score_7_6 + rubble_6_6);
score_6_6 = Math.min(score_6_6, score_7_7 + rubble_6_6);
score_6_6 = Math.min(score_6_6, score_6_7 + rubble_6_6);
score_6_6 = Math.min(score_6_6, score_5_7 + rubble_6_6);
score_5_6 = Math.min(score_5_6, score_6_7 + rubble_5_6);
score_5_6 = Math.min(score_5_6, score_5_7 + rubble_5_6);
score_5_6 = Math.min(score_5_6, score_4_7 + rubble_5_6);
score_4_6 = Math.min(score_4_6, score_5_7 + rubble_4_6);
score_4_6 = Math.min(score_4_6, score_4_7 + rubble_4_6);
score_4_6 = Math.min(score_4_6, score_3_7 + rubble_4_6);
score_3_6 = Math.min(score_3_6, score_4_7 + rubble_3_6);
score_3_6 = Math.min(score_3_6, score_3_7 + rubble_3_6);
score_3_6 = Math.min(score_3_6, score_2_7 + rubble_3_6);
score_2_6 = Math.min(score_2_6, score_3_7 + rubble_2_6);
score_2_6 = Math.min(score_2_6, score_2_7 + rubble_2_6);
score_2_6 = Math.min(score_2_6, score_1_7 + rubble_2_6);
score_3_6 = Math.min(score_3_6, score_2_6 + rubble_3_6);
score_4_6 = Math.min(score_4_6, score_3_6 + rubble_4_6);
score_5_6 = Math.min(score_5_6, score_4_6 + rubble_5_6);
score_6_6 = Math.min(score_6_6, score_5_6 + rubble_6_6);
score_6_5 = Math.min(score_6_5, score_6_6 + rubble_6_5);
score_6_5 = Math.min(score_6_5, score_5_6 + rubble_6_5);
score_6_4 = Math.min(score_6_4, score_6_5 + rubble_6_4);
score_6_3 = Math.min(score_6_3, score_6_4 + rubble_6_3);
score_6_2 = Math.min(score_6_2, score_6_3 + rubble_6_2);
score_6_3 = Math.min(score_6_3, score_6_2 + rubble_6_3);
score_6_4 = Math.min(score_6_4, score_6_3 + rubble_6_4);
score_6_5 = Math.min(score_6_5, score_6_4 + rubble_6_5);
score_6_6 = Math.min(score_6_6, score_6_5 + rubble_6_6);
score_5_6 = Math.min(score_5_6, score_6_6 + rubble_5_6);
score_5_6 = Math.min(score_5_6, score_6_5 + rubble_5_6);
score_4_6 = Math.min(score_4_6, score_5_6 + rubble_4_6);
score_3_6 = Math.min(score_3_6, score_4_6 + rubble_3_6);
score_2_6 = Math.min(score_2_6, score_3_6 + rubble_2_6);
score_5_3 = Math.min(score_5_3, score_6_2 + rubble_5_3);
score_5_3 = Math.min(score_5_3, score_6_3 + rubble_5_3);
score_5_3 = Math.min(score_5_3, score_6_4 + rubble_5_3);
score_5_4 = Math.min(score_5_4, score_6_3 + rubble_5_4);
score_5_4 = Math.min(score_5_4, score_6_4 + rubble_5_4);
score_5_4 = Math.min(score_5_4, score_6_5 + rubble_5_4);
score_5_5 = Math.min(score_5_5, score_6_4 + rubble_5_5);
score_5_5 = Math.min(score_5_5, score_6_5 + rubble_5_5);
score_5_5 = Math.min(score_5_5, score_6_6 + rubble_5_5);
score_5_5 = Math.min(score_5_5, score_5_6 + rubble_5_5);
score_5_5 = Math.min(score_5_5, score_4_6 + rubble_5_5);
score_4_5 = Math.min(score_4_5, score_5_6 + rubble_4_5);
score_4_5 = Math.min(score_4_5, score_4_6 + rubble_4_5);
score_4_5 = Math.min(score_4_5, score_3_6 + rubble_4_5);
score_3_5 = Math.min(score_3_5, score_4_6 + rubble_3_5);
score_3_5 = Math.min(score_3_5, score_3_6 + rubble_3_5);
score_3_5 = Math.min(score_3_5, score_2_6 + rubble_3_5);
score_4_5 = Math.min(score_4_5, score_3_5 + rubble_4_5);
score_5_5 = Math.min(score_5_5, score_4_5 + rubble_5_5);
score_5_4 = Math.min(score_5_4, score_5_5 + rubble_5_4);
score_5_4 = Math.min(score_5_4, score_4_5 + rubble_5_4);
score_5_3 = Math.min(score_5_3, score_5_4 + rubble_5_3);
score_5_3 = Math.min(score_5_3, score_3_5 + rubble_5_3);
score_5_4 = Math.min(score_5_4, score_5_3 + rubble_5_4);
score_5_4 = Math.min(score_5_4, score_3_5 + rubble_5_4);
score_5_5 = Math.min(score_5_5, score_5_4 + rubble_5_5);
score_4_5 = Math.min(score_4_5, score_5_5 + rubble_4_5);
score_4_5 = Math.min(score_4_5, score_5_4 + rubble_4_5);
score_3_5 = Math.min(score_3_5, score_4_5 + rubble_3_5);
score_6_2 = Math.min(score_6_2, score_5_3 + rubble_6_2);
score_6_3 = Math.min(score_6_3, score_5_3 + rubble_6_3);
score_6_4 = Math.min(score_6_4, score_5_3 + rubble_6_4);
score_6_3 = Math.min(score_6_3, score_5_4 + rubble_6_3);
score_6_4 = Math.min(score_6_4, score_5_4 + rubble_6_4);
score_6_5 = Math.min(score_6_5, score_5_4 + rubble_6_5);
score_6_4 = Math.min(score_6_4, score_5_5 + rubble_6_4);
score_6_5 = Math.min(score_6_5, score_5_5 + rubble_6_5);
score_6_6 = Math.min(score_6_6, score_5_5 + rubble_6_6);
score_5_6 = Math.min(score_5_6, score_5_5 + rubble_5_6);
score_4_6 = Math.min(score_4_6, score_5_5 + rubble_4_6);
score_5_6 = Math.min(score_5_6, score_4_5 + rubble_5_6);
score_4_6 = Math.min(score_4_6, score_4_5 + rubble_4_6);
score_3_6 = Math.min(score_3_6, score_4_5 + rubble_3_6);
score_4_6 = Math.min(score_4_6, score_3_5 + rubble_4_6);
score_3_6 = Math.min(score_3_6, score_3_5 + rubble_3_6);
score_2_6 = Math.min(score_2_6, score_3_5 + rubble_2_6);
score_7_1 = Math.min(score_7_1, score_6_2 + rubble_7_1);
score_7_2 = Math.min(score_7_2, score_6_2 + rubble_7_2);
score_7_3 = Math.min(score_7_3, score_6_2 + rubble_7_3);
score_7_2 = Math.min(score_7_2, score_6_3 + rubble_7_2);
score_7_3 = Math.min(score_7_3, score_6_3 + rubble_7_3);
score_7_4 = Math.min(score_7_4, score_6_3 + rubble_7_4);
score_7_3 = Math.min(score_7_3, score_6_4 + rubble_7_3);
score_7_4 = Math.min(score_7_4, score_6_4 + rubble_7_4);
score_7_5 = Math.min(score_7_5, score_6_4 + rubble_7_5);
score_7_4 = Math.min(score_7_4, score_6_5 + rubble_7_4);
score_7_5 = Math.min(score_7_5, score_6_5 + rubble_7_5);
score_7_6 = Math.min(score_7_6, score_6_5 + rubble_7_6);
score_7_5 = Math.min(score_7_5, score_6_6 + rubble_7_5);
score_7_6 = Math.min(score_7_6, score_6_6 + rubble_7_6);
score_7_7 = Math.min(score_7_7, score_6_6 + rubble_7_7);
score_6_7 = Math.min(score_6_7, score_6_6 + rubble_6_7);
score_5_7 = Math.min(score_5_7, score_6_6 + rubble_5_7);
score_6_7 = Math.min(score_6_7, score_5_6 + rubble_6_7);
score_5_7 = Math.min(score_5_7, score_5_6 + rubble_5_7);
score_4_7 = Math.min(score_4_7, score_5_6 + rubble_4_7);
score_5_7 = Math.min(score_5_7, score_4_6 + rubble_5_7);
score_4_7 = Math.min(score_4_7, score_4_6 + rubble_4_7);
score_3_7 = Math.min(score_3_7, score_4_6 + rubble_3_7);
score_4_7 = Math.min(score_4_7, score_3_6 + rubble_4_7);
score_3_7 = Math.min(score_3_7, score_3_6 + rubble_3_7);
score_2_7 = Math.min(score_2_7, score_3_6 + rubble_2_7);
score_3_7 = Math.min(score_3_7, score_2_6 + rubble_3_7);
score_2_7 = Math.min(score_2_7, score_2_6 + rubble_2_7);
score_1_7 = Math.min(score_1_7, score_2_6 + rubble_1_7);
score_8_2 = Math.min(score_8_2, score_7_1 + rubble_8_2);
score_8_2 = Math.min(score_8_2, score_7_2 + rubble_8_2);
score_8_3 = Math.min(score_8_3, score_7_2 + rubble_8_3);
score_8_2 = Math.min(score_8_2, score_7_3 + rubble_8_2);
score_8_3 = Math.min(score_8_3, score_7_3 + rubble_8_3);
score_8_4 = Math.min(score_8_4, score_7_3 + rubble_8_4);
score_8_3 = Math.min(score_8_3, score_7_4 + rubble_8_3);
score_8_4 = Math.min(score_8_4, score_7_4 + rubble_8_4);
score_8_5 = Math.min(score_8_5, score_7_4 + rubble_8_5);
score_8_4 = Math.min(score_8_4, score_7_5 + rubble_8_4);
score_8_5 = Math.min(score_8_5, score_7_5 + rubble_8_5);
score_8_6 = Math.min(score_8_6, score_7_5 + rubble_8_6);
score_8_5 = Math.min(score_8_5, score_7_6 + rubble_8_5);
score_8_6 = Math.min(score_8_6, score_7_6 + rubble_8_6);
score_8_6 = Math.min(score_8_6, score_7_7 + rubble_8_6);
score_6_8 = Math.min(score_6_8, score_7_7 + rubble_6_8);
score_6_8 = Math.min(score_6_8, score_6_7 + rubble_6_8);
score_5_8 = Math.min(score_5_8, score_6_7 + rubble_5_8);
score_6_8 = Math.min(score_6_8, score_5_7 + rubble_6_8);
score_5_8 = Math.min(score_5_8, score_5_7 + rubble_5_8);
score_4_8 = Math.min(score_4_8, score_5_7 + rubble_4_8);
score_5_8 = Math.min(score_5_8, score_4_7 + rubble_5_8);
score_4_8 = Math.min(score_4_8, score_4_7 + rubble_4_8);
score_3_8 = Math.min(score_3_8, score_4_7 + rubble_3_8);
score_4_8 = Math.min(score_4_8, score_3_7 + rubble_4_8);
score_3_8 = Math.min(score_3_8, score_3_7 + rubble_3_8);
score_2_8 = Math.min(score_2_8, score_3_7 + rubble_2_8);
score_3_8 = Math.min(score_3_8, score_2_7 + rubble_3_8);
score_2_8 = Math.min(score_2_8, score_2_7 + rubble_2_8);
score_2_8 = Math.min(score_2_8, score_1_7 + rubble_2_8);
Direction go = Direction.CENTER;
int best = Integer.MAX_VALUE;
if (score_3_5 < best) {
best = score_3_5;
go = cur.directionTo(loc_3_5);
}
if (score_4_5 < best) {
best = score_4_5;
go = cur.directionTo(loc_4_5);
}
if (score_5_5 < best) {
best = score_5_5;
go = cur.directionTo(loc_5_5);
}
if (score_5_4 < best) {
best = score_5_4;
go = cur.directionTo(loc_5_4);
}
if (score_5_3 < best) {
best = score_5_3;
go = cur.directionTo(loc_5_3);
}
if (rc.canMove(go)) rc.move(go);
if (cur.equals(new MapLocation(27, 25))) { System.out.println(score_2_8 + " " + "score_2_8");
System.out.println(score_3_8 + " " + "score_3_8");
System.out.println(score_4_8 + " " + "score_4_8");
System.out.println(score_5_8 + " " + "score_5_8");
System.out.println(score_6_8 + " " + "score_6_8");
System.out.println(score_8_6 + " " + "score_8_6");
System.out.println(score_8_5 + " " + "score_8_5");
System.out.println(score_8_4 + " " + "score_8_4");
System.out.println(score_8_3 + " " + "score_8_3");
System.out.println(score_8_2 + " " + "score_8_2");

System.out.println(score_1_7 + " " + "score_1_7");
System.out.println(score_2_7 + " " + "score_2_7");
System.out.println(score_3_7 + " " + "score_3_7");
System.out.println(score_4_7 + " " + "score_4_7");
System.out.println(score_5_7 + " " + "score_5_7");
System.out.println(score_6_7 + " " + "score_6_7");
System.out.println(score_7_7 + " " + "score_7_7");
System.out.println(score_7_6 + " " + "score_7_6");
System.out.println(score_7_5 + " " + "score_7_5");
System.out.println(score_7_4 + " " + "score_7_4");
System.out.println(score_7_3 + " " + "score_7_3");
System.out.println(score_7_2 + " " + "score_7_2");
System.out.println(score_7_1 + " " + "score_7_1");

System.out.println(score_2_6 + " " + "score_2_6");
System.out.println(score_3_6 + " " + "score_3_6");
System.out.println(score_4_6 + " " + "score_4_6");
System.out.println(score_5_6 + " " + "score_5_6");
System.out.println(score_6_6 + " " + "score_6_6");
System.out.println(score_6_5 + " " + "score_6_5");
System.out.println(score_6_4 + " " + "score_6_4");
System.out.println(score_6_3 + " " + "score_6_3");
System.out.println(score_6_2 + " " + "score_6_2");

System.out.println(score_3_5 + " " + "score_3_5");
System.out.println(score_4_5 + " " + "score_4_5");
System.out.println(score_5_5 + " " + "score_5_5");
System.out.println(score_5_4 + " " + "score_5_4");
System.out.println(score_5_3 + " " + "score_5_3");

}
}
static void NORTHWEST(RobotController rc, MapLocation destination) throws GameActionException {
MapLocation cur = rc.getLocation();
MapLocation loc_0_2 = cur.translate(-4, -2);
MapLocation loc_0_3 = cur.translate(-4, -1);
MapLocation loc_0_4 = cur.translate(-4, 0);
MapLocation loc_0_5 = cur.translate(-4, 1);
MapLocation loc_0_6 = cur.translate(-4, 2);
MapLocation loc_2_8 = cur.translate(-2, 4);
MapLocation loc_3_8 = cur.translate(-1, 4);
MapLocation loc_4_8 = cur.translate(0, 4);
MapLocation loc_5_8 = cur.translate(1, 4);
MapLocation loc_6_8 = cur.translate(2, 4);
MapLocation loc_1_1 = cur.translate(-3, -3);
MapLocation loc_1_2 = cur.translate(-3, -2);
MapLocation loc_1_3 = cur.translate(-3, -1);
MapLocation loc_1_4 = cur.translate(-3, 0);
MapLocation loc_1_5 = cur.translate(-3, 1);
MapLocation loc_1_6 = cur.translate(-3, 2);
MapLocation loc_1_7 = cur.translate(-3, 3);
MapLocation loc_2_7 = cur.translate(-2, 3);
MapLocation loc_3_7 = cur.translate(-1, 3);
MapLocation loc_4_7 = cur.translate(0, 3);
MapLocation loc_5_7 = cur.translate(1, 3);
MapLocation loc_6_7 = cur.translate(2, 3);
MapLocation loc_7_7 = cur.translate(3, 3);
MapLocation loc_2_2 = cur.translate(-2, -2);
MapLocation loc_2_3 = cur.translate(-2, -1);
MapLocation loc_2_4 = cur.translate(-2, 0);
MapLocation loc_2_5 = cur.translate(-2, 1);
MapLocation loc_2_6 = cur.translate(-2, 2);
MapLocation loc_3_6 = cur.translate(-1, 2);
MapLocation loc_4_6 = cur.translate(0, 2);
MapLocation loc_5_6 = cur.translate(1, 2);
MapLocation loc_6_6 = cur.translate(2, 2);
MapLocation loc_3_3 = cur.translate(-1, -1);
MapLocation loc_3_4 = cur.translate(-1, 0);
MapLocation loc_3_5 = cur.translate(-1, 1);
MapLocation loc_4_5 = cur.translate(0, 1);
MapLocation loc_5_5 = cur.translate(1, 1);
int rubble_0_2 = rc.canSenseLocation(loc_0_2) ? 20 + 2 * rc.senseRubble(loc_0_2) : 100000;
if (loc_0_2.equals(destination)) { rubble_0_2 = -0; }int rubble_0_3 = rc.canSenseLocation(loc_0_3) ? 20 + 2 * rc.senseRubble(loc_0_3) : 100000;
if (loc_0_3.equals(destination)) { rubble_0_3 = -0; }int rubble_0_4 = rc.canSenseLocation(loc_0_4) ? 20 + 2 * rc.senseRubble(loc_0_4) : 100000;
if (loc_0_4.equals(destination)) { rubble_0_4 = -0; }int rubble_0_5 = rc.canSenseLocation(loc_0_5) ? 20 + 2 * rc.senseRubble(loc_0_5) : 100000;
if (loc_0_5.equals(destination)) { rubble_0_5 = -0; }int rubble_0_6 = rc.canSenseLocation(loc_0_6) ? 20 + 2 * rc.senseRubble(loc_0_6) : 100000;
if (loc_0_6.equals(destination)) { rubble_0_6 = -0; }int rubble_2_8 = rc.canSenseLocation(loc_2_8) ? 20 + 2 * rc.senseRubble(loc_2_8) : 100000;
if (loc_2_8.equals(destination)) { rubble_2_8 = -0; }int rubble_3_8 = rc.canSenseLocation(loc_3_8) ? 20 + 2 * rc.senseRubble(loc_3_8) : 100000;
if (loc_3_8.equals(destination)) { rubble_3_8 = -0; }int rubble_4_8 = rc.canSenseLocation(loc_4_8) ? 20 + 2 * rc.senseRubble(loc_4_8) : 100000;
if (loc_4_8.equals(destination)) { rubble_4_8 = -0; }int rubble_5_8 = rc.canSenseLocation(loc_5_8) ? 20 + 2 * rc.senseRubble(loc_5_8) : 100000;
if (loc_5_8.equals(destination)) { rubble_5_8 = -0; }int rubble_6_8 = rc.canSenseLocation(loc_6_8) ? 20 + 2 * rc.senseRubble(loc_6_8) : 100000;
if (loc_6_8.equals(destination)) { rubble_6_8 = -0; }int rubble_1_1 = rc.canSenseLocation(loc_1_1) ? 20 + 2 * rc.senseRubble(loc_1_1) : 100000;
if (loc_1_1.equals(destination)) { rubble_1_1 = -0; }int rubble_1_2 = rc.canSenseLocation(loc_1_2) ? 20 + 2 * rc.senseRubble(loc_1_2) : 100000;
if (loc_1_2.equals(destination)) { rubble_1_2 = -0; }int rubble_1_3 = rc.canSenseLocation(loc_1_3) ? 20 + 2 * rc.senseRubble(loc_1_3) : 100000;
if (loc_1_3.equals(destination)) { rubble_1_3 = -0; }int rubble_1_4 = rc.canSenseLocation(loc_1_4) ? 20 + 2 * rc.senseRubble(loc_1_4) : 100000;
if (loc_1_4.equals(destination)) { rubble_1_4 = -0; }int rubble_1_5 = rc.canSenseLocation(loc_1_5) ? 20 + 2 * rc.senseRubble(loc_1_5) : 100000;
if (loc_1_5.equals(destination)) { rubble_1_5 = -0; }int rubble_1_6 = rc.canSenseLocation(loc_1_6) ? 20 + 2 * rc.senseRubble(loc_1_6) : 100000;
if (loc_1_6.equals(destination)) { rubble_1_6 = -0; }int rubble_1_7 = rc.canSenseLocation(loc_1_7) ? 20 + 2 * rc.senseRubble(loc_1_7) : 100000;
if (loc_1_7.equals(destination)) { rubble_1_7 = -0; }int rubble_2_7 = rc.canSenseLocation(loc_2_7) ? 20 + 2 * rc.senseRubble(loc_2_7) : 100000;
if (loc_2_7.equals(destination)) { rubble_2_7 = -0; }int rubble_3_7 = rc.canSenseLocation(loc_3_7) ? 20 + 2 * rc.senseRubble(loc_3_7) : 100000;
if (loc_3_7.equals(destination)) { rubble_3_7 = -0; }int rubble_4_7 = rc.canSenseLocation(loc_4_7) ? 20 + 2 * rc.senseRubble(loc_4_7) : 100000;
if (loc_4_7.equals(destination)) { rubble_4_7 = -0; }int rubble_5_7 = rc.canSenseLocation(loc_5_7) ? 20 + 2 * rc.senseRubble(loc_5_7) : 100000;
if (loc_5_7.equals(destination)) { rubble_5_7 = -0; }int rubble_6_7 = rc.canSenseLocation(loc_6_7) ? 20 + 2 * rc.senseRubble(loc_6_7) : 100000;
if (loc_6_7.equals(destination)) { rubble_6_7 = -0; }int rubble_7_7 = rc.canSenseLocation(loc_7_7) ? 20 + 2 * rc.senseRubble(loc_7_7) : 100000;
if (loc_7_7.equals(destination)) { rubble_7_7 = -0; }int rubble_2_2 = rc.canSenseLocation(loc_2_2) ? 20 + 2 * rc.senseRubble(loc_2_2) : 100000;
if (loc_2_2.equals(destination)) { rubble_2_2 = -0; }int rubble_2_3 = rc.canSenseLocation(loc_2_3) ? 20 + 2 * rc.senseRubble(loc_2_3) : 100000;
if (loc_2_3.equals(destination)) { rubble_2_3 = -0; }int rubble_2_4 = rc.canSenseLocation(loc_2_4) ? 20 + 2 * rc.senseRubble(loc_2_4) : 100000;
if (loc_2_4.equals(destination)) { rubble_2_4 = -0; }int rubble_2_5 = rc.canSenseLocation(loc_2_5) ? 20 + 2 * rc.senseRubble(loc_2_5) : 100000;
if (loc_2_5.equals(destination)) { rubble_2_5 = -0; }int rubble_2_6 = rc.canSenseLocation(loc_2_6) ? 20 + 2 * rc.senseRubble(loc_2_6) : 100000;
if (loc_2_6.equals(destination)) { rubble_2_6 = -0; }int rubble_3_6 = rc.canSenseLocation(loc_3_6) ? 20 + 2 * rc.senseRubble(loc_3_6) : 100000;
if (loc_3_6.equals(destination)) { rubble_3_6 = -0; }int rubble_4_6 = rc.canSenseLocation(loc_4_6) ? 20 + 2 * rc.senseRubble(loc_4_6) : 100000;
if (loc_4_6.equals(destination)) { rubble_4_6 = -0; }int rubble_5_6 = rc.canSenseLocation(loc_5_6) ? 20 + 2 * rc.senseRubble(loc_5_6) : 100000;
if (loc_5_6.equals(destination)) { rubble_5_6 = -0; }int rubble_6_6 = rc.canSenseLocation(loc_6_6) ? 20 + 2 * rc.senseRubble(loc_6_6) : 100000;
if (loc_6_6.equals(destination)) { rubble_6_6 = -0; }int rubble_3_3 = rc.canSenseLocation(loc_3_3) && !rc.isLocationOccupied(loc_3_3) ? 20 + 2 * rc.senseRubble(loc_3_3) : 100000;
if (loc_3_3.equals(destination)) { rubble_3_3 = -0; }int rubble_3_4 = rc.canSenseLocation(loc_3_4) && !rc.isLocationOccupied(loc_3_4) ? 20 + 2 * rc.senseRubble(loc_3_4) : 100000;
if (loc_3_4.equals(destination)) { rubble_3_4 = -0; }int rubble_3_5 = rc.canSenseLocation(loc_3_5) && !rc.isLocationOccupied(loc_3_5) ? 20 + 2 * rc.senseRubble(loc_3_5) : 100000;
if (loc_3_5.equals(destination)) { rubble_3_5 = -0; }int rubble_4_5 = rc.canSenseLocation(loc_4_5) && !rc.isLocationOccupied(loc_4_5) ? 20 + 2 * rc.senseRubble(loc_4_5) : 100000;
if (loc_4_5.equals(destination)) { rubble_4_5 = -0; }int rubble_5_5 = rc.canSenseLocation(loc_5_5) && !rc.isLocationOccupied(loc_5_5) ? 20 + 2 * rc.senseRubble(loc_5_5) : 100000;
if (loc_5_5.equals(destination)) { rubble_5_5 = -0; }int score_0_2 = 1000000000;
int score_0_3 = 1000000000;
int score_0_4 = 1000000000;
int score_0_5 = 1000000000;
int score_0_6 = 1000000000;
int score_2_8 = 1000000000;
int score_3_8 = 1000000000;
int score_4_8 = 1000000000;
int score_5_8 = 1000000000;
int score_6_8 = 1000000000;
int score_1_1 = 1000000000;
int score_1_2 = 1000000000;
int score_1_3 = 1000000000;
int score_1_4 = 1000000000;
int score_1_5 = 1000000000;
int score_1_6 = 1000000000;
int score_1_7 = 1000000000;
int score_2_7 = 1000000000;
int score_3_7 = 1000000000;
int score_4_7 = 1000000000;
int score_5_7 = 1000000000;
int score_6_7 = 1000000000;
int score_7_7 = 1000000000;
int score_2_2 = 1000000000;
int score_2_3 = 1000000000;
int score_2_4 = 1000000000;
int score_2_5 = 1000000000;
int score_2_6 = 1000000000;
int score_3_6 = 1000000000;
int score_4_6 = 1000000000;
int score_5_6 = 1000000000;
int score_6_6 = 1000000000;
int score_3_3 = 1000000000;
int score_3_4 = 1000000000;
int score_3_5 = 1000000000;
int score_4_5 = 1000000000;
int score_5_5 = 1000000000;
int temp0 = 0;
int temp1 = 0;
int temp2 = 0;
int temp3 = 0;
int temp4 = 0;
int temp5 = 0;
int temp6 = 0;
int temp7 = 0;
int temp8 = 0;
int temp9 = 0;
int temp10 = 0;
int temp11 = 0;
int temp12 = 0;
int runningMin = 100000;
score_0_2 = man(loc_0_2, destination) * (20 + 0) + rubble_0_2;
score_0_3 = man(loc_0_3, destination) * (20 + 0) + rubble_0_3;
score_0_4 = man(loc_0_4, destination) * (20 + 0) + rubble_0_4;
score_0_5 = man(loc_0_5, destination) * (20 + 0) + rubble_0_5;
score_0_6 = man(loc_0_6, destination) * (20 + 0) + rubble_0_6;
score_2_8 = man(loc_2_8, destination) * (20 + 0) + rubble_2_8;
score_3_8 = man(loc_3_8, destination) * (20 + 0) + rubble_3_8;
score_4_8 = man(loc_4_8, destination) * (20 + 0) + rubble_4_8;
score_5_8 = man(loc_5_8, destination) * (20 + 0) + rubble_5_8;
score_6_8 = man(loc_6_8, destination) * (20 + 0) + rubble_6_8;
score_0_3 = Math.min(score_0_3, score_0_2 + rubble_0_3);
score_0_4 = Math.min(score_0_4, score_0_3 + rubble_0_4);
score_0_5 = Math.min(score_0_5, score_0_4 + rubble_0_5);
score_0_6 = Math.min(score_0_6, score_0_5 + rubble_0_6);
score_3_8 = Math.min(score_3_8, score_2_8 + rubble_3_8);
score_4_8 = Math.min(score_4_8, score_3_8 + rubble_4_8);
score_5_8 = Math.min(score_5_8, score_4_8 + rubble_5_8);
score_6_8 = Math.min(score_6_8, score_5_8 + rubble_6_8);
score_5_8 = Math.min(score_5_8, score_6_8 + rubble_5_8);
score_4_8 = Math.min(score_4_8, score_5_8 + rubble_4_8);
score_3_8 = Math.min(score_3_8, score_4_8 + rubble_3_8);
score_2_8 = Math.min(score_2_8, score_3_8 + rubble_2_8);
score_0_5 = Math.min(score_0_5, score_0_6 + rubble_0_5);
score_0_4 = Math.min(score_0_4, score_0_5 + rubble_0_4);
score_0_3 = Math.min(score_0_3, score_0_4 + rubble_0_3);
score_0_2 = Math.min(score_0_2, score_0_3 + rubble_0_2);
score_7_7 = Math.min(score_7_7, score_6_8 + rubble_7_7);
score_6_7 = Math.min(score_6_7, score_6_8 + rubble_6_7);
score_6_7 = Math.min(score_6_7, score_5_8 + rubble_6_7);
score_5_7 = Math.min(score_5_7, score_6_8 + rubble_5_7);
score_5_7 = Math.min(score_5_7, score_5_8 + rubble_5_7);
score_5_7 = Math.min(score_5_7, score_4_8 + rubble_5_7);
score_4_7 = Math.min(score_4_7, score_5_8 + rubble_4_7);
score_4_7 = Math.min(score_4_7, score_4_8 + rubble_4_7);
score_4_7 = Math.min(score_4_7, score_3_8 + rubble_4_7);
score_3_7 = Math.min(score_3_7, score_4_8 + rubble_3_7);
score_3_7 = Math.min(score_3_7, score_3_8 + rubble_3_7);
score_3_7 = Math.min(score_3_7, score_2_8 + rubble_3_7);
score_2_7 = Math.min(score_2_7, score_3_8 + rubble_2_7);
score_2_7 = Math.min(score_2_7, score_2_8 + rubble_2_7);
score_1_7 = Math.min(score_1_7, score_2_8 + rubble_1_7);
score_1_7 = Math.min(score_1_7, score_0_6 + rubble_1_7);
score_1_6 = Math.min(score_1_6, score_0_6 + rubble_1_6);
score_1_6 = Math.min(score_1_6, score_0_5 + rubble_1_6);
score_1_5 = Math.min(score_1_5, score_0_6 + rubble_1_5);
score_1_5 = Math.min(score_1_5, score_0_5 + rubble_1_5);
score_1_5 = Math.min(score_1_5, score_0_4 + rubble_1_5);
score_1_4 = Math.min(score_1_4, score_0_5 + rubble_1_4);
score_1_4 = Math.min(score_1_4, score_0_4 + rubble_1_4);
score_1_4 = Math.min(score_1_4, score_0_3 + rubble_1_4);
score_1_3 = Math.min(score_1_3, score_0_4 + rubble_1_3);
score_1_3 = Math.min(score_1_3, score_0_3 + rubble_1_3);
score_1_3 = Math.min(score_1_3, score_0_2 + rubble_1_3);
score_1_2 = Math.min(score_1_2, score_0_3 + rubble_1_2);
score_1_2 = Math.min(score_1_2, score_0_2 + rubble_1_2);
score_1_1 = Math.min(score_1_1, score_0_2 + rubble_1_1);
score_1_2 = Math.min(score_1_2, score_1_1 + rubble_1_2);
score_1_3 = Math.min(score_1_3, score_1_2 + rubble_1_3);
score_1_4 = Math.min(score_1_4, score_1_3 + rubble_1_4);
score_1_5 = Math.min(score_1_5, score_1_4 + rubble_1_5);
score_1_6 = Math.min(score_1_6, score_1_5 + rubble_1_6);
score_1_7 = Math.min(score_1_7, score_1_6 + rubble_1_7);
score_2_7 = Math.min(score_2_7, score_1_7 + rubble_2_7);
score_2_7 = Math.min(score_2_7, score_1_6 + rubble_2_7);
score_3_7 = Math.min(score_3_7, score_2_7 + rubble_3_7);
score_4_7 = Math.min(score_4_7, score_3_7 + rubble_4_7);
score_5_7 = Math.min(score_5_7, score_4_7 + rubble_5_7);
score_6_7 = Math.min(score_6_7, score_5_7 + rubble_6_7);
score_7_7 = Math.min(score_7_7, score_6_7 + rubble_7_7);
score_6_7 = Math.min(score_6_7, score_7_7 + rubble_6_7);
score_5_7 = Math.min(score_5_7, score_6_7 + rubble_5_7);
score_4_7 = Math.min(score_4_7, score_5_7 + rubble_4_7);
score_3_7 = Math.min(score_3_7, score_4_7 + rubble_3_7);
score_2_7 = Math.min(score_2_7, score_3_7 + rubble_2_7);
score_1_7 = Math.min(score_1_7, score_2_7 + rubble_1_7);
score_1_6 = Math.min(score_1_6, score_1_7 + rubble_1_6);
score_1_6 = Math.min(score_1_6, score_2_7 + rubble_1_6);
score_1_5 = Math.min(score_1_5, score_1_6 + rubble_1_5);
score_1_4 = Math.min(score_1_4, score_1_5 + rubble_1_4);
score_1_3 = Math.min(score_1_3, score_1_4 + rubble_1_3);
score_1_2 = Math.min(score_1_2, score_1_3 + rubble_1_2);
score_1_1 = Math.min(score_1_1, score_1_2 + rubble_1_1);
score_6_6 = Math.min(score_6_6, score_7_7 + rubble_6_6);
score_6_6 = Math.min(score_6_6, score_6_7 + rubble_6_6);
score_6_6 = Math.min(score_6_6, score_5_7 + rubble_6_6);
score_5_6 = Math.min(score_5_6, score_6_7 + rubble_5_6);
score_5_6 = Math.min(score_5_6, score_5_7 + rubble_5_6);
score_5_6 = Math.min(score_5_6, score_4_7 + rubble_5_6);
score_4_6 = Math.min(score_4_6, score_5_7 + rubble_4_6);
score_4_6 = Math.min(score_4_6, score_4_7 + rubble_4_6);
score_4_6 = Math.min(score_4_6, score_3_7 + rubble_4_6);
score_3_6 = Math.min(score_3_6, score_4_7 + rubble_3_6);
score_3_6 = Math.min(score_3_6, score_3_7 + rubble_3_6);
score_3_6 = Math.min(score_3_6, score_2_7 + rubble_3_6);
score_2_6 = Math.min(score_2_6, score_3_7 + rubble_2_6);
score_2_6 = Math.min(score_2_6, score_2_7 + rubble_2_6);
score_2_6 = Math.min(score_2_6, score_1_7 + rubble_2_6);
score_2_6 = Math.min(score_2_6, score_1_6 + rubble_2_6);
score_2_6 = Math.min(score_2_6, score_1_5 + rubble_2_6);
score_2_5 = Math.min(score_2_5, score_1_6 + rubble_2_5);
score_2_5 = Math.min(score_2_5, score_1_5 + rubble_2_5);
score_2_5 = Math.min(score_2_5, score_1_4 + rubble_2_5);
score_2_4 = Math.min(score_2_4, score_1_5 + rubble_2_4);
score_2_4 = Math.min(score_2_4, score_1_4 + rubble_2_4);
score_2_4 = Math.min(score_2_4, score_1_3 + rubble_2_4);
score_2_3 = Math.min(score_2_3, score_1_4 + rubble_2_3);
score_2_3 = Math.min(score_2_3, score_1_3 + rubble_2_3);
score_2_3 = Math.min(score_2_3, score_1_2 + rubble_2_3);
score_2_2 = Math.min(score_2_2, score_1_3 + rubble_2_2);
score_2_2 = Math.min(score_2_2, score_1_2 + rubble_2_2);
score_2_2 = Math.min(score_2_2, score_1_1 + rubble_2_2);
score_2_3 = Math.min(score_2_3, score_2_2 + rubble_2_3);
score_2_4 = Math.min(score_2_4, score_2_3 + rubble_2_4);
score_2_5 = Math.min(score_2_5, score_2_4 + rubble_2_5);
score_2_6 = Math.min(score_2_6, score_2_5 + rubble_2_6);
score_3_6 = Math.min(score_3_6, score_2_6 + rubble_3_6);
score_3_6 = Math.min(score_3_6, score_2_5 + rubble_3_6);
score_4_6 = Math.min(score_4_6, score_3_6 + rubble_4_6);
score_5_6 = Math.min(score_5_6, score_4_6 + rubble_5_6);
score_6_6 = Math.min(score_6_6, score_5_6 + rubble_6_6);
score_5_6 = Math.min(score_5_6, score_6_6 + rubble_5_6);
score_4_6 = Math.min(score_4_6, score_5_6 + rubble_4_6);
score_3_6 = Math.min(score_3_6, score_4_6 + rubble_3_6);
score_2_6 = Math.min(score_2_6, score_3_6 + rubble_2_6);
score_2_5 = Math.min(score_2_5, score_2_6 + rubble_2_5);
score_2_5 = Math.min(score_2_5, score_3_6 + rubble_2_5);
score_2_4 = Math.min(score_2_4, score_2_5 + rubble_2_4);
score_2_3 = Math.min(score_2_3, score_2_4 + rubble_2_3);
score_2_2 = Math.min(score_2_2, score_2_3 + rubble_2_2);
score_5_5 = Math.min(score_5_5, score_6_6 + rubble_5_5);
score_5_5 = Math.min(score_5_5, score_5_6 + rubble_5_5);
score_5_5 = Math.min(score_5_5, score_4_6 + rubble_5_5);
score_4_5 = Math.min(score_4_5, score_5_6 + rubble_4_5);
score_4_5 = Math.min(score_4_5, score_4_6 + rubble_4_5);
score_4_5 = Math.min(score_4_5, score_3_6 + rubble_4_5);
score_3_5 = Math.min(score_3_5, score_4_6 + rubble_3_5);
score_3_5 = Math.min(score_3_5, score_3_6 + rubble_3_5);
score_3_5 = Math.min(score_3_5, score_2_6 + rubble_3_5);
score_3_5 = Math.min(score_3_5, score_2_5 + rubble_3_5);
score_3_5 = Math.min(score_3_5, score_2_4 + rubble_3_5);
score_3_4 = Math.min(score_3_4, score_2_5 + rubble_3_4);
score_3_4 = Math.min(score_3_4, score_2_4 + rubble_3_4);
score_3_4 = Math.min(score_3_4, score_2_3 + rubble_3_4);
score_3_3 = Math.min(score_3_3, score_2_4 + rubble_3_3);
score_3_3 = Math.min(score_3_3, score_2_3 + rubble_3_3);
score_3_3 = Math.min(score_3_3, score_2_2 + rubble_3_3);
score_3_4 = Math.min(score_3_4, score_3_3 + rubble_3_4);
score_3_5 = Math.min(score_3_5, score_3_4 + rubble_3_5);
score_4_5 = Math.min(score_4_5, score_3_5 + rubble_4_5);
score_4_5 = Math.min(score_4_5, score_3_4 + rubble_4_5);
score_5_5 = Math.min(score_5_5, score_4_5 + rubble_5_5);
score_5_5 = Math.min(score_5_5, score_3_3 + rubble_5_5);
score_4_5 = Math.min(score_4_5, score_5_5 + rubble_4_5);
score_4_5 = Math.min(score_4_5, score_3_3 + rubble_4_5);
score_3_5 = Math.min(score_3_5, score_4_5 + rubble_3_5);
score_3_4 = Math.min(score_3_4, score_3_5 + rubble_3_4);
score_3_4 = Math.min(score_3_4, score_4_5 + rubble_3_4);
score_3_3 = Math.min(score_3_3, score_3_4 + rubble_3_3);
score_6_6 = Math.min(score_6_6, score_5_5 + rubble_6_6);
score_5_6 = Math.min(score_5_6, score_5_5 + rubble_5_6);
score_4_6 = Math.min(score_4_6, score_5_5 + rubble_4_6);
score_5_6 = Math.min(score_5_6, score_4_5 + rubble_5_6);
score_4_6 = Math.min(score_4_6, score_4_5 + rubble_4_6);
score_3_6 = Math.min(score_3_6, score_4_5 + rubble_3_6);
score_4_6 = Math.min(score_4_6, score_3_5 + rubble_4_6);
score_3_6 = Math.min(score_3_6, score_3_5 + rubble_3_6);
score_2_6 = Math.min(score_2_6, score_3_5 + rubble_2_6);
score_2_5 = Math.min(score_2_5, score_3_5 + rubble_2_5);
score_2_4 = Math.min(score_2_4, score_3_5 + rubble_2_4);
score_2_5 = Math.min(score_2_5, score_3_4 + rubble_2_5);
score_2_4 = Math.min(score_2_4, score_3_4 + rubble_2_4);
score_2_3 = Math.min(score_2_3, score_3_4 + rubble_2_3);
score_2_4 = Math.min(score_2_4, score_3_3 + rubble_2_4);
score_2_3 = Math.min(score_2_3, score_3_3 + rubble_2_3);
score_2_2 = Math.min(score_2_2, score_3_3 + rubble_2_2);
score_7_7 = Math.min(score_7_7, score_6_6 + rubble_7_7);
score_6_7 = Math.min(score_6_7, score_6_6 + rubble_6_7);
score_5_7 = Math.min(score_5_7, score_6_6 + rubble_5_7);
score_6_7 = Math.min(score_6_7, score_5_6 + rubble_6_7);
score_5_7 = Math.min(score_5_7, score_5_6 + rubble_5_7);
score_4_7 = Math.min(score_4_7, score_5_6 + rubble_4_7);
score_5_7 = Math.min(score_5_7, score_4_6 + rubble_5_7);
score_4_7 = Math.min(score_4_7, score_4_6 + rubble_4_7);
score_3_7 = Math.min(score_3_7, score_4_6 + rubble_3_7);
score_4_7 = Math.min(score_4_7, score_3_6 + rubble_4_7);
score_3_7 = Math.min(score_3_7, score_3_6 + rubble_3_7);
score_2_7 = Math.min(score_2_7, score_3_6 + rubble_2_7);
score_3_7 = Math.min(score_3_7, score_2_6 + rubble_3_7);
score_2_7 = Math.min(score_2_7, score_2_6 + rubble_2_7);
score_1_7 = Math.min(score_1_7, score_2_6 + rubble_1_7);
score_1_6 = Math.min(score_1_6, score_2_6 + rubble_1_6);
score_1_5 = Math.min(score_1_5, score_2_6 + rubble_1_5);
score_1_6 = Math.min(score_1_6, score_2_5 + rubble_1_6);
score_1_5 = Math.min(score_1_5, score_2_5 + rubble_1_5);
score_1_4 = Math.min(score_1_4, score_2_5 + rubble_1_4);
score_1_5 = Math.min(score_1_5, score_2_4 + rubble_1_5);
score_1_4 = Math.min(score_1_4, score_2_4 + rubble_1_4);
score_1_3 = Math.min(score_1_3, score_2_4 + rubble_1_3);
score_1_4 = Math.min(score_1_4, score_2_3 + rubble_1_4);
score_1_3 = Math.min(score_1_3, score_2_3 + rubble_1_3);
score_1_2 = Math.min(score_1_2, score_2_3 + rubble_1_2);
score_1_3 = Math.min(score_1_3, score_2_2 + rubble_1_3);
score_1_2 = Math.min(score_1_2, score_2_2 + rubble_1_2);
score_1_1 = Math.min(score_1_1, score_2_2 + rubble_1_1);
score_6_8 = Math.min(score_6_8, score_7_7 + rubble_6_8);
score_6_8 = Math.min(score_6_8, score_6_7 + rubble_6_8);
score_5_8 = Math.min(score_5_8, score_6_7 + rubble_5_8);
score_6_8 = Math.min(score_6_8, score_5_7 + rubble_6_8);
score_5_8 = Math.min(score_5_8, score_5_7 + rubble_5_8);
score_4_8 = Math.min(score_4_8, score_5_7 + rubble_4_8);
score_5_8 = Math.min(score_5_8, score_4_7 + rubble_5_8);
score_4_8 = Math.min(score_4_8, score_4_7 + rubble_4_8);
score_3_8 = Math.min(score_3_8, score_4_7 + rubble_3_8);
score_4_8 = Math.min(score_4_8, score_3_7 + rubble_4_8);
score_3_8 = Math.min(score_3_8, score_3_7 + rubble_3_8);
score_2_8 = Math.min(score_2_8, score_3_7 + rubble_2_8);
score_3_8 = Math.min(score_3_8, score_2_7 + rubble_3_8);
score_2_8 = Math.min(score_2_8, score_2_7 + rubble_2_8);
score_2_8 = Math.min(score_2_8, score_1_7 + rubble_2_8);
score_0_6 = Math.min(score_0_6, score_1_7 + rubble_0_6);
score_0_6 = Math.min(score_0_6, score_1_6 + rubble_0_6);
score_0_5 = Math.min(score_0_5, score_1_6 + rubble_0_5);
score_0_6 = Math.min(score_0_6, score_1_5 + rubble_0_6);
score_0_5 = Math.min(score_0_5, score_1_5 + rubble_0_5);
score_0_4 = Math.min(score_0_4, score_1_5 + rubble_0_4);
score_0_5 = Math.min(score_0_5, score_1_4 + rubble_0_5);
score_0_4 = Math.min(score_0_4, score_1_4 + rubble_0_4);
score_0_3 = Math.min(score_0_3, score_1_4 + rubble_0_3);
score_0_4 = Math.min(score_0_4, score_1_3 + rubble_0_4);
score_0_3 = Math.min(score_0_3, score_1_3 + rubble_0_3);
score_0_2 = Math.min(score_0_2, score_1_3 + rubble_0_2);
score_0_3 = Math.min(score_0_3, score_1_2 + rubble_0_3);
score_0_2 = Math.min(score_0_2, score_1_2 + rubble_0_2);
score_0_2 = Math.min(score_0_2, score_1_1 + rubble_0_2);
Direction go = Direction.CENTER;
int best = Integer.MAX_VALUE;
if (score_3_3 < best) {
best = score_3_3;
go = cur.directionTo(loc_3_3);
}
if (score_3_4 < best) {
best = score_3_4;
go = cur.directionTo(loc_3_4);
}
if (score_3_5 < best) {
best = score_3_5;
go = cur.directionTo(loc_3_5);
}
if (score_4_5 < best) {
best = score_4_5;
go = cur.directionTo(loc_4_5);
}
if (score_5_5 < best) {
best = score_5_5;
go = cur.directionTo(loc_5_5);
}
if (rc.canMove(go)) rc.move(go);
if (cur.equals(new MapLocation(27, 25))) { System.out.println(score_0_2 + " " + "score_0_2");
System.out.println(score_0_3 + " " + "score_0_3");
System.out.println(score_0_4 + " " + "score_0_4");
System.out.println(score_0_5 + " " + "score_0_5");
System.out.println(score_0_6 + " " + "score_0_6");
System.out.println(score_2_8 + " " + "score_2_8");
System.out.println(score_3_8 + " " + "score_3_8");
System.out.println(score_4_8 + " " + "score_4_8");
System.out.println(score_5_8 + " " + "score_5_8");
System.out.println(score_6_8 + " " + "score_6_8");

System.out.println(score_1_1 + " " + "score_1_1");
System.out.println(score_1_2 + " " + "score_1_2");
System.out.println(score_1_3 + " " + "score_1_3");
System.out.println(score_1_4 + " " + "score_1_4");
System.out.println(score_1_5 + " " + "score_1_5");
System.out.println(score_1_6 + " " + "score_1_6");
System.out.println(score_1_7 + " " + "score_1_7");
System.out.println(score_2_7 + " " + "score_2_7");
System.out.println(score_3_7 + " " + "score_3_7");
System.out.println(score_4_7 + " " + "score_4_7");
System.out.println(score_5_7 + " " + "score_5_7");
System.out.println(score_6_7 + " " + "score_6_7");
System.out.println(score_7_7 + " " + "score_7_7");

System.out.println(score_2_2 + " " + "score_2_2");
System.out.println(score_2_3 + " " + "score_2_3");
System.out.println(score_2_4 + " " + "score_2_4");
System.out.println(score_2_5 + " " + "score_2_5");
System.out.println(score_2_6 + " " + "score_2_6");
System.out.println(score_3_6 + " " + "score_3_6");
System.out.println(score_4_6 + " " + "score_4_6");
System.out.println(score_5_6 + " " + "score_5_6");
System.out.println(score_6_6 + " " + "score_6_6");

System.out.println(score_3_3 + " " + "score_3_3");
System.out.println(score_3_4 + " " + "score_3_4");
System.out.println(score_3_5 + " " + "score_3_5");
System.out.println(score_4_5 + " " + "score_4_5");
System.out.println(score_5_5 + " " + "score_5_5");

}
}
static void SOUTHWEST(RobotController rc, MapLocation destination) throws GameActionException {
MapLocation cur = rc.getLocation();
MapLocation loc_6_0 = cur.translate(2, -4);
MapLocation loc_5_0 = cur.translate(1, -4);
MapLocation loc_4_0 = cur.translate(0, -4);
MapLocation loc_3_0 = cur.translate(-1, -4);
MapLocation loc_2_0 = cur.translate(-2, -4);
MapLocation loc_0_2 = cur.translate(-4, -2);
MapLocation loc_0_3 = cur.translate(-4, -1);
MapLocation loc_0_4 = cur.translate(-4, 0);
MapLocation loc_0_5 = cur.translate(-4, 1);
MapLocation loc_0_6 = cur.translate(-4, 2);
MapLocation loc_7_1 = cur.translate(3, -3);
MapLocation loc_6_1 = cur.translate(2, -3);
MapLocation loc_5_1 = cur.translate(1, -3);
MapLocation loc_4_1 = cur.translate(0, -3);
MapLocation loc_3_1 = cur.translate(-1, -3);
MapLocation loc_2_1 = cur.translate(-2, -3);
MapLocation loc_1_1 = cur.translate(-3, -3);
MapLocation loc_1_2 = cur.translate(-3, -2);
MapLocation loc_1_3 = cur.translate(-3, -1);
MapLocation loc_1_4 = cur.translate(-3, 0);
MapLocation loc_1_5 = cur.translate(-3, 1);
MapLocation loc_1_6 = cur.translate(-3, 2);
MapLocation loc_1_7 = cur.translate(-3, 3);
MapLocation loc_6_2 = cur.translate(2, -2);
MapLocation loc_5_2 = cur.translate(1, -2);
MapLocation loc_4_2 = cur.translate(0, -2);
MapLocation loc_3_2 = cur.translate(-1, -2);
MapLocation loc_2_2 = cur.translate(-2, -2);
MapLocation loc_2_3 = cur.translate(-2, -1);
MapLocation loc_2_4 = cur.translate(-2, 0);
MapLocation loc_2_5 = cur.translate(-2, 1);
MapLocation loc_2_6 = cur.translate(-2, 2);
MapLocation loc_5_3 = cur.translate(1, -1);
MapLocation loc_4_3 = cur.translate(0, -1);
MapLocation loc_3_3 = cur.translate(-1, -1);
MapLocation loc_3_4 = cur.translate(-1, 0);
MapLocation loc_3_5 = cur.translate(-1, 1);
int rubble_6_0 = rc.canSenseLocation(loc_6_0) ? 20 + 2 * rc.senseRubble(loc_6_0) : 100000;
if (loc_6_0.equals(destination)) { rubble_6_0 = -0; }int rubble_5_0 = rc.canSenseLocation(loc_5_0) ? 20 + 2 * rc.senseRubble(loc_5_0) : 100000;
if (loc_5_0.equals(destination)) { rubble_5_0 = -0; }int rubble_4_0 = rc.canSenseLocation(loc_4_0) ? 20 + 2 * rc.senseRubble(loc_4_0) : 100000;
if (loc_4_0.equals(destination)) { rubble_4_0 = -0; }int rubble_3_0 = rc.canSenseLocation(loc_3_0) ? 20 + 2 * rc.senseRubble(loc_3_0) : 100000;
if (loc_3_0.equals(destination)) { rubble_3_0 = -0; }int rubble_2_0 = rc.canSenseLocation(loc_2_0) ? 20 + 2 * rc.senseRubble(loc_2_0) : 100000;
if (loc_2_0.equals(destination)) { rubble_2_0 = -0; }int rubble_0_2 = rc.canSenseLocation(loc_0_2) ? 20 + 2 * rc.senseRubble(loc_0_2) : 100000;
if (loc_0_2.equals(destination)) { rubble_0_2 = -0; }int rubble_0_3 = rc.canSenseLocation(loc_0_3) ? 20 + 2 * rc.senseRubble(loc_0_3) : 100000;
if (loc_0_3.equals(destination)) { rubble_0_3 = -0; }int rubble_0_4 = rc.canSenseLocation(loc_0_4) ? 20 + 2 * rc.senseRubble(loc_0_4) : 100000;
if (loc_0_4.equals(destination)) { rubble_0_4 = -0; }int rubble_0_5 = rc.canSenseLocation(loc_0_5) ? 20 + 2 * rc.senseRubble(loc_0_5) : 100000;
if (loc_0_5.equals(destination)) { rubble_0_5 = -0; }int rubble_0_6 = rc.canSenseLocation(loc_0_6) ? 20 + 2 * rc.senseRubble(loc_0_6) : 100000;
if (loc_0_6.equals(destination)) { rubble_0_6 = -0; }int rubble_7_1 = rc.canSenseLocation(loc_7_1) ? 20 + 2 * rc.senseRubble(loc_7_1) : 100000;
if (loc_7_1.equals(destination)) { rubble_7_1 = -0; }int rubble_6_1 = rc.canSenseLocation(loc_6_1) ? 20 + 2 * rc.senseRubble(loc_6_1) : 100000;
if (loc_6_1.equals(destination)) { rubble_6_1 = -0; }int rubble_5_1 = rc.canSenseLocation(loc_5_1) ? 20 + 2 * rc.senseRubble(loc_5_1) : 100000;
if (loc_5_1.equals(destination)) { rubble_5_1 = -0; }int rubble_4_1 = rc.canSenseLocation(loc_4_1) ? 20 + 2 * rc.senseRubble(loc_4_1) : 100000;
if (loc_4_1.equals(destination)) { rubble_4_1 = -0; }int rubble_3_1 = rc.canSenseLocation(loc_3_1) ? 20 + 2 * rc.senseRubble(loc_3_1) : 100000;
if (loc_3_1.equals(destination)) { rubble_3_1 = -0; }int rubble_2_1 = rc.canSenseLocation(loc_2_1) ? 20 + 2 * rc.senseRubble(loc_2_1) : 100000;
if (loc_2_1.equals(destination)) { rubble_2_1 = -0; }int rubble_1_1 = rc.canSenseLocation(loc_1_1) ? 20 + 2 * rc.senseRubble(loc_1_1) : 100000;
if (loc_1_1.equals(destination)) { rubble_1_1 = -0; }int rubble_1_2 = rc.canSenseLocation(loc_1_2) ? 20 + 2 * rc.senseRubble(loc_1_2) : 100000;
if (loc_1_2.equals(destination)) { rubble_1_2 = -0; }int rubble_1_3 = rc.canSenseLocation(loc_1_3) ? 20 + 2 * rc.senseRubble(loc_1_3) : 100000;
if (loc_1_3.equals(destination)) { rubble_1_3 = -0; }int rubble_1_4 = rc.canSenseLocation(loc_1_4) ? 20 + 2 * rc.senseRubble(loc_1_4) : 100000;
if (loc_1_4.equals(destination)) { rubble_1_4 = -0; }int rubble_1_5 = rc.canSenseLocation(loc_1_5) ? 20 + 2 * rc.senseRubble(loc_1_5) : 100000;
if (loc_1_5.equals(destination)) { rubble_1_5 = -0; }int rubble_1_6 = rc.canSenseLocation(loc_1_6) ? 20 + 2 * rc.senseRubble(loc_1_6) : 100000;
if (loc_1_6.equals(destination)) { rubble_1_6 = -0; }int rubble_1_7 = rc.canSenseLocation(loc_1_7) ? 20 + 2 * rc.senseRubble(loc_1_7) : 100000;
if (loc_1_7.equals(destination)) { rubble_1_7 = -0; }int rubble_6_2 = rc.canSenseLocation(loc_6_2) ? 20 + 2 * rc.senseRubble(loc_6_2) : 100000;
if (loc_6_2.equals(destination)) { rubble_6_2 = -0; }int rubble_5_2 = rc.canSenseLocation(loc_5_2) ? 20 + 2 * rc.senseRubble(loc_5_2) : 100000;
if (loc_5_2.equals(destination)) { rubble_5_2 = -0; }int rubble_4_2 = rc.canSenseLocation(loc_4_2) ? 20 + 2 * rc.senseRubble(loc_4_2) : 100000;
if (loc_4_2.equals(destination)) { rubble_4_2 = -0; }int rubble_3_2 = rc.canSenseLocation(loc_3_2) ? 20 + 2 * rc.senseRubble(loc_3_2) : 100000;
if (loc_3_2.equals(destination)) { rubble_3_2 = -0; }int rubble_2_2 = rc.canSenseLocation(loc_2_2) ? 20 + 2 * rc.senseRubble(loc_2_2) : 100000;
if (loc_2_2.equals(destination)) { rubble_2_2 = -0; }int rubble_2_3 = rc.canSenseLocation(loc_2_3) ? 20 + 2 * rc.senseRubble(loc_2_3) : 100000;
if (loc_2_3.equals(destination)) { rubble_2_3 = -0; }int rubble_2_4 = rc.canSenseLocation(loc_2_4) ? 20 + 2 * rc.senseRubble(loc_2_4) : 100000;
if (loc_2_4.equals(destination)) { rubble_2_4 = -0; }int rubble_2_5 = rc.canSenseLocation(loc_2_5) ? 20 + 2 * rc.senseRubble(loc_2_5) : 100000;
if (loc_2_5.equals(destination)) { rubble_2_5 = -0; }int rubble_2_6 = rc.canSenseLocation(loc_2_6) ? 20 + 2 * rc.senseRubble(loc_2_6) : 100000;
if (loc_2_6.equals(destination)) { rubble_2_6 = -0; }int rubble_5_3 = rc.canSenseLocation(loc_5_3) && !rc.isLocationOccupied(loc_5_3) ? 20 + 2 * rc.senseRubble(loc_5_3) : 100000;
if (loc_5_3.equals(destination)) { rubble_5_3 = -0; }int rubble_4_3 = rc.canSenseLocation(loc_4_3) && !rc.isLocationOccupied(loc_4_3) ? 20 + 2 * rc.senseRubble(loc_4_3) : 100000;
if (loc_4_3.equals(destination)) { rubble_4_3 = -0; }int rubble_3_3 = rc.canSenseLocation(loc_3_3) && !rc.isLocationOccupied(loc_3_3) ? 20 + 2 * rc.senseRubble(loc_3_3) : 100000;
if (loc_3_3.equals(destination)) { rubble_3_3 = -0; }int rubble_3_4 = rc.canSenseLocation(loc_3_4) && !rc.isLocationOccupied(loc_3_4) ? 20 + 2 * rc.senseRubble(loc_3_4) : 100000;
if (loc_3_4.equals(destination)) { rubble_3_4 = -0; }int rubble_3_5 = rc.canSenseLocation(loc_3_5) && !rc.isLocationOccupied(loc_3_5) ? 20 + 2 * rc.senseRubble(loc_3_5) : 100000;
if (loc_3_5.equals(destination)) { rubble_3_5 = -0; }int score_6_0 = 1000000000;
int score_5_0 = 1000000000;
int score_4_0 = 1000000000;
int score_3_0 = 1000000000;
int score_2_0 = 1000000000;
int score_0_2 = 1000000000;
int score_0_3 = 1000000000;
int score_0_4 = 1000000000;
int score_0_5 = 1000000000;
int score_0_6 = 1000000000;
int score_7_1 = 1000000000;
int score_6_1 = 1000000000;
int score_5_1 = 1000000000;
int score_4_1 = 1000000000;
int score_3_1 = 1000000000;
int score_2_1 = 1000000000;
int score_1_1 = 1000000000;
int score_1_2 = 1000000000;
int score_1_3 = 1000000000;
int score_1_4 = 1000000000;
int score_1_5 = 1000000000;
int score_1_6 = 1000000000;
int score_1_7 = 1000000000;
int score_6_2 = 1000000000;
int score_5_2 = 1000000000;
int score_4_2 = 1000000000;
int score_3_2 = 1000000000;
int score_2_2 = 1000000000;
int score_2_3 = 1000000000;
int score_2_4 = 1000000000;
int score_2_5 = 1000000000;
int score_2_6 = 1000000000;
int score_5_3 = 1000000000;
int score_4_3 = 1000000000;
int score_3_3 = 1000000000;
int score_3_4 = 1000000000;
int score_3_5 = 1000000000;
int temp0 = 0;
int temp1 = 0;
int temp2 = 0;
int temp3 = 0;
int temp4 = 0;
int temp5 = 0;
int temp6 = 0;
int temp7 = 0;
int temp8 = 0;
int temp9 = 0;
int temp10 = 0;
int temp11 = 0;
int temp12 = 0;
int runningMin = 100000;
score_6_0 = man(loc_6_0, destination) * (20 + 0) + rubble_6_0;
score_5_0 = man(loc_5_0, destination) * (20 + 0) + rubble_5_0;
score_4_0 = man(loc_4_0, destination) * (20 + 0) + rubble_4_0;
score_3_0 = man(loc_3_0, destination) * (20 + 0) + rubble_3_0;
score_2_0 = man(loc_2_0, destination) * (20 + 0) + rubble_2_0;
score_0_2 = man(loc_0_2, destination) * (20 + 0) + rubble_0_2;
score_0_3 = man(loc_0_3, destination) * (20 + 0) + rubble_0_3;
score_0_4 = man(loc_0_4, destination) * (20 + 0) + rubble_0_4;
score_0_5 = man(loc_0_5, destination) * (20 + 0) + rubble_0_5;
score_0_6 = man(loc_0_6, destination) * (20 + 0) + rubble_0_6;
score_5_0 = Math.min(score_5_0, score_6_0 + rubble_5_0);
score_4_0 = Math.min(score_4_0, score_5_0 + rubble_4_0);
score_3_0 = Math.min(score_3_0, score_4_0 + rubble_3_0);
score_2_0 = Math.min(score_2_0, score_3_0 + rubble_2_0);
score_0_3 = Math.min(score_0_3, score_0_2 + rubble_0_3);
score_0_4 = Math.min(score_0_4, score_0_3 + rubble_0_4);
score_0_5 = Math.min(score_0_5, score_0_4 + rubble_0_5);
score_0_6 = Math.min(score_0_6, score_0_5 + rubble_0_6);
score_0_5 = Math.min(score_0_5, score_0_6 + rubble_0_5);
score_0_4 = Math.min(score_0_4, score_0_5 + rubble_0_4);
score_0_3 = Math.min(score_0_3, score_0_4 + rubble_0_3);
score_0_2 = Math.min(score_0_2, score_0_3 + rubble_0_2);
score_3_0 = Math.min(score_3_0, score_2_0 + rubble_3_0);
score_4_0 = Math.min(score_4_0, score_3_0 + rubble_4_0);
score_5_0 = Math.min(score_5_0, score_4_0 + rubble_5_0);
score_6_0 = Math.min(score_6_0, score_5_0 + rubble_6_0);
score_1_7 = Math.min(score_1_7, score_0_6 + rubble_1_7);
score_1_6 = Math.min(score_1_6, score_0_6 + rubble_1_6);
score_1_6 = Math.min(score_1_6, score_0_5 + rubble_1_6);
score_1_5 = Math.min(score_1_5, score_0_6 + rubble_1_5);
score_1_5 = Math.min(score_1_5, score_0_5 + rubble_1_5);
score_1_5 = Math.min(score_1_5, score_0_4 + rubble_1_5);
score_1_4 = Math.min(score_1_4, score_0_5 + rubble_1_4);
score_1_4 = Math.min(score_1_4, score_0_4 + rubble_1_4);
score_1_4 = Math.min(score_1_4, score_0_3 + rubble_1_4);
score_1_3 = Math.min(score_1_3, score_0_4 + rubble_1_3);
score_1_3 = Math.min(score_1_3, score_0_3 + rubble_1_3);
score_1_3 = Math.min(score_1_3, score_0_2 + rubble_1_3);
score_1_2 = Math.min(score_1_2, score_0_3 + rubble_1_2);
score_1_2 = Math.min(score_1_2, score_0_2 + rubble_1_2);
score_1_1 = Math.min(score_1_1, score_0_2 + rubble_1_1);
score_1_1 = Math.min(score_1_1, score_2_0 + rubble_1_1);
score_2_1 = Math.min(score_2_1, score_2_0 + rubble_2_1);
score_2_1 = Math.min(score_2_1, score_3_0 + rubble_2_1);
score_3_1 = Math.min(score_3_1, score_2_0 + rubble_3_1);
score_3_1 = Math.min(score_3_1, score_3_0 + rubble_3_1);
score_3_1 = Math.min(score_3_1, score_4_0 + rubble_3_1);
score_4_1 = Math.min(score_4_1, score_3_0 + rubble_4_1);
score_4_1 = Math.min(score_4_1, score_4_0 + rubble_4_1);
score_4_1 = Math.min(score_4_1, score_5_0 + rubble_4_1);
score_5_1 = Math.min(score_5_1, score_4_0 + rubble_5_1);
score_5_1 = Math.min(score_5_1, score_5_0 + rubble_5_1);
score_5_1 = Math.min(score_5_1, score_6_0 + rubble_5_1);
score_6_1 = Math.min(score_6_1, score_5_0 + rubble_6_1);
score_6_1 = Math.min(score_6_1, score_6_0 + rubble_6_1);
score_7_1 = Math.min(score_7_1, score_6_0 + rubble_7_1);
score_6_1 = Math.min(score_6_1, score_7_1 + rubble_6_1);
score_5_1 = Math.min(score_5_1, score_6_1 + rubble_5_1);
score_4_1 = Math.min(score_4_1, score_5_1 + rubble_4_1);
score_3_1 = Math.min(score_3_1, score_4_1 + rubble_3_1);
score_2_1 = Math.min(score_2_1, score_3_1 + rubble_2_1);
score_1_1 = Math.min(score_1_1, score_2_1 + rubble_1_1);
score_1_2 = Math.min(score_1_2, score_1_1 + rubble_1_2);
score_1_2 = Math.min(score_1_2, score_2_1 + rubble_1_2);
score_1_3 = Math.min(score_1_3, score_1_2 + rubble_1_3);
score_1_4 = Math.min(score_1_4, score_1_3 + rubble_1_4);
score_1_5 = Math.min(score_1_5, score_1_4 + rubble_1_5);
score_1_6 = Math.min(score_1_6, score_1_5 + rubble_1_6);
score_1_7 = Math.min(score_1_7, score_1_6 + rubble_1_7);
score_1_6 = Math.min(score_1_6, score_1_7 + rubble_1_6);
score_1_5 = Math.min(score_1_5, score_1_6 + rubble_1_5);
score_1_4 = Math.min(score_1_4, score_1_5 + rubble_1_4);
score_1_3 = Math.min(score_1_3, score_1_4 + rubble_1_3);
score_1_2 = Math.min(score_1_2, score_1_3 + rubble_1_2);
score_1_1 = Math.min(score_1_1, score_1_2 + rubble_1_1);
score_2_1 = Math.min(score_2_1, score_1_1 + rubble_2_1);
score_2_1 = Math.min(score_2_1, score_1_2 + rubble_2_1);
score_3_1 = Math.min(score_3_1, score_2_1 + rubble_3_1);
score_4_1 = Math.min(score_4_1, score_3_1 + rubble_4_1);
score_5_1 = Math.min(score_5_1, score_4_1 + rubble_5_1);
score_6_1 = Math.min(score_6_1, score_5_1 + rubble_6_1);
score_7_1 = Math.min(score_7_1, score_6_1 + rubble_7_1);
score_2_6 = Math.min(score_2_6, score_1_7 + rubble_2_6);
score_2_6 = Math.min(score_2_6, score_1_6 + rubble_2_6);
score_2_6 = Math.min(score_2_6, score_1_5 + rubble_2_6);
score_2_5 = Math.min(score_2_5, score_1_6 + rubble_2_5);
score_2_5 = Math.min(score_2_5, score_1_5 + rubble_2_5);
score_2_5 = Math.min(score_2_5, score_1_4 + rubble_2_5);
score_2_4 = Math.min(score_2_4, score_1_5 + rubble_2_4);
score_2_4 = Math.min(score_2_4, score_1_4 + rubble_2_4);
score_2_4 = Math.min(score_2_4, score_1_3 + rubble_2_4);
score_2_3 = Math.min(score_2_3, score_1_4 + rubble_2_3);
score_2_3 = Math.min(score_2_3, score_1_3 + rubble_2_3);
score_2_3 = Math.min(score_2_3, score_1_2 + rubble_2_3);
score_2_2 = Math.min(score_2_2, score_1_3 + rubble_2_2);
score_2_2 = Math.min(score_2_2, score_1_2 + rubble_2_2);
score_2_2 = Math.min(score_2_2, score_1_1 + rubble_2_2);
score_2_2 = Math.min(score_2_2, score_2_1 + rubble_2_2);
score_2_2 = Math.min(score_2_2, score_3_1 + rubble_2_2);
score_3_2 = Math.min(score_3_2, score_2_1 + rubble_3_2);
score_3_2 = Math.min(score_3_2, score_3_1 + rubble_3_2);
score_3_2 = Math.min(score_3_2, score_4_1 + rubble_3_2);
score_4_2 = Math.min(score_4_2, score_3_1 + rubble_4_2);
score_4_2 = Math.min(score_4_2, score_4_1 + rubble_4_2);
score_4_2 = Math.min(score_4_2, score_5_1 + rubble_4_2);
score_5_2 = Math.min(score_5_2, score_4_1 + rubble_5_2);
score_5_2 = Math.min(score_5_2, score_5_1 + rubble_5_2);
score_5_2 = Math.min(score_5_2, score_6_1 + rubble_5_2);
score_6_2 = Math.min(score_6_2, score_5_1 + rubble_6_2);
score_6_2 = Math.min(score_6_2, score_6_1 + rubble_6_2);
score_6_2 = Math.min(score_6_2, score_7_1 + rubble_6_2);
score_5_2 = Math.min(score_5_2, score_6_2 + rubble_5_2);
score_4_2 = Math.min(score_4_2, score_5_2 + rubble_4_2);
score_3_2 = Math.min(score_3_2, score_4_2 + rubble_3_2);
score_2_2 = Math.min(score_2_2, score_3_2 + rubble_2_2);
score_2_3 = Math.min(score_2_3, score_2_2 + rubble_2_3);
score_2_3 = Math.min(score_2_3, score_3_2 + rubble_2_3);
score_2_4 = Math.min(score_2_4, score_2_3 + rubble_2_4);
score_2_5 = Math.min(score_2_5, score_2_4 + rubble_2_5);
score_2_6 = Math.min(score_2_6, score_2_5 + rubble_2_6);
score_2_5 = Math.min(score_2_5, score_2_6 + rubble_2_5);
score_2_4 = Math.min(score_2_4, score_2_5 + rubble_2_4);
score_2_3 = Math.min(score_2_3, score_2_4 + rubble_2_3);
score_2_2 = Math.min(score_2_2, score_2_3 + rubble_2_2);
score_3_2 = Math.min(score_3_2, score_2_2 + rubble_3_2);
score_3_2 = Math.min(score_3_2, score_2_3 + rubble_3_2);
score_4_2 = Math.min(score_4_2, score_3_2 + rubble_4_2);
score_5_2 = Math.min(score_5_2, score_4_2 + rubble_5_2);
score_6_2 = Math.min(score_6_2, score_5_2 + rubble_6_2);
score_3_5 = Math.min(score_3_5, score_2_6 + rubble_3_5);
score_3_5 = Math.min(score_3_5, score_2_5 + rubble_3_5);
score_3_5 = Math.min(score_3_5, score_2_4 + rubble_3_5);
score_3_4 = Math.min(score_3_4, score_2_5 + rubble_3_4);
score_3_4 = Math.min(score_3_4, score_2_4 + rubble_3_4);
score_3_4 = Math.min(score_3_4, score_2_3 + rubble_3_4);
score_3_3 = Math.min(score_3_3, score_2_4 + rubble_3_3);
score_3_3 = Math.min(score_3_3, score_2_3 + rubble_3_3);
score_3_3 = Math.min(score_3_3, score_2_2 + rubble_3_3);
score_3_3 = Math.min(score_3_3, score_3_2 + rubble_3_3);
score_3_3 = Math.min(score_3_3, score_4_2 + rubble_3_3);
score_4_3 = Math.min(score_4_3, score_3_2 + rubble_4_3);
score_4_3 = Math.min(score_4_3, score_4_2 + rubble_4_3);
score_4_3 = Math.min(score_4_3, score_5_2 + rubble_4_3);
score_5_3 = Math.min(score_5_3, score_4_2 + rubble_5_3);
score_5_3 = Math.min(score_5_3, score_5_2 + rubble_5_3);
score_5_3 = Math.min(score_5_3, score_6_2 + rubble_5_3);
score_4_3 = Math.min(score_4_3, score_5_3 + rubble_4_3);
score_3_3 = Math.min(score_3_3, score_4_3 + rubble_3_3);
score_3_4 = Math.min(score_3_4, score_3_3 + rubble_3_4);
score_3_4 = Math.min(score_3_4, score_4_3 + rubble_3_4);
score_3_5 = Math.min(score_3_5, score_3_4 + rubble_3_5);
score_3_5 = Math.min(score_3_5, score_5_3 + rubble_3_5);
score_3_4 = Math.min(score_3_4, score_3_5 + rubble_3_4);
score_3_4 = Math.min(score_3_4, score_5_3 + rubble_3_4);
score_3_3 = Math.min(score_3_3, score_3_4 + rubble_3_3);
score_4_3 = Math.min(score_4_3, score_3_3 + rubble_4_3);
score_4_3 = Math.min(score_4_3, score_3_4 + rubble_4_3);
score_5_3 = Math.min(score_5_3, score_4_3 + rubble_5_3);
score_2_6 = Math.min(score_2_6, score_3_5 + rubble_2_6);
score_2_5 = Math.min(score_2_5, score_3_5 + rubble_2_5);
score_2_4 = Math.min(score_2_4, score_3_5 + rubble_2_4);
score_2_5 = Math.min(score_2_5, score_3_4 + rubble_2_5);
score_2_4 = Math.min(score_2_4, score_3_4 + rubble_2_4);
score_2_3 = Math.min(score_2_3, score_3_4 + rubble_2_3);
score_2_4 = Math.min(score_2_4, score_3_3 + rubble_2_4);
score_2_3 = Math.min(score_2_3, score_3_3 + rubble_2_3);
score_2_2 = Math.min(score_2_2, score_3_3 + rubble_2_2);
score_3_2 = Math.min(score_3_2, score_3_3 + rubble_3_2);
score_4_2 = Math.min(score_4_2, score_3_3 + rubble_4_2);
score_3_2 = Math.min(score_3_2, score_4_3 + rubble_3_2);
score_4_2 = Math.min(score_4_2, score_4_3 + rubble_4_2);
score_5_2 = Math.min(score_5_2, score_4_3 + rubble_5_2);
score_4_2 = Math.min(score_4_2, score_5_3 + rubble_4_2);
score_5_2 = Math.min(score_5_2, score_5_3 + rubble_5_2);
score_6_2 = Math.min(score_6_2, score_5_3 + rubble_6_2);
score_1_7 = Math.min(score_1_7, score_2_6 + rubble_1_7);
score_1_6 = Math.min(score_1_6, score_2_6 + rubble_1_6);
score_1_5 = Math.min(score_1_5, score_2_6 + rubble_1_5);
score_1_6 = Math.min(score_1_6, score_2_5 + rubble_1_6);
score_1_5 = Math.min(score_1_5, score_2_5 + rubble_1_5);
score_1_4 = Math.min(score_1_4, score_2_5 + rubble_1_4);
score_1_5 = Math.min(score_1_5, score_2_4 + rubble_1_5);
score_1_4 = Math.min(score_1_4, score_2_4 + rubble_1_4);
score_1_3 = Math.min(score_1_3, score_2_4 + rubble_1_3);
score_1_4 = Math.min(score_1_4, score_2_3 + rubble_1_4);
score_1_3 = Math.min(score_1_3, score_2_3 + rubble_1_3);
score_1_2 = Math.min(score_1_2, score_2_3 + rubble_1_2);
score_1_3 = Math.min(score_1_3, score_2_2 + rubble_1_3);
score_1_2 = Math.min(score_1_2, score_2_2 + rubble_1_2);
score_1_1 = Math.min(score_1_1, score_2_2 + rubble_1_1);
score_2_1 = Math.min(score_2_1, score_2_2 + rubble_2_1);
score_3_1 = Math.min(score_3_1, score_2_2 + rubble_3_1);
score_2_1 = Math.min(score_2_1, score_3_2 + rubble_2_1);
score_3_1 = Math.min(score_3_1, score_3_2 + rubble_3_1);
score_4_1 = Math.min(score_4_1, score_3_2 + rubble_4_1);
score_3_1 = Math.min(score_3_1, score_4_2 + rubble_3_1);
score_4_1 = Math.min(score_4_1, score_4_2 + rubble_4_1);
score_5_1 = Math.min(score_5_1, score_4_2 + rubble_5_1);
score_4_1 = Math.min(score_4_1, score_5_2 + rubble_4_1);
score_5_1 = Math.min(score_5_1, score_5_2 + rubble_5_1);
score_6_1 = Math.min(score_6_1, score_5_2 + rubble_6_1);
score_5_1 = Math.min(score_5_1, score_6_2 + rubble_5_1);
score_6_1 = Math.min(score_6_1, score_6_2 + rubble_6_1);
score_7_1 = Math.min(score_7_1, score_6_2 + rubble_7_1);
score_0_6 = Math.min(score_0_6, score_1_7 + rubble_0_6);
score_0_6 = Math.min(score_0_6, score_1_6 + rubble_0_6);
score_0_5 = Math.min(score_0_5, score_1_6 + rubble_0_5);
score_0_6 = Math.min(score_0_6, score_1_5 + rubble_0_6);
score_0_5 = Math.min(score_0_5, score_1_5 + rubble_0_5);
score_0_4 = Math.min(score_0_4, score_1_5 + rubble_0_4);
score_0_5 = Math.min(score_0_5, score_1_4 + rubble_0_5);
score_0_4 = Math.min(score_0_4, score_1_4 + rubble_0_4);
score_0_3 = Math.min(score_0_3, score_1_4 + rubble_0_3);
score_0_4 = Math.min(score_0_4, score_1_3 + rubble_0_4);
score_0_3 = Math.min(score_0_3, score_1_3 + rubble_0_3);
score_0_2 = Math.min(score_0_2, score_1_3 + rubble_0_2);
score_0_3 = Math.min(score_0_3, score_1_2 + rubble_0_3);
score_0_2 = Math.min(score_0_2, score_1_2 + rubble_0_2);
score_0_2 = Math.min(score_0_2, score_1_1 + rubble_0_2);
score_2_0 = Math.min(score_2_0, score_1_1 + rubble_2_0);
score_2_0 = Math.min(score_2_0, score_2_1 + rubble_2_0);
score_3_0 = Math.min(score_3_0, score_2_1 + rubble_3_0);
score_2_0 = Math.min(score_2_0, score_3_1 + rubble_2_0);
score_3_0 = Math.min(score_3_0, score_3_1 + rubble_3_0);
score_4_0 = Math.min(score_4_0, score_3_1 + rubble_4_0);
score_3_0 = Math.min(score_3_0, score_4_1 + rubble_3_0);
score_4_0 = Math.min(score_4_0, score_4_1 + rubble_4_0);
score_5_0 = Math.min(score_5_0, score_4_1 + rubble_5_0);
score_4_0 = Math.min(score_4_0, score_5_1 + rubble_4_0);
score_5_0 = Math.min(score_5_0, score_5_1 + rubble_5_0);
score_6_0 = Math.min(score_6_0, score_5_1 + rubble_6_0);
score_5_0 = Math.min(score_5_0, score_6_1 + rubble_5_0);
score_6_0 = Math.min(score_6_0, score_6_1 + rubble_6_0);
score_6_0 = Math.min(score_6_0, score_7_1 + rubble_6_0);
Direction go = Direction.CENTER;
int best = Integer.MAX_VALUE;
if (score_5_3 < best) {
best = score_5_3;
go = cur.directionTo(loc_5_3);
}
if (score_4_3 < best) {
best = score_4_3;
go = cur.directionTo(loc_4_3);
}
if (score_3_3 < best) {
best = score_3_3;
go = cur.directionTo(loc_3_3);
}
if (score_3_4 < best) {
best = score_3_4;
go = cur.directionTo(loc_3_4);
}
if (score_3_5 < best) {
best = score_3_5;
go = cur.directionTo(loc_3_5);
}
if (rc.canMove(go)) rc.move(go);
if (cur.equals(new MapLocation(27, 25))) { System.out.println(score_6_0 + " " + "score_6_0");
System.out.println(score_5_0 + " " + "score_5_0");
System.out.println(score_4_0 + " " + "score_4_0");
System.out.println(score_3_0 + " " + "score_3_0");
System.out.println(score_2_0 + " " + "score_2_0");
System.out.println(score_0_2 + " " + "score_0_2");
System.out.println(score_0_3 + " " + "score_0_3");
System.out.println(score_0_4 + " " + "score_0_4");
System.out.println(score_0_5 + " " + "score_0_5");
System.out.println(score_0_6 + " " + "score_0_6");

System.out.println(score_7_1 + " " + "score_7_1");
System.out.println(score_6_1 + " " + "score_6_1");
System.out.println(score_5_1 + " " + "score_5_1");
System.out.println(score_4_1 + " " + "score_4_1");
System.out.println(score_3_1 + " " + "score_3_1");
System.out.println(score_2_1 + " " + "score_2_1");
System.out.println(score_1_1 + " " + "score_1_1");
System.out.println(score_1_2 + " " + "score_1_2");
System.out.println(score_1_3 + " " + "score_1_3");
System.out.println(score_1_4 + " " + "score_1_4");
System.out.println(score_1_5 + " " + "score_1_5");
System.out.println(score_1_6 + " " + "score_1_6");
System.out.println(score_1_7 + " " + "score_1_7");

System.out.println(score_6_2 + " " + "score_6_2");
System.out.println(score_5_2 + " " + "score_5_2");
System.out.println(score_4_2 + " " + "score_4_2");
System.out.println(score_3_2 + " " + "score_3_2");
System.out.println(score_2_2 + " " + "score_2_2");
System.out.println(score_2_3 + " " + "score_2_3");
System.out.println(score_2_4 + " " + "score_2_4");
System.out.println(score_2_5 + " " + "score_2_5");
System.out.println(score_2_6 + " " + "score_2_6");

System.out.println(score_5_3 + " " + "score_5_3");
System.out.println(score_4_3 + " " + "score_4_3");
System.out.println(score_3_3 + " " + "score_3_3");
System.out.println(score_3_4 + " " + "score_3_4");
System.out.println(score_3_5 + " " + "score_3_5");

}
}
static void SOUTHEAST(RobotController rc, MapLocation destination) throws GameActionException {
MapLocation cur = rc.getLocation();
MapLocation loc_8_6 = cur.translate(4, 2);
MapLocation loc_8_5 = cur.translate(4, 1);
MapLocation loc_8_4 = cur.translate(4, 0);
MapLocation loc_8_3 = cur.translate(4, -1);
MapLocation loc_8_2 = cur.translate(4, -2);
MapLocation loc_6_0 = cur.translate(2, -4);
MapLocation loc_5_0 = cur.translate(1, -4);
MapLocation loc_4_0 = cur.translate(0, -4);
MapLocation loc_3_0 = cur.translate(-1, -4);
MapLocation loc_2_0 = cur.translate(-2, -4);
MapLocation loc_7_7 = cur.translate(3, 3);
MapLocation loc_7_6 = cur.translate(3, 2);
MapLocation loc_7_5 = cur.translate(3, 1);
MapLocation loc_7_4 = cur.translate(3, 0);
MapLocation loc_7_3 = cur.translate(3, -1);
MapLocation loc_7_2 = cur.translate(3, -2);
MapLocation loc_7_1 = cur.translate(3, -3);
MapLocation loc_6_1 = cur.translate(2, -3);
MapLocation loc_5_1 = cur.translate(1, -3);
MapLocation loc_4_1 = cur.translate(0, -3);
MapLocation loc_3_1 = cur.translate(-1, -3);
MapLocation loc_2_1 = cur.translate(-2, -3);
MapLocation loc_1_1 = cur.translate(-3, -3);
MapLocation loc_6_6 = cur.translate(2, 2);
MapLocation loc_6_5 = cur.translate(2, 1);
MapLocation loc_6_4 = cur.translate(2, 0);
MapLocation loc_6_3 = cur.translate(2, -1);
MapLocation loc_6_2 = cur.translate(2, -2);
MapLocation loc_5_2 = cur.translate(1, -2);
MapLocation loc_4_2 = cur.translate(0, -2);
MapLocation loc_3_2 = cur.translate(-1, -2);
MapLocation loc_2_2 = cur.translate(-2, -2);
MapLocation loc_5_5 = cur.translate(1, 1);
MapLocation loc_5_4 = cur.translate(1, 0);
MapLocation loc_5_3 = cur.translate(1, -1);
MapLocation loc_4_3 = cur.translate(0, -1);
MapLocation loc_3_3 = cur.translate(-1, -1);
int rubble_8_6 = rc.canSenseLocation(loc_8_6) ? 20 + 2 * rc.senseRubble(loc_8_6) : 100000;
if (loc_8_6.equals(destination)) { rubble_8_6 = -0; }int rubble_8_5 = rc.canSenseLocation(loc_8_5) ? 20 + 2 * rc.senseRubble(loc_8_5) : 100000;
if (loc_8_5.equals(destination)) { rubble_8_5 = -0; }int rubble_8_4 = rc.canSenseLocation(loc_8_4) ? 20 + 2 * rc.senseRubble(loc_8_4) : 100000;
if (loc_8_4.equals(destination)) { rubble_8_4 = -0; }int rubble_8_3 = rc.canSenseLocation(loc_8_3) ? 20 + 2 * rc.senseRubble(loc_8_3) : 100000;
if (loc_8_3.equals(destination)) { rubble_8_3 = -0; }int rubble_8_2 = rc.canSenseLocation(loc_8_2) ? 20 + 2 * rc.senseRubble(loc_8_2) : 100000;
if (loc_8_2.equals(destination)) { rubble_8_2 = -0; }int rubble_6_0 = rc.canSenseLocation(loc_6_0) ? 20 + 2 * rc.senseRubble(loc_6_0) : 100000;
if (loc_6_0.equals(destination)) { rubble_6_0 = -0; }int rubble_5_0 = rc.canSenseLocation(loc_5_0) ? 20 + 2 * rc.senseRubble(loc_5_0) : 100000;
if (loc_5_0.equals(destination)) { rubble_5_0 = -0; }int rubble_4_0 = rc.canSenseLocation(loc_4_0) ? 20 + 2 * rc.senseRubble(loc_4_0) : 100000;
if (loc_4_0.equals(destination)) { rubble_4_0 = -0; }int rubble_3_0 = rc.canSenseLocation(loc_3_0) ? 20 + 2 * rc.senseRubble(loc_3_0) : 100000;
if (loc_3_0.equals(destination)) { rubble_3_0 = -0; }int rubble_2_0 = rc.canSenseLocation(loc_2_0) ? 20 + 2 * rc.senseRubble(loc_2_0) : 100000;
if (loc_2_0.equals(destination)) { rubble_2_0 = -0; }int rubble_7_7 = rc.canSenseLocation(loc_7_7) ? 20 + 2 * rc.senseRubble(loc_7_7) : 100000;
if (loc_7_7.equals(destination)) { rubble_7_7 = -0; }int rubble_7_6 = rc.canSenseLocation(loc_7_6) ? 20 + 2 * rc.senseRubble(loc_7_6) : 100000;
if (loc_7_6.equals(destination)) { rubble_7_6 = -0; }int rubble_7_5 = rc.canSenseLocation(loc_7_5) ? 20 + 2 * rc.senseRubble(loc_7_5) : 100000;
if (loc_7_5.equals(destination)) { rubble_7_5 = -0; }int rubble_7_4 = rc.canSenseLocation(loc_7_4) ? 20 + 2 * rc.senseRubble(loc_7_4) : 100000;
if (loc_7_4.equals(destination)) { rubble_7_4 = -0; }int rubble_7_3 = rc.canSenseLocation(loc_7_3) ? 20 + 2 * rc.senseRubble(loc_7_3) : 100000;
if (loc_7_3.equals(destination)) { rubble_7_3 = -0; }int rubble_7_2 = rc.canSenseLocation(loc_7_2) ? 20 + 2 * rc.senseRubble(loc_7_2) : 100000;
if (loc_7_2.equals(destination)) { rubble_7_2 = -0; }int rubble_7_1 = rc.canSenseLocation(loc_7_1) ? 20 + 2 * rc.senseRubble(loc_7_1) : 100000;
if (loc_7_1.equals(destination)) { rubble_7_1 = -0; }int rubble_6_1 = rc.canSenseLocation(loc_6_1) ? 20 + 2 * rc.senseRubble(loc_6_1) : 100000;
if (loc_6_1.equals(destination)) { rubble_6_1 = -0; }int rubble_5_1 = rc.canSenseLocation(loc_5_1) ? 20 + 2 * rc.senseRubble(loc_5_1) : 100000;
if (loc_5_1.equals(destination)) { rubble_5_1 = -0; }int rubble_4_1 = rc.canSenseLocation(loc_4_1) ? 20 + 2 * rc.senseRubble(loc_4_1) : 100000;
if (loc_4_1.equals(destination)) { rubble_4_1 = -0; }int rubble_3_1 = rc.canSenseLocation(loc_3_1) ? 20 + 2 * rc.senseRubble(loc_3_1) : 100000;
if (loc_3_1.equals(destination)) { rubble_3_1 = -0; }int rubble_2_1 = rc.canSenseLocation(loc_2_1) ? 20 + 2 * rc.senseRubble(loc_2_1) : 100000;
if (loc_2_1.equals(destination)) { rubble_2_1 = -0; }int rubble_1_1 = rc.canSenseLocation(loc_1_1) ? 20 + 2 * rc.senseRubble(loc_1_1) : 100000;
if (loc_1_1.equals(destination)) { rubble_1_1 = -0; }int rubble_6_6 = rc.canSenseLocation(loc_6_6) ? 20 + 2 * rc.senseRubble(loc_6_6) : 100000;
if (loc_6_6.equals(destination)) { rubble_6_6 = -0; }int rubble_6_5 = rc.canSenseLocation(loc_6_5) ? 20 + 2 * rc.senseRubble(loc_6_5) : 100000;
if (loc_6_5.equals(destination)) { rubble_6_5 = -0; }int rubble_6_4 = rc.canSenseLocation(loc_6_4) ? 20 + 2 * rc.senseRubble(loc_6_4) : 100000;
if (loc_6_4.equals(destination)) { rubble_6_4 = -0; }int rubble_6_3 = rc.canSenseLocation(loc_6_3) ? 20 + 2 * rc.senseRubble(loc_6_3) : 100000;
if (loc_6_3.equals(destination)) { rubble_6_3 = -0; }int rubble_6_2 = rc.canSenseLocation(loc_6_2) ? 20 + 2 * rc.senseRubble(loc_6_2) : 100000;
if (loc_6_2.equals(destination)) { rubble_6_2 = -0; }int rubble_5_2 = rc.canSenseLocation(loc_5_2) ? 20 + 2 * rc.senseRubble(loc_5_2) : 100000;
if (loc_5_2.equals(destination)) { rubble_5_2 = -0; }int rubble_4_2 = rc.canSenseLocation(loc_4_2) ? 20 + 2 * rc.senseRubble(loc_4_2) : 100000;
if (loc_4_2.equals(destination)) { rubble_4_2 = -0; }int rubble_3_2 = rc.canSenseLocation(loc_3_2) ? 20 + 2 * rc.senseRubble(loc_3_2) : 100000;
if (loc_3_2.equals(destination)) { rubble_3_2 = -0; }int rubble_2_2 = rc.canSenseLocation(loc_2_2) ? 20 + 2 * rc.senseRubble(loc_2_2) : 100000;
if (loc_2_2.equals(destination)) { rubble_2_2 = -0; }int rubble_5_5 = rc.canSenseLocation(loc_5_5) && !rc.isLocationOccupied(loc_5_5) ? 20 + 2 * rc.senseRubble(loc_5_5) : 100000;
if (loc_5_5.equals(destination)) { rubble_5_5 = -0; }int rubble_5_4 = rc.canSenseLocation(loc_5_4) && !rc.isLocationOccupied(loc_5_4) ? 20 + 2 * rc.senseRubble(loc_5_4) : 100000;
if (loc_5_4.equals(destination)) { rubble_5_4 = -0; }int rubble_5_3 = rc.canSenseLocation(loc_5_3) && !rc.isLocationOccupied(loc_5_3) ? 20 + 2 * rc.senseRubble(loc_5_3) : 100000;
if (loc_5_3.equals(destination)) { rubble_5_3 = -0; }int rubble_4_3 = rc.canSenseLocation(loc_4_3) && !rc.isLocationOccupied(loc_4_3) ? 20 + 2 * rc.senseRubble(loc_4_3) : 100000;
if (loc_4_3.equals(destination)) { rubble_4_3 = -0; }int rubble_3_3 = rc.canSenseLocation(loc_3_3) && !rc.isLocationOccupied(loc_3_3) ? 20 + 2 * rc.senseRubble(loc_3_3) : 100000;
if (loc_3_3.equals(destination)) { rubble_3_3 = -0; }int score_8_6 = 1000000000;
int score_8_5 = 1000000000;
int score_8_4 = 1000000000;
int score_8_3 = 1000000000;
int score_8_2 = 1000000000;
int score_6_0 = 1000000000;
int score_5_0 = 1000000000;
int score_4_0 = 1000000000;
int score_3_0 = 1000000000;
int score_2_0 = 1000000000;
int score_7_7 = 1000000000;
int score_7_6 = 1000000000;
int score_7_5 = 1000000000;
int score_7_4 = 1000000000;
int score_7_3 = 1000000000;
int score_7_2 = 1000000000;
int score_7_1 = 1000000000;
int score_6_1 = 1000000000;
int score_5_1 = 1000000000;
int score_4_1 = 1000000000;
int score_3_1 = 1000000000;
int score_2_1 = 1000000000;
int score_1_1 = 1000000000;
int score_6_6 = 1000000000;
int score_6_5 = 1000000000;
int score_6_4 = 1000000000;
int score_6_3 = 1000000000;
int score_6_2 = 1000000000;
int score_5_2 = 1000000000;
int score_4_2 = 1000000000;
int score_3_2 = 1000000000;
int score_2_2 = 1000000000;
int score_5_5 = 1000000000;
int score_5_4 = 1000000000;
int score_5_3 = 1000000000;
int score_4_3 = 1000000000;
int score_3_3 = 1000000000;
int temp0 = 0;
int temp1 = 0;
int temp2 = 0;
int temp3 = 0;
int temp4 = 0;
int temp5 = 0;
int temp6 = 0;
int temp7 = 0;
int temp8 = 0;
int temp9 = 0;
int temp10 = 0;
int temp11 = 0;
int temp12 = 0;
int runningMin = 100000;
score_8_6 = man(loc_8_6, destination) * (20 + 0) + rubble_8_6;
score_8_5 = man(loc_8_5, destination) * (20 + 0) + rubble_8_5;
score_8_4 = man(loc_8_4, destination) * (20 + 0) + rubble_8_4;
score_8_3 = man(loc_8_3, destination) * (20 + 0) + rubble_8_3;
score_8_2 = man(loc_8_2, destination) * (20 + 0) + rubble_8_2;
score_6_0 = man(loc_6_0, destination) * (20 + 0) + rubble_6_0;
score_5_0 = man(loc_5_0, destination) * (20 + 0) + rubble_5_0;
score_4_0 = man(loc_4_0, destination) * (20 + 0) + rubble_4_0;
score_3_0 = man(loc_3_0, destination) * (20 + 0) + rubble_3_0;
score_2_0 = man(loc_2_0, destination) * (20 + 0) + rubble_2_0;
score_8_5 = Math.min(score_8_5, score_8_6 + rubble_8_5);
score_8_4 = Math.min(score_8_4, score_8_5 + rubble_8_4);
score_8_3 = Math.min(score_8_3, score_8_4 + rubble_8_3);
score_8_2 = Math.min(score_8_2, score_8_3 + rubble_8_2);
score_5_0 = Math.min(score_5_0, score_6_0 + rubble_5_0);
score_4_0 = Math.min(score_4_0, score_5_0 + rubble_4_0);
score_3_0 = Math.min(score_3_0, score_4_0 + rubble_3_0);
score_2_0 = Math.min(score_2_0, score_3_0 + rubble_2_0);
score_3_0 = Math.min(score_3_0, score_2_0 + rubble_3_0);
score_4_0 = Math.min(score_4_0, score_3_0 + rubble_4_0);
score_5_0 = Math.min(score_5_0, score_4_0 + rubble_5_0);
score_6_0 = Math.min(score_6_0, score_5_0 + rubble_6_0);
score_8_3 = Math.min(score_8_3, score_8_2 + rubble_8_3);
score_8_4 = Math.min(score_8_4, score_8_3 + rubble_8_4);
score_8_5 = Math.min(score_8_5, score_8_4 + rubble_8_5);
score_8_6 = Math.min(score_8_6, score_8_5 + rubble_8_6);
score_1_1 = Math.min(score_1_1, score_2_0 + rubble_1_1);
score_2_1 = Math.min(score_2_1, score_2_0 + rubble_2_1);
score_2_1 = Math.min(score_2_1, score_3_0 + rubble_2_1);
score_3_1 = Math.min(score_3_1, score_2_0 + rubble_3_1);
score_3_1 = Math.min(score_3_1, score_3_0 + rubble_3_1);
score_3_1 = Math.min(score_3_1, score_4_0 + rubble_3_1);
score_4_1 = Math.min(score_4_1, score_3_0 + rubble_4_1);
score_4_1 = Math.min(score_4_1, score_4_0 + rubble_4_1);
score_4_1 = Math.min(score_4_1, score_5_0 + rubble_4_1);
score_5_1 = Math.min(score_5_1, score_4_0 + rubble_5_1);
score_5_1 = Math.min(score_5_1, score_5_0 + rubble_5_1);
score_5_1 = Math.min(score_5_1, score_6_0 + rubble_5_1);
score_6_1 = Math.min(score_6_1, score_5_0 + rubble_6_1);
score_6_1 = Math.min(score_6_1, score_6_0 + rubble_6_1);
score_7_1 = Math.min(score_7_1, score_6_0 + rubble_7_1);
score_7_1 = Math.min(score_7_1, score_8_2 + rubble_7_1);
score_7_2 = Math.min(score_7_2, score_8_2 + rubble_7_2);
score_7_2 = Math.min(score_7_2, score_8_3 + rubble_7_2);
score_7_3 = Math.min(score_7_3, score_8_2 + rubble_7_3);
score_7_3 = Math.min(score_7_3, score_8_3 + rubble_7_3);
score_7_3 = Math.min(score_7_3, score_8_4 + rubble_7_3);
score_7_4 = Math.min(score_7_4, score_8_3 + rubble_7_4);
score_7_4 = Math.min(score_7_4, score_8_4 + rubble_7_4);
score_7_4 = Math.min(score_7_4, score_8_5 + rubble_7_4);
score_7_5 = Math.min(score_7_5, score_8_4 + rubble_7_5);
score_7_5 = Math.min(score_7_5, score_8_5 + rubble_7_5);
score_7_5 = Math.min(score_7_5, score_8_6 + rubble_7_5);
score_7_6 = Math.min(score_7_6, score_8_5 + rubble_7_6);
score_7_6 = Math.min(score_7_6, score_8_6 + rubble_7_6);
score_7_7 = Math.min(score_7_7, score_8_6 + rubble_7_7);
score_7_6 = Math.min(score_7_6, score_7_7 + rubble_7_6);
score_7_5 = Math.min(score_7_5, score_7_6 + rubble_7_5);
score_7_4 = Math.min(score_7_4, score_7_5 + rubble_7_4);
score_7_3 = Math.min(score_7_3, score_7_4 + rubble_7_3);
score_7_2 = Math.min(score_7_2, score_7_3 + rubble_7_2);
score_7_1 = Math.min(score_7_1, score_7_2 + rubble_7_1);
score_6_1 = Math.min(score_6_1, score_7_1 + rubble_6_1);
score_6_1 = Math.min(score_6_1, score_7_2 + rubble_6_1);
score_5_1 = Math.min(score_5_1, score_6_1 + rubble_5_1);
score_4_1 = Math.min(score_4_1, score_5_1 + rubble_4_1);
score_3_1 = Math.min(score_3_1, score_4_1 + rubble_3_1);
score_2_1 = Math.min(score_2_1, score_3_1 + rubble_2_1);
score_1_1 = Math.min(score_1_1, score_2_1 + rubble_1_1);
score_2_1 = Math.min(score_2_1, score_1_1 + rubble_2_1);
score_3_1 = Math.min(score_3_1, score_2_1 + rubble_3_1);
score_4_1 = Math.min(score_4_1, score_3_1 + rubble_4_1);
score_5_1 = Math.min(score_5_1, score_4_1 + rubble_5_1);
score_6_1 = Math.min(score_6_1, score_5_1 + rubble_6_1);
score_7_1 = Math.min(score_7_1, score_6_1 + rubble_7_1);
score_7_2 = Math.min(score_7_2, score_7_1 + rubble_7_2);
score_7_2 = Math.min(score_7_2, score_6_1 + rubble_7_2);
score_7_3 = Math.min(score_7_3, score_7_2 + rubble_7_3);
score_7_4 = Math.min(score_7_4, score_7_3 + rubble_7_4);
score_7_5 = Math.min(score_7_5, score_7_4 + rubble_7_5);
score_7_6 = Math.min(score_7_6, score_7_5 + rubble_7_6);
score_7_7 = Math.min(score_7_7, score_7_6 + rubble_7_7);
score_2_2 = Math.min(score_2_2, score_1_1 + rubble_2_2);
score_2_2 = Math.min(score_2_2, score_2_1 + rubble_2_2);
score_2_2 = Math.min(score_2_2, score_3_1 + rubble_2_2);
score_3_2 = Math.min(score_3_2, score_2_1 + rubble_3_2);
score_3_2 = Math.min(score_3_2, score_3_1 + rubble_3_2);
score_3_2 = Math.min(score_3_2, score_4_1 + rubble_3_2);
score_4_2 = Math.min(score_4_2, score_3_1 + rubble_4_2);
score_4_2 = Math.min(score_4_2, score_4_1 + rubble_4_2);
score_4_2 = Math.min(score_4_2, score_5_1 + rubble_4_2);
score_5_2 = Math.min(score_5_2, score_4_1 + rubble_5_2);
score_5_2 = Math.min(score_5_2, score_5_1 + rubble_5_2);
score_5_2 = Math.min(score_5_2, score_6_1 + rubble_5_2);
score_6_2 = Math.min(score_6_2, score_5_1 + rubble_6_2);
score_6_2 = Math.min(score_6_2, score_6_1 + rubble_6_2);
score_6_2 = Math.min(score_6_2, score_7_1 + rubble_6_2);
score_6_2 = Math.min(score_6_2, score_7_2 + rubble_6_2);
score_6_2 = Math.min(score_6_2, score_7_3 + rubble_6_2);
score_6_3 = Math.min(score_6_3, score_7_2 + rubble_6_3);
score_6_3 = Math.min(score_6_3, score_7_3 + rubble_6_3);
score_6_3 = Math.min(score_6_3, score_7_4 + rubble_6_3);
score_6_4 = Math.min(score_6_4, score_7_3 + rubble_6_4);
score_6_4 = Math.min(score_6_4, score_7_4 + rubble_6_4);
score_6_4 = Math.min(score_6_4, score_7_5 + rubble_6_4);
score_6_5 = Math.min(score_6_5, score_7_4 + rubble_6_5);
score_6_5 = Math.min(score_6_5, score_7_5 + rubble_6_5);
score_6_5 = Math.min(score_6_5, score_7_6 + rubble_6_5);
score_6_6 = Math.min(score_6_6, score_7_5 + rubble_6_6);
score_6_6 = Math.min(score_6_6, score_7_6 + rubble_6_6);
score_6_6 = Math.min(score_6_6, score_7_7 + rubble_6_6);
score_6_5 = Math.min(score_6_5, score_6_6 + rubble_6_5);
score_6_4 = Math.min(score_6_4, score_6_5 + rubble_6_4);
score_6_3 = Math.min(score_6_3, score_6_4 + rubble_6_3);
score_6_2 = Math.min(score_6_2, score_6_3 + rubble_6_2);
score_5_2 = Math.min(score_5_2, score_6_2 + rubble_5_2);
score_5_2 = Math.min(score_5_2, score_6_3 + rubble_5_2);
score_4_2 = Math.min(score_4_2, score_5_2 + rubble_4_2);
score_3_2 = Math.min(score_3_2, score_4_2 + rubble_3_2);
score_2_2 = Math.min(score_2_2, score_3_2 + rubble_2_2);
score_3_2 = Math.min(score_3_2, score_2_2 + rubble_3_2);
score_4_2 = Math.min(score_4_2, score_3_2 + rubble_4_2);
score_5_2 = Math.min(score_5_2, score_4_2 + rubble_5_2);
score_6_2 = Math.min(score_6_2, score_5_2 + rubble_6_2);
score_6_3 = Math.min(score_6_3, score_6_2 + rubble_6_3);
score_6_3 = Math.min(score_6_3, score_5_2 + rubble_6_3);
score_6_4 = Math.min(score_6_4, score_6_3 + rubble_6_4);
score_6_5 = Math.min(score_6_5, score_6_4 + rubble_6_5);
score_6_6 = Math.min(score_6_6, score_6_5 + rubble_6_6);
score_3_3 = Math.min(score_3_3, score_2_2 + rubble_3_3);
score_3_3 = Math.min(score_3_3, score_3_2 + rubble_3_3);
score_3_3 = Math.min(score_3_3, score_4_2 + rubble_3_3);
score_4_3 = Math.min(score_4_3, score_3_2 + rubble_4_3);
score_4_3 = Math.min(score_4_3, score_4_2 + rubble_4_3);
score_4_3 = Math.min(score_4_3, score_5_2 + rubble_4_3);
score_5_3 = Math.min(score_5_3, score_4_2 + rubble_5_3);
score_5_3 = Math.min(score_5_3, score_5_2 + rubble_5_3);
score_5_3 = Math.min(score_5_3, score_6_2 + rubble_5_3);
score_5_3 = Math.min(score_5_3, score_6_3 + rubble_5_3);
score_5_3 = Math.min(score_5_3, score_6_4 + rubble_5_3);
score_5_4 = Math.min(score_5_4, score_6_3 + rubble_5_4);
score_5_4 = Math.min(score_5_4, score_6_4 + rubble_5_4);
score_5_4 = Math.min(score_5_4, score_6_5 + rubble_5_4);
score_5_5 = Math.min(score_5_5, score_6_4 + rubble_5_5);
score_5_5 = Math.min(score_5_5, score_6_5 + rubble_5_5);
score_5_5 = Math.min(score_5_5, score_6_6 + rubble_5_5);
score_5_4 = Math.min(score_5_4, score_5_5 + rubble_5_4);
score_5_3 = Math.min(score_5_3, score_5_4 + rubble_5_3);
score_4_3 = Math.min(score_4_3, score_5_3 + rubble_4_3);
score_4_3 = Math.min(score_4_3, score_5_4 + rubble_4_3);
score_3_3 = Math.min(score_3_3, score_4_3 + rubble_3_3);
score_3_3 = Math.min(score_3_3, score_5_5 + rubble_3_3);
score_4_3 = Math.min(score_4_3, score_3_3 + rubble_4_3);
score_4_3 = Math.min(score_4_3, score_5_5 + rubble_4_3);
score_5_3 = Math.min(score_5_3, score_4_3 + rubble_5_3);
score_5_4 = Math.min(score_5_4, score_5_3 + rubble_5_4);
score_5_4 = Math.min(score_5_4, score_4_3 + rubble_5_4);
score_5_5 = Math.min(score_5_5, score_5_4 + rubble_5_5);
score_2_2 = Math.min(score_2_2, score_3_3 + rubble_2_2);
score_3_2 = Math.min(score_3_2, score_3_3 + rubble_3_2);
score_4_2 = Math.min(score_4_2, score_3_3 + rubble_4_2);
score_3_2 = Math.min(score_3_2, score_4_3 + rubble_3_2);
score_4_2 = Math.min(score_4_2, score_4_3 + rubble_4_2);
score_5_2 = Math.min(score_5_2, score_4_3 + rubble_5_2);
score_4_2 = Math.min(score_4_2, score_5_3 + rubble_4_2);
score_5_2 = Math.min(score_5_2, score_5_3 + rubble_5_2);
score_6_2 = Math.min(score_6_2, score_5_3 + rubble_6_2);
score_6_3 = Math.min(score_6_3, score_5_3 + rubble_6_3);
score_6_4 = Math.min(score_6_4, score_5_3 + rubble_6_4);
score_6_3 = Math.min(score_6_3, score_5_4 + rubble_6_3);
score_6_4 = Math.min(score_6_4, score_5_4 + rubble_6_4);
score_6_5 = Math.min(score_6_5, score_5_4 + rubble_6_5);
score_6_4 = Math.min(score_6_4, score_5_5 + rubble_6_4);
score_6_5 = Math.min(score_6_5, score_5_5 + rubble_6_5);
score_6_6 = Math.min(score_6_6, score_5_5 + rubble_6_6);
score_1_1 = Math.min(score_1_1, score_2_2 + rubble_1_1);
score_2_1 = Math.min(score_2_1, score_2_2 + rubble_2_1);
score_3_1 = Math.min(score_3_1, score_2_2 + rubble_3_1);
score_2_1 = Math.min(score_2_1, score_3_2 + rubble_2_1);
score_3_1 = Math.min(score_3_1, score_3_2 + rubble_3_1);
score_4_1 = Math.min(score_4_1, score_3_2 + rubble_4_1);
score_3_1 = Math.min(score_3_1, score_4_2 + rubble_3_1);
score_4_1 = Math.min(score_4_1, score_4_2 + rubble_4_1);
score_5_1 = Math.min(score_5_1, score_4_2 + rubble_5_1);
score_4_1 = Math.min(score_4_1, score_5_2 + rubble_4_1);
score_5_1 = Math.min(score_5_1, score_5_2 + rubble_5_1);
score_6_1 = Math.min(score_6_1, score_5_2 + rubble_6_1);
score_5_1 = Math.min(score_5_1, score_6_2 + rubble_5_1);
score_6_1 = Math.min(score_6_1, score_6_2 + rubble_6_1);
score_7_1 = Math.min(score_7_1, score_6_2 + rubble_7_1);
score_7_2 = Math.min(score_7_2, score_6_2 + rubble_7_2);
score_7_3 = Math.min(score_7_3, score_6_2 + rubble_7_3);
score_7_2 = Math.min(score_7_2, score_6_3 + rubble_7_2);
score_7_3 = Math.min(score_7_3, score_6_3 + rubble_7_3);
score_7_4 = Math.min(score_7_4, score_6_3 + rubble_7_4);
score_7_3 = Math.min(score_7_3, score_6_4 + rubble_7_3);
score_7_4 = Math.min(score_7_4, score_6_4 + rubble_7_4);
score_7_5 = Math.min(score_7_5, score_6_4 + rubble_7_5);
score_7_4 = Math.min(score_7_4, score_6_5 + rubble_7_4);
score_7_5 = Math.min(score_7_5, score_6_5 + rubble_7_5);
score_7_6 = Math.min(score_7_6, score_6_5 + rubble_7_6);
score_7_5 = Math.min(score_7_5, score_6_6 + rubble_7_5);
score_7_6 = Math.min(score_7_6, score_6_6 + rubble_7_6);
score_7_7 = Math.min(score_7_7, score_6_6 + rubble_7_7);
score_2_0 = Math.min(score_2_0, score_1_1 + rubble_2_0);
score_2_0 = Math.min(score_2_0, score_2_1 + rubble_2_0);
score_3_0 = Math.min(score_3_0, score_2_1 + rubble_3_0);
score_2_0 = Math.min(score_2_0, score_3_1 + rubble_2_0);
score_3_0 = Math.min(score_3_0, score_3_1 + rubble_3_0);
score_4_0 = Math.min(score_4_0, score_3_1 + rubble_4_0);
score_3_0 = Math.min(score_3_0, score_4_1 + rubble_3_0);
score_4_0 = Math.min(score_4_0, score_4_1 + rubble_4_0);
score_5_0 = Math.min(score_5_0, score_4_1 + rubble_5_0);
score_4_0 = Math.min(score_4_0, score_5_1 + rubble_4_0);
score_5_0 = Math.min(score_5_0, score_5_1 + rubble_5_0);
score_6_0 = Math.min(score_6_0, score_5_1 + rubble_6_0);
score_5_0 = Math.min(score_5_0, score_6_1 + rubble_5_0);
score_6_0 = Math.min(score_6_0, score_6_1 + rubble_6_0);
score_6_0 = Math.min(score_6_0, score_7_1 + rubble_6_0);
score_8_2 = Math.min(score_8_2, score_7_1 + rubble_8_2);
score_8_2 = Math.min(score_8_2, score_7_2 + rubble_8_2);
score_8_3 = Math.min(score_8_3, score_7_2 + rubble_8_3);
score_8_2 = Math.min(score_8_2, score_7_3 + rubble_8_2);
score_8_3 = Math.min(score_8_3, score_7_3 + rubble_8_3);
score_8_4 = Math.min(score_8_4, score_7_3 + rubble_8_4);
score_8_3 = Math.min(score_8_3, score_7_4 + rubble_8_3);
score_8_4 = Math.min(score_8_4, score_7_4 + rubble_8_4);
score_8_5 = Math.min(score_8_5, score_7_4 + rubble_8_5);
score_8_4 = Math.min(score_8_4, score_7_5 + rubble_8_4);
score_8_5 = Math.min(score_8_5, score_7_5 + rubble_8_5);
score_8_6 = Math.min(score_8_6, score_7_5 + rubble_8_6);
score_8_5 = Math.min(score_8_5, score_7_6 + rubble_8_5);
score_8_6 = Math.min(score_8_6, score_7_6 + rubble_8_6);
score_8_6 = Math.min(score_8_6, score_7_7 + rubble_8_6);
Direction go = Direction.CENTER;
int best = Integer.MAX_VALUE;
if (score_5_5 < best) {
best = score_5_5;
go = cur.directionTo(loc_5_5);
}
if (score_5_4 < best) {
best = score_5_4;
go = cur.directionTo(loc_5_4);
}
if (score_5_3 < best) {
best = score_5_3;
go = cur.directionTo(loc_5_3);
}
if (score_4_3 < best) {
best = score_4_3;
go = cur.directionTo(loc_4_3);
}
if (score_3_3 < best) {
best = score_3_3;
go = cur.directionTo(loc_3_3);
}
if (rc.canMove(go)) rc.move(go);
if (cur.equals(new MapLocation(27, 25))) { System.out.println(score_8_6 + " " + "score_8_6");
System.out.println(score_8_5 + " " + "score_8_5");
System.out.println(score_8_4 + " " + "score_8_4");
System.out.println(score_8_3 + " " + "score_8_3");
System.out.println(score_8_2 + " " + "score_8_2");
System.out.println(score_6_0 + " " + "score_6_0");
System.out.println(score_5_0 + " " + "score_5_0");
System.out.println(score_4_0 + " " + "score_4_0");
System.out.println(score_3_0 + " " + "score_3_0");
System.out.println(score_2_0 + " " + "score_2_0");

System.out.println(score_7_7 + " " + "score_7_7");
System.out.println(score_7_6 + " " + "score_7_6");
System.out.println(score_7_5 + " " + "score_7_5");
System.out.println(score_7_4 + " " + "score_7_4");
System.out.println(score_7_3 + " " + "score_7_3");
System.out.println(score_7_2 + " " + "score_7_2");
System.out.println(score_7_1 + " " + "score_7_1");
System.out.println(score_6_1 + " " + "score_6_1");
System.out.println(score_5_1 + " " + "score_5_1");
System.out.println(score_4_1 + " " + "score_4_1");
System.out.println(score_3_1 + " " + "score_3_1");
System.out.println(score_2_1 + " " + "score_2_1");
System.out.println(score_1_1 + " " + "score_1_1");

System.out.println(score_6_6 + " " + "score_6_6");
System.out.println(score_6_5 + " " + "score_6_5");
System.out.println(score_6_4 + " " + "score_6_4");
System.out.println(score_6_3 + " " + "score_6_3");
System.out.println(score_6_2 + " " + "score_6_2");
System.out.println(score_5_2 + " " + "score_5_2");
System.out.println(score_4_2 + " " + "score_4_2");
System.out.println(score_3_2 + " " + "score_3_2");
System.out.println(score_2_2 + " " + "score_2_2");

System.out.println(score_5_5 + " " + "score_5_5");
System.out.println(score_5_4 + " " + "score_5_4");
System.out.println(score_5_3 + " " + "score_5_3");
System.out.println(score_4_3 + " " + "score_4_3");
System.out.println(score_3_3 + " " + "score_3_3");

}
}

static void move(RobotController rc, MapLocation destination) throws GameActionException {
Direction go = rc.getLocation().directionTo(destination);
switch (go) {
case EAST: EAST(rc, destination); break;
case NORTH: NORTH(rc, destination); break;
case WEST: WEST(rc, destination); break;
case SOUTH: SOUTH(rc, destination); break;
case NORTHEAST: NORTHEAST(rc, destination); break;
case SOUTHEAST: SOUTHEAST(rc, destination); break;
case SOUTHWEST: SOUTHWEST(rc, destination); break;
case NORTHWEST: NORTHWEST(rc, destination); break;
}
}
static int man(MapLocation a, MapLocation b) { return Math.abs(a.x - b.x) + Math.abs(a.y-b.y); }}
