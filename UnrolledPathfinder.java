package pathfinder2;

import battlecode.common.*;

public class UnrolledPathfinder {

    public static void pathfind(RobotController rc) throws GameActionException {
        MapLocation m = rc.getLocation();
		MapLocation a_location = m.translate(-2, 2);
		int min_a_cost = 5000;
		int a_rubble = 5000;
		if (!rc.isLocationOccupied(a_location)) a_rubble = rc.senseRubble(a_location);
		MapLocation b_location = m.translate(-1, 2);
		int min_b_cost = 5000;
		int b_rubble = 5000;
		if (!rc.isLocationOccupied(b_location)) b_rubble = rc.senseRubble(b_location);
		MapLocation c_location = m.translate(0, 2);
		int min_c_cost = 5000;
		int c_rubble = 5000;
		if (!rc.isLocationOccupied(c_location)) c_rubble = rc.senseRubble(c_location);
		MapLocation d_location = m.translate(1, 2);
		int min_d_cost = 5000;
		int d_rubble = 5000;
		if (!rc.isLocationOccupied(d_location)) d_rubble = rc.senseRubble(d_location);
		MapLocation e_location = m.translate(2, 2);
		int min_e_cost = 5000;
		int e_rubble = 5000;
		if (!rc.isLocationOccupied(e_location)) e_rubble = rc.senseRubble(e_location);
		MapLocation f_location = m.translate(-2, 1);
		int min_f_cost = 5000;
		int f_rubble = 5000;
		if (!rc.isLocationOccupied(f_location)) f_rubble = rc.senseRubble(f_location);
		MapLocation g_location = m.translate(-1, 1);
		int g_path_cost = 5000;
		if (!rc.isLocationOccupied(g_location)) g_path_cost = rc.senseRubble(g_location);
		MapLocation h_location = m.translate(0, 1);
		int h_path_cost = 5000;
		if (!rc.isLocationOccupied(h_location)) h_path_cost = rc.senseRubble(h_location);
		MapLocation i_location = m.translate(1, 1);
		int i_path_cost = 5000;
		if (!rc.isLocationOccupied(i_location)) i_path_cost = rc.senseRubble(i_location);
		MapLocation j_location = m.translate(2, 1);
		int min_j_cost = 5000;
		int j_rubble = 5000;
		if (!rc.isLocationOccupied(j_location)) j_rubble = rc.senseRubble(j_location);
		MapLocation k_location = m.translate(-2, 0);
		int min_k_cost = 5000;
		int k_rubble = 5000;
		if (!rc.isLocationOccupied(k_location)) k_rubble = rc.senseRubble(k_location);
		MapLocation l_location = m.translate(-1, 0);
		int l_path_cost = 5000;
		if (!rc.isLocationOccupied(l_location)) l_path_cost = rc.senseRubble(l_location);
		MapLocation n_location = m.translate(1, 0);
		int n_path_cost = 5000;
		if (!rc.isLocationOccupied(n_location)) n_path_cost = rc.senseRubble(n_location);
		MapLocation o_location = m.translate(2, 0);
		int min_o_cost = 5000;
		int o_rubble = 5000;
		if (!rc.isLocationOccupied(o_location)) o_rubble = rc.senseRubble(o_location);
		MapLocation p_location = m.translate(-2, -1);
		int min_p_cost = 5000;
		int p_rubble = 5000;
		if (!rc.isLocationOccupied(p_location)) p_rubble = rc.senseRubble(p_location);
		MapLocation q_location = m.translate(-1, -1);
		int q_path_cost = 5000;
		if (!rc.isLocationOccupied(q_location)) q_path_cost = rc.senseRubble(q_location);
		MapLocation r_location = m.translate(0, -1);
		int r_path_cost = 5000;
		if (!rc.isLocationOccupied(r_location)) r_path_cost = rc.senseRubble(r_location);
		MapLocation s_location = m.translate(1, -1);
		int s_path_cost = 5000;
		if (!rc.isLocationOccupied(s_location)) s_path_cost = rc.senseRubble(s_location);
		MapLocation t_location = m.translate(2, -1);
		int min_t_cost = 5000;
		int t_rubble = 5000;
		if (!rc.isLocationOccupied(t_location)) t_rubble = rc.senseRubble(t_location);
		MapLocation u_location = m.translate(-2, -2);
		int min_u_cost = 5000;
		int u_rubble = 5000;
		if (!rc.isLocationOccupied(u_location)) u_rubble = rc.senseRubble(u_location);
		MapLocation v_location = m.translate(-1, -2);
		int min_v_cost = 5000;
		int v_rubble = 5000;
		if (!rc.isLocationOccupied(v_location)) v_rubble = rc.senseRubble(v_location);
		MapLocation w_location = m.translate(0, -2);
		int min_w_cost = 5000;
		int w_rubble = 5000;
		if (!rc.isLocationOccupied(w_location)) w_rubble = rc.senseRubble(w_location);
		MapLocation x_location = m.translate(1, -2);
		int min_x_cost = 5000;
		int x_rubble = 5000;
		if (!rc.isLocationOccupied(x_location)) x_rubble = rc.senseRubble(x_location);
		MapLocation y_location = m.translate(2, -2);
		int min_y_cost = 5000;
		int y_rubble = 5000;
		if (!rc.isLocationOccupied(y_location)) y_rubble = rc.senseRubble(y_location);
		int ie_path_cost = i_path_cost + e_rubble;
		if (ie_path_cost < min_e_cost) min_e_cost = ie_path_cost;
		int qu_path_cost = q_path_cost + u_rubble;
		if (qu_path_cost < min_u_cost) min_u_cost = qu_path_cost;
		int lp_path_cost = l_path_cost + p_rubble;
		if (lp_path_cost < min_p_cost) min_p_cost = lp_path_cost;
		int qp_path_cost = q_path_cost + p_rubble;
		if (qp_path_cost < min_p_cost) min_p_cost = qp_path_cost;
		int qv_path_cost = q_path_cost + v_rubble;
		if (qv_path_cost < min_v_cost) min_v_cost = qv_path_cost;
		int rv_path_cost = r_path_cost + v_rubble;
		if (rv_path_cost < min_v_cost) min_v_cost = rv_path_cost;
		int gc_path_cost = g_path_cost + c_rubble;
		if (gc_path_cost < min_c_cost) min_c_cost = gc_path_cost;
		int hc_path_cost = h_path_cost + c_rubble;
		if (hc_path_cost < min_c_cost) min_c_cost = hc_path_cost;
		int ic_path_cost = i_path_cost + c_rubble;
		if (ic_path_cost < min_c_cost) min_c_cost = ic_path_cost;
		int io_path_cost = i_path_cost + o_rubble;
		if (io_path_cost < min_o_cost) min_o_cost = io_path_cost;
		int no_path_cost = n_path_cost + o_rubble;
		if (no_path_cost < min_o_cost) min_o_cost = no_path_cost;
		int so_path_cost = s_path_cost + o_rubble;
		if (so_path_cost < min_o_cost) min_o_cost = so_path_cost;
		int hd_path_cost = h_path_cost + d_rubble;
		if (hd_path_cost < min_d_cost) min_d_cost = hd_path_cost;
		int id_path_cost = i_path_cost + d_rubble;
		if (id_path_cost < min_d_cost) min_d_cost = id_path_cost;
		int ij_path_cost = i_path_cost + j_rubble;
		if (ij_path_cost < min_j_cost) min_j_cost = ij_path_cost;
		int nj_path_cost = n_path_cost + j_rubble;
		if (nj_path_cost < min_j_cost) min_j_cost = nj_path_cost;
		int ga_path_cost = g_path_cost + a_rubble;
		if (ga_path_cost < min_a_cost) min_a_cost = ga_path_cost;
		int sy_path_cost = s_path_cost + y_rubble;
		if (sy_path_cost < min_y_cost) min_y_cost = sy_path_cost;
		int gb_path_cost = g_path_cost + b_rubble;
		if (gb_path_cost < min_b_cost) min_b_cost = gb_path_cost;
		int hb_path_cost = h_path_cost + b_rubble;
		if (hb_path_cost < min_b_cost) min_b_cost = hb_path_cost;
		int nt_path_cost = n_path_cost + t_rubble;
		if (nt_path_cost < min_t_cost) min_t_cost = nt_path_cost;
		int st_path_cost = s_path_cost + t_rubble;
		if (st_path_cost < min_t_cost) min_t_cost = st_path_cost;
		int gk_path_cost = g_path_cost + k_rubble;
		if (gk_path_cost < min_k_cost) min_k_cost = gk_path_cost;
		int lk_path_cost = l_path_cost + k_rubble;
		if (lk_path_cost < min_k_cost) min_k_cost = lk_path_cost;
		int qk_path_cost = q_path_cost + k_rubble;
		if (qk_path_cost < min_k_cost) min_k_cost = qk_path_cost;
		int qw_path_cost = q_path_cost + w_rubble;
		if (qw_path_cost < min_w_cost) min_w_cost = qw_path_cost;
		int rw_path_cost = r_path_cost + w_rubble;
		if (rw_path_cost < min_w_cost) min_w_cost = rw_path_cost;
		int sw_path_cost = s_path_cost + w_rubble;
		if (sw_path_cost < min_w_cost) min_w_cost = sw_path_cost;
		int gf_path_cost = g_path_cost + f_rubble;
		if (gf_path_cost < min_f_cost) min_f_cost = gf_path_cost;
		int lf_path_cost = l_path_cost + f_rubble;
		if (lf_path_cost < min_f_cost) min_f_cost = lf_path_cost;
		int rx_path_cost = r_path_cost + x_rubble;
		if (rx_path_cost < min_x_cost) min_x_cost = rx_path_cost;
		int sx_path_cost = s_path_cost + x_rubble;
		if (sx_path_cost < min_x_cost) min_x_cost = sx_path_cost;
		int hde_path_cost = hd_path_cost + e_rubble;
		if (hde_path_cost < min_e_cost) min_e_cost = hde_path_cost;
		int nje_path_cost = nj_path_cost + e_rubble;
		if (nje_path_cost < min_e_cost) min_e_cost = nje_path_cost;
		int lpu_path_cost = lp_path_cost + u_rubble;
		if (lpu_path_cost < min_u_cost) min_u_cost = lpu_path_cost;
		int rvu_path_cost = rv_path_cost + u_rubble;
		if (rvu_path_cost < min_u_cost) min_u_cost = rvu_path_cost;
		int gkp_path_cost = gk_path_cost + p_rubble;
		if (gkp_path_cost < min_p_cost) min_p_cost = gkp_path_cost;
		int rvp_path_cost = rv_path_cost + p_rubble;
		if (rvp_path_cost < min_p_cost) min_p_cost = rvp_path_cost;
		int lpv_path_cost = lp_path_cost + v_rubble;
		if (lpv_path_cost < min_v_cost) min_v_cost = lpv_path_cost;
		int swv_path_cost = sw_path_cost + v_rubble;
		if (swv_path_cost < min_v_cost) min_v_cost = swv_path_cost;
		int gcd_path_cost = gc_path_cost + d_rubble;
		if (gcd_path_cost < min_d_cost) min_d_cost = gcd_path_cost;
		int njd_path_cost = nj_path_cost + d_rubble;
		if (njd_path_cost < min_d_cost) min_d_cost = njd_path_cost;
		int hdj_path_cost = hd_path_cost + j_rubble;
		if (hdj_path_cost < min_j_cost) min_j_cost = hdj_path_cost;
		int soj_path_cost = so_path_cost + j_rubble;
		if (soj_path_cost < min_j_cost) min_j_cost = soj_path_cost;
		int hba_path_cost = hb_path_cost + a_rubble;
		if (hba_path_cost < min_a_cost) min_a_cost = hba_path_cost;
		int lfa_path_cost = lf_path_cost + a_rubble;
		if (lfa_path_cost < min_a_cost) min_a_cost = lfa_path_cost;
		int nty_path_cost = nt_path_cost + y_rubble;
		if (nty_path_cost < min_y_cost) min_y_cost = nty_path_cost;
		int rxy_path_cost = rx_path_cost + y_rubble;
		if (rxy_path_cost < min_y_cost) min_y_cost = rxy_path_cost;
		int icb_path_cost = ic_path_cost + b_rubble;
		if (icb_path_cost < min_b_cost) min_b_cost = icb_path_cost;
		int lfb_path_cost = lf_path_cost + b_rubble;
		if (lfb_path_cost < min_b_cost) min_b_cost = lfb_path_cost;
		int iot_path_cost = io_path_cost + t_rubble;
		if (iot_path_cost < min_t_cost) min_t_cost = iot_path_cost;
		int rxt_path_cost = rx_path_cost + t_rubble;
		if (rxt_path_cost < min_t_cost) min_t_cost = rxt_path_cost;
		int hbf_path_cost = hb_path_cost + f_rubble;
		if (hbf_path_cost < min_f_cost) min_f_cost = hbf_path_cost;
		int qkf_path_cost = qk_path_cost + f_rubble;
		if (qkf_path_cost < min_f_cost) min_f_cost = qkf_path_cost;
		int ntx_path_cost = nt_path_cost + x_rubble;
		if (ntx_path_cost < min_x_cost) min_x_cost = ntx_path_cost;
		int qwx_path_cost = qw_path_cost + x_rubble;
		if (qwx_path_cost < min_x_cost) min_x_cost = qwx_path_cost;
		int gcde_path_cost = gcd_path_cost + e_rubble;
		if (gcde_path_cost < min_e_cost) min_e_cost = gcde_path_cost;
		int soje_path_cost = soj_path_cost + e_rubble;
		if (soje_path_cost < min_e_cost) min_e_cost = soje_path_cost;
		int gkpu_path_cost = gkp_path_cost + u_rubble;
		if (gkpu_path_cost < min_u_cost) min_u_cost = gkpu_path_cost;
		int swvu_path_cost = swv_path_cost + u_rubble;
		if (swvu_path_cost < min_u_cost) min_u_cost = swvu_path_cost;
		int swvp_path_cost = swv_path_cost + p_rubble;
		if (swvp_path_cost < min_p_cost) min_p_cost = swvp_path_cost;
		int gkpv_path_cost = gkp_path_cost + v_rubble;
		if (gkpv_path_cost < min_v_cost) min_v_cost = gkpv_path_cost;
		int lfbc_path_cost = lfb_path_cost + c_rubble;
		if (lfbc_path_cost < min_c_cost) min_c_cost = lfbc_path_cost;
		int njdc_path_cost = njd_path_cost + c_rubble;
		if (njdc_path_cost < min_c_cost) min_c_cost = njdc_path_cost;
		int hdjo_path_cost = hdj_path_cost + o_rubble;
		if (hdjo_path_cost < min_o_cost) min_o_cost = hdjo_path_cost;
		int rxto_path_cost = rxt_path_cost + o_rubble;
		if (rxto_path_cost < min_o_cost) min_o_cost = rxto_path_cost;
		int sojd_path_cost = soj_path_cost + d_rubble;
		if (sojd_path_cost < min_d_cost) min_d_cost = sojd_path_cost;
		int gcdj_path_cost = gcd_path_cost + j_rubble;
		if (gcdj_path_cost < min_j_cost) min_j_cost = gcdj_path_cost;
		int icba_path_cost = icb_path_cost + a_rubble;
		if (icba_path_cost < min_a_cost) min_a_cost = icba_path_cost;
		int qkfa_path_cost = qkf_path_cost + a_rubble;
		if (qkfa_path_cost < min_a_cost) min_a_cost = qkfa_path_cost;
		int ioty_path_cost = iot_path_cost + y_rubble;
		if (ioty_path_cost < min_y_cost) min_y_cost = ioty_path_cost;
		int qwxy_path_cost = qwx_path_cost + y_rubble;
		if (qwxy_path_cost < min_y_cost) min_y_cost = qwxy_path_cost;
		int qkfb_path_cost = qkf_path_cost + b_rubble;
		if (qkfb_path_cost < min_b_cost) min_b_cost = qkfb_path_cost;
		int qwxt_path_cost = qwx_path_cost + t_rubble;
		if (qwxt_path_cost < min_t_cost) min_t_cost = qwxt_path_cost;
		int hbfk_path_cost = hbf_path_cost + k_rubble;
		if (hbfk_path_cost < min_k_cost) min_k_cost = hbfk_path_cost;
		int rvpk_path_cost = rvp_path_cost + k_rubble;
		if (rvpk_path_cost < min_k_cost) min_k_cost = rvpk_path_cost;
		int lpvw_path_cost = lpv_path_cost + w_rubble;
		if (lpvw_path_cost < min_w_cost) min_w_cost = lpvw_path_cost;
		int ntxw_path_cost = ntx_path_cost + w_rubble;
		if (ntxw_path_cost < min_w_cost) min_w_cost = ntxw_path_cost;
		int icbf_path_cost = icb_path_cost + f_rubble;
		if (icbf_path_cost < min_f_cost) min_f_cost = icbf_path_cost;
		int iotx_path_cost = iot_path_cost + x_rubble;
		if (iotx_path_cost < min_x_cost) min_x_cost = iotx_path_cost;
System.out.println(hdjo_cost)
System.exit(0)
	}
}